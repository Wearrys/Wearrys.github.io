<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wearry&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-16T03:26:01.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wearry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Calc</title>
    <link href="http://yoursite.com/2018/tsinsen-calc/"/>
    <id>http://yoursite.com/2018/tsinsen-calc/</id>
    <published>2018-08-16T02:32:35.000Z</published>
    <updated>2018-08-16T03:26:01.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>给定 $N$, 求有多少组 $a$, $b$ 满足:<br>$1 \le a &lt; b \le N$<br>$a + b \mid a \times b$</p>
</blockquote>
<p>$N \le 2 ^ {31} - 1$</p>
<a id="more"></a>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>考虑转化条件二:<br>令 $d = \gcd(a, b),\,\, a = a’d,\,\, b = b’d$. 那么条件二等价于:</p>
<p>$$a’d + b’d \mid a’b’d^2 \Rightarrow a’ + b’ \mid a’b’d \Rightarrow a’ + b’ \mid d$$</p>
<p>令 $d = t(a’ + b’)$, 则:</p>
<p>$$b = b’d = b’(a’ + b’)t$$</p>
<p>考虑枚举 $p = b’,\,\, q = (a’ + b’)$, 计算 $t$ 的数量:</p>
<p>$$ Ans = \sum_{p=2}^{\sqrt{N}}\sum_{q=p+1}^{2p-1} [\gcd(p, q) = 1] \left\lfloor \frac{N}{pq} \right\rfloor $$</p>
<h4 id="Algorithm-1"><a href="#Algorithm-1" class="headerlink" title="Algorithm 1"></a>Algorithm 1</h4><p>定义 $L_i$ 为 $i$ 的质因子个数.</p>
<p>首先枚举 $p$, 考虑有哪些 $q$ 能对答案产生贡献, 每次用 $O(L_p)$ 的时间判断 $p, q$ 是否互质.</p>
<p>复杂度为 $O(\sqrt{N} \sum_{i=2}^{\sqrt{N}} L_i) = O(N \log\log \sqrt{N})$</p>
<h4 id="Algorithm-2"><a href="#Algorithm-2" class="headerlink" title="Algorithm 2"></a>Algorithm 2</h4><p>枚举完 $p$ 之后, $T = \lfloor \frac{N}{p} \rfloor$ 的值就确定了.</p>
<p>只需要考虑 $\lfloor \frac{T}{q} \rfloor$ 的值即可, 考虑对这样的 $q$ 进行分块, 每一块内部利用 $2^{L_p}$ 的容斥计算与 $p$ 互质的 $q$ 的个数.</p>
<p>复杂度近似为 $O(\sqrt{N} \sum_{i=2}^{\sqrt{N}} 2^{L_i})$</p>
<h3 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><p>分析实际运行的情况, 发现理论复杂度更高的算法二表现优于算法一, 原因是 $\lfloor \frac{T}{q} \rfloor$ 的取值很少.</p>
<p>考虑综合两种算法的长处, 在 $q$ 比较小的时候, $\lfloor \frac{T}{q} \rfloor$ 的取值比较多, 我们使用算法一, $q$ 比较大的时候使用算法二.</p>
<p>假设这个分界点为 $k$, 复杂度:</p>
<p>$$f(k) = (k - p) L + (\left\lfloor \frac{T}{k} \right\rfloor + \left\lfloor \frac{T}{2p} \right\rfloor)2^L$$</p>
<p>只考虑其中与 $k$ 相关的部分:</p>
<p>$$f(k) = kL + \frac{T2^L}{k}$$</p>
<p>根据基本不等式, 使得 $f$ 最优的 $k = \sqrt{\frac{T2^L}{L}}$, 此时 $f(k) = 2\sqrt{T2^LL}$.</p>
<p>然后算一下复杂度, 发现在 $N = 2^{31}-1$ 时, 复杂度大约为 $8 \times 10 ^ 7$.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定 $N$, 求有多少组 $a$, $b$ 满足:&lt;br&gt;$1 \le a &amp;lt; b \le N$&lt;br&gt;$a + b \mid a \times b$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$N \le 2 ^ {31} - 1$&lt;/p&gt;
    
    </summary>
    
    
      <category term="Number Theory" scheme="http://yoursite.com/tags/Number-Theory/"/>
    
      <category term="Complexity Analysis" scheme="http://yoursite.com/tags/Complexity-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>记NOI2018</title>
    <link href="http://yoursite.com/2018/noi2018/"/>
    <id>http://yoursite.com/2018/noi2018/</id>
    <published>2018-07-30T00:38:56.000Z</published>
    <updated>2018-07-30T03:16:02.536Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了好久终于把博客修好了, 来填一些坑.</p>
<a id="more"></a>
<h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h3><p>上午在家无所事事, 收了下行李, 下午就到洋湖报到去了, 然后听说笔试时间调整到了上午, 感觉有点慌整个晚上都在背笔试.</p>
<h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>上午考笔试, 比预料中的简单很多, 没有什么快捷键之类的坑题也没有挂分, 试机就打了一个最简单的配置就跑了.</p>
<p>下午找了一间教室自习, 不知道干什么, 晚上懒得复习什么早早地睡了, 奇怪的是居然丝毫不紧张.</p>
<h3 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>第一试, 看了看题, 觉得题意都挺好理解的, 难度也基本按照题目顺序.</p>
<p>就直接开始写T1了, 写完 $\log^2$ 过了大样例直接丢到一边了, 然后看T2, 推了一个看起来有理有据的结论, 但不是很会算答案搞了很久大样例四个全错, 想了一下随便打了个特判过了其中两个, 又改了一下特判才在考试一半时间的时候过了大样例. </p>
<p>期间去上了一个厕所, 用掉20min…</p>
<p>看T3惊喜地发现68分特别傻逼, 飞快地码完过了大样例还有一个半小时, 正准备回去继续做T2最后20分的时候发现T1可能跑不过, 卡了很久的常, 期间竟然检查出好多致命的错误, 然后心里特别虚地不停检查, T2也没有继续想了.</p>
<p>好在最后并没有挂分.</p>
<h3 id="Day-1-5"><a href="#Day-1-5" class="headerlink" title="Day 1.5"></a>Day 1.5</h3><p>鸽了社会活动, 在自习室搞了一天颓.</p>
<p>直接打出了防沉迷警告…</p>
<h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>看完题目一直在想哪道题最简单, 然后T1补充了一个条件…</p>
<p>用了两个小时都没有从T1的倒数第二步推出最后一步, 想想当时可能真的受到了降智打击, 还自信地觉得T2比较可做, 码了很久发现是假算法, 感觉很慌滚去写T3暴力, 回来想先写T2的45分又不想放弃T1, 最后连T2的45分都没拿到…</p>
<p>感觉心态真的崩的厉害, 虽然最后查分发现意外的多了5分(大雾).</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好像从去年NOIP以来, 身上一直有某种二试Debuff存在, 可能经常性的因为第一试考得不错, 而对多数情况下更难的二试心存轻视, 也没能调整好自己的心态吧.</p>
<p>不管怎样, 接下来的OI生涯, 要更加珍惜!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了好久终于把博客修好了, 来填一些坑.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>平面树计数</title>
    <link href="http://yoursite.com/2017/count-plane-tree/"/>
    <id>http://yoursite.com/2017/count-plane-tree/</id>
    <published>2017-12-01T03:03:04.000Z</published>
    <updated>2018-08-14T01:26:39.161Z</updated>
    
    <content type="html"><![CDATA[<p>不常见的经典问题, 顺便总结一下Burnside引理吧.</p>
<a id="more"></a>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote>
<p>给定 $N$, 求 $N$ 个点的本质不同的平面树的数量.<br>两棵平面树是等价的当且仅当其中一棵能够移动点的位置与另一棵重合, 且过程中仍然是一棵平面树.</p>
</blockquote>
<h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>考虑模型转化(计算 $N+1$ 个点的答案):<br>取单位圆, 等距地取 $2N$ 个点, 然后将这些点两两配对连边, 满足所有连边不相交.<br>发现它的对偶图恰好是一棵平面树, 像这样:</p>
<p><img src="/img/plane-tree.png" alt=""></p>
<p>那么就只需要考虑本质不同的这样的配对的数量即可.<br>两个圆是等价的当且仅当一个圆可以通过旋转一定的角度与另一个圆重合.<br>而在这个圆上共有 $2N$ 个点, 就意味着有 $2N$ 个置换, 构成一个置换群.</p>
<p>置换群下的计数可以用到 Burnside引理 :</p>
<blockquote>
<p>$$ N(G, C) = \frac{1}{|G|} { \sum_{f \in G} c(f) } $$</p>
</blockquote>
<p>则转化为求置换下的不动点的数量:</p>
<ul>
<li><p>不存在置换的情况下, 答案为 $C_N$, $\mathrm{Catalan}$ 数的第 $N$ 项.<br>即将相互匹配的位置看作左右括号, 则所有合法的括号序列都对应一个满足条件的圆.</p>
</li>
<li><p>$N$ 为奇数时, 可能存在一条平分圆的对角线在置换下不变, 计算 $\frac{N+1}{2}$ 个点的答案即可.</p>
</li>
<li><p>考虑旋转置换.<br>为了满足旋转之后的边重合, 点 $i$ 和它的匹配点 $p_i$ 在旋转后应该仍然是相匹配的.<br>则环的数量一定是偶数 $2d$, 所以环的长度可以表示为 $\frac{2N}{2d} = \frac{N}{d}$.</p>
<p>假定置换的阶是 $e$, $e &gt; 1, e | N$, 环的数量 $2d = \frac{2N}{e}$.<br>环上与 $0$ 匹配的点为 $i$, 不难发现在这些点之间的点的方案数为 $C_{i-1}$.<br>当这些点确定之后, 它们在环上依次经过的 $e(i+1)$ 个点就确定了.</p>
</li>
</ul>
<p>令 $f(x)$ 表示 $\mathrm{Catalan}$ 数的生成函数, 根据 $\mathrm{Catalan}$ 数的递推式, 不难得到:</p>
<p>$$ f(x) = xf^2(x) + 1 $$</p>
<p>构造 $B_d$ 表示包含 $2d$ 个环的置换下不动点的数量.</p>
<p>$$ B_d = 2\sum_{i = 0}^{d-1} C_i B_{d-i-1} $$</p>
<p>其中因子 $2$ 考虑的是 $i &gt; 2d$ 时用当前置换的逆来计算的情况.</p>
<p>则 $B_d$ 的生成函数 $g(x)$ 满足:</p>
<p>$$ g(x) = 2x g(x) f(x) + 1 $$</p>
<p>解得:</p>
<p>$$ g(x) = (1 - 4x) ^ {-\frac{1}{2}} $$</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>$$ p(n) = \frac{1}{2n} ( [\mathrm{n \, is \, odd}]\binom{n}{\lfloor\frac{n}{2}\rfloor} - \binom{2n}{n-1} + \sum_{d|n}{\varphi(n/d)\binom {2d}{d}} )$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不常见的经典问题, 顺便总结一下Burnside引理吧.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Combinatorial" scheme="http://yoursite.com/tags/Combinatorial/"/>
    
      <category term="Generating Function" scheme="http://yoursite.com/tags/Generating-Function/"/>
    
      <category term="Burnside" scheme="http://yoursite.com/tags/Burnside/"/>
    
  </entry>
  
  <entry>
    <title>写在NOIP2017之后</title>
    <link href="http://yoursite.com/2017/after-noip-2017/"/>
    <id>http://yoursite.com/2017/after-noip-2017/</id>
    <published>2017-11-13T00:24:59.000Z</published>
    <updated>2017-12-06T14:02:45.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引"><a href="#引" class="headerlink" title="引"></a>引</h3><blockquote>
<p>本来应该有另一篇博客叫做写在NOIP2017之前的, 但跑回家才意识到博客搭在机房的电脑上, 于是……</p>
</blockquote>
<a id="more"></a>
<h3 id="比赛过程"><a href="#比赛过程" class="headerlink" title="比赛过程"></a>比赛过程</h3><h4 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h4><p>看到这个T1不送分了, 心里还是有点虚, 认真地读完了后面两题平复了一下心态.<br>想着既然是T1, 肯定不是送就是偷, 看着样例找了找规律, 推了个 $ a + b + (b \% a) (a &lt; b) $ 的方法, 发现过不了大样例. 于是盯着大样例发呆, 突然发现了世界的奥秘.<br>然后写T2, 写完眼查了一下大样例, 正要关闭窗口的时候 Vimdiff 了一波, 发现自己大小写写错一大堆…<br>T3想了想写了个不考虑零边的记忆化搜索, 发现大样例过不了 认真思考了一下发现是没有考虑到达终点又折返的情况 又想了想发现 $-1$ 挺好判的, 就加上了.</p>
<h4 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h4><p>到达考场时精神状态不太好, 意识模糊地打开了题目.<br>看完T2一直在想MST什么的, 感觉不太会做准备放弃时发现数据范围只有12, 于是秒懂了.<br>T3没想多久推出一个平衡树的做法, 对自己代码能力过于自信没有多想就开始写, 结果调到最后一刻还是GG了.</p>
<h3 id="反思错误"><a href="#反思错误" class="headerlink" title="反思错误"></a>反思错误</h3><p>感觉这次虽然题目比较奇怪, 但实际难度还是合理的, 出现了一些失误恰恰暴露出身上的一些问题.</p>
<ul>
<li>考试的时候大部分处在一种边想边写的状态, 一边写可能还要一边完善一些细节.</li>
<li>刷了很多Atcoder 的题目之后, 代码能力退化明显.</li>
<li>考场的debuff比较强.</li>
</ul>
<p>可能后面两条还稍微可以接受吧, 但是第一条的确是硬伤, 这样做简单题或者在比较清醒的时候写题可能还好,  然而一旦遇到代码实现比较复杂或者条件比较多的题目, 就会挂得很惨, 这个问题模拟赛中也出现过几次.<br>解决的策略其实说起来也不难, 主要就是每道题写之前把算法细节考虑基本清楚, 做到 $ Think \,\, twice, Code \,\, once $ 吧. 这样也不会出现某道题写了很久最后发现做法是错误的这种尴尬的情况也能够避免写一些特别复杂的做法.</p>
<h3 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h3><p>针对这次联赛的问题和原来的一些弱点, 对接下来的一段学习做一些规划：</p>
<ul>
<li>补一些数学相关的知识（不一定OI相关）</li>
<li>提高一下代码能力, 复习一些不熟练的数据结构, 刷一些质量比较高的题目</li>
</ul>
<p>然后的话, 回去就要补文化了吧.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本来应该有另一篇博客叫做写在NOIP2017之前的, 但跑回家才意识到博客搭在机房的电脑上, 于是……&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>CTSC2017 游戏</title>
    <link href="http://yoursite.com/2017/ctsc2017-game/"/>
    <id>http://yoursite.com/2017/ctsc2017-game/</id>
    <published>2017-08-22T12:21:17.000Z</published>
    <updated>2018-08-16T02:38:40.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>有$N$ 局游戏, 除第一局游戏外每一局游戏的获胜机率均与上一局游戏的结果有关. 现在对游戏进行$Q$次修改, 每次告诉你某一局游戏的结果或者删除之前给你的信息, 求修改后期望下获胜的场数为多少.</p>
</blockquote>
<p>$ N, Q \le 2 \times 10 ^ 5 $</p>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先不难发现, 某一局的游戏的胜率只与其左右的最近游戏结果相关, 所以答案可以分段计算.</p>
<p>考虑期望的线性性, 可以将期望胜利场数表示成每一局游戏的胜率之和.<br>记 $X _ i$  表示第$i$ 场游戏的状态. 所求即为 $ \sum _ {l &lt; m &lt; r} P( X _ m = 1 | X _ l, X _ r) $. </p>
<p>由贝叶斯公式:<br>$$<br>\begin{align}<br>P(X _ m = 1 | X _ l, X _ r) &amp;= \frac{P(X _ m = 1, X _ l, X _ r)}{P(X _ l) \cdot P(X _ r | X _ l) } \\<br>&amp;= \frac{P(X _ l) \cdot P(X _ m = 1 | X _ l) \cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ l) \cdot P(X _ r | X _ l)} \\<br>&amp;= \frac{P(X _ m=1 | X _ l) \cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ r | X _ l)} \\<br>&amp;= \frac{P(X _ m=1 | X _ l) \cdot P(X _ r | X _ m = 1)}{P(X _ r | X _ l)}<br>\end{align}<br>$$</p>
<p>发现分母是常数, 于是可以合并分子.<br>考虑分子的意义, 大概是合法状态下当前位置为胜的概率.<br>每一段就可以直接用$dp$来处理出答案, 记录某场比赛为胜/ 负的概率以及分子的期望即可.<br>这个复杂度是每次询问$O(n)$的.</p>
<p>其实这道题要讲的已经讲完了, 最后只要用矩乘快速合并$dp$值, 维护一下就可以了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有$N$ 局游戏, 除第一局游戏外每一局游戏的获胜机率均与上一局游戏的结果有关. 现在对游戏进行$Q$次修改, 每次告诉你某一局游戏的结果或者删除之前给你的信息, 求修改后期望下获胜的场数为多少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$ N, Q \le 2 \times 10 ^ 5 $&lt;/p&gt;
    
    </summary>
    
    
      <category term="Probability" scheme="http://yoursite.com/tags/Probability/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>两道概率题</title>
    <link href="http://yoursite.com/2017/probability-problems/"/>
    <id>http://yoursite.com/2017/probability-problems/</id>
    <published>2017-07-17T13:01:11.000Z</published>
    <updated>2018-08-14T01:26:53.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="玛里苟斯"><a href="#玛里苟斯" class="headerlink" title="玛里苟斯"></a>玛里苟斯</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><blockquote>
<p>给你一个大小为N的可重集合, 求该集合子集异或和的$K$次方的期望, 保证答案不超过$2 ^ {64}$.</p>
</blockquote>
<p>$N \le 100000, K \le 5, A _ i \le 10 ^ 9$</p>
<a id="more"></a>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>&emsp;&emsp; $K=1$ 时满足期望的线性性, 可以对每一个二进制位分开计算答案. 不难发现每一个二进制位变成 $1$ 的概率恰好为 $\frac {1}{2}$ (集合的奇数和偶数大小的子集数相同).</p>
<p>&emsp;&emsp; $K=2$ 时要求的是期望的平方, 即:<br>$$ \sum_{i=0}^{32} \sum_{j=0}^{32} b_i b_j 2^{i+j} $$<br>其中 $b_i$表示期望二进制第 $i$ 位的值, 枚举两个二进制位再求一下两个位置同时取到 $1$ 的概率即可.</p>
<p>&emsp;&emsp; $K \ge 3$时由于答案不超过 $2^{64}$, 所以集合内的数也不会很大, 直接用线性基处理.</p>
<h3 id="主旋律"><a href="#主旋律" class="headerlink" title="主旋律"></a>主旋律</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><blockquote>
<p>求N个点, M条边的有向图有多少生成子图满足整个图是强联通的.</p>
</blockquote>
<p>$N \le 15, M \le N(N-1)$</p>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>&emsp;&emsp; 这题一眼看上去不太好做, 不妨从问题的反面来考虑. 首先一个非强联通的图缩掉$Scc$ 之后会得到若干个 $DAG$. 如果知道$Scc$ 的划分情况, 计算$DAG$ 的数量就变成一个经典问题了:</p>
<p>$$ E(S, T) = {|\{(u, v) \in E | u \in S, v \in T)\}|} $$</p>
<p>$$ F(S) = \sum _ {T \subset S, T \neq \varnothing} (-1) ^ {|T| - 1}  \times 2 ^ {E(T, S-T)} F(T) $$</p>
<p>&emsp;&emsp; 然而感觉枚举$Scc$ 划分更不可做. 先不考虑$Scc$ 如何划分, 考虑哪一些点集构成多少个$Scc$. 假设$G _ K(T)$表示$T$ 集合分成$K$ 个$Scc$ 的方案数, 类似上面式子地, 有:</p>
<p>$$ F(S) = \sum _ {T \subset S, T \neq \varnothing} \sum _ {K = 1}^{|T|} (-1) ^ {K - 1} \times G _ K(T) \times 2 ^ {E(T, S-T) + E(S-T, S-T)} $$</p>
<p>$$ DP(S) = 2 ^ {E(S, S)} - F(S) $$</p>
<p>&emsp;&emsp; 实际上只需要求将某个集合分成奇数个$Scc$ 与偶数个$Scc$ 的方案数之差 $P(S)$:</p>
<p>$$ P(S) = DP(S) + \sum _ {T \subset S, u \in T} - DP(T) \times P(S - T) $$</p>
<blockquote>
<p>其中 $u \in T$ 避免重复计数.</p>
</blockquote>
<p>&emsp;&emsp; 这样加上一些预处理的技巧可以做到 $O(3 ^ n)$.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;玛里苟斯&quot;&gt;&lt;a href=&quot;#玛里苟斯&quot; class=&quot;headerlink&quot; title=&quot;玛里苟斯&quot;&gt;&lt;/a&gt;玛里苟斯&lt;/h3&gt;&lt;h4 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个大小为N的可重集合, 求该集合子集异或和的$K$次方的期望, 保证答案不超过$2 ^ {64}$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$N \le 100000, K \le 5, A _ i \le 10 ^ 9$&lt;/p&gt;
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="Combinatorial" scheme="http://yoursite.com/tags/Combinatorial/"/>
    
      <category term="Probability" scheme="http://yoursite.com/tags/Probability/"/>
    
  </entry>
  
  <entry>
    <title>Atcoder 选做</title>
    <link href="http://yoursite.com/2017/atcoder-select/"/>
    <id>http://yoursite.com/2017/atcoder-select/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2018-08-14T01:24:34.127Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp; 其实是总结一下比赛中遇到的好题, 然后瞎做了几场 AGC 的题目练习, 感觉还比较有意思.</p>
<a id="more"></a>
<h3 id="AGC"><a href="#AGC" class="headerlink" title="AGC"></a>AGC</h3><h4 id="AGC002-F-Leftmost-Ball"><a href="#AGC002-F-Leftmost-Ball" class="headerlink" title="AGC002 F Leftmost Ball"></a>AGC002 F Leftmost Ball</h4><blockquote>
<p>给你$N$种不同颜色的球, 每种有$K$个, 现在你可以将球任意排列, 但最终的序列中每种颜色的第一个出现位置要被染成$0$颜色, 求能够得到的本质不同的序列数, 对$10^9 + 7$取模.</p>
</blockquote>
<p>$N, K \leq 2000$</p>
<p>&emsp;&emsp; 这题正着处理没有什么思路, 但是如果从右往左来会比较好考虑. 我们可以记$f(i, j)$表示当前从右往左填剩下$i$个$0$颜色的球, 还剩下$j$种颜色没有放的方案数. 那么每一次的决策就包括放入一个$0$颜色的球以及添加一种颜色的$k-1$个球:</p>
<p>$$<br>\begin{aligned}<br>    f(i-1, j) &amp; \leftarrow f(i, j) \mid [i &gt; j] \\<br>    f(i, j-1) &amp; \leftarrow f(i, j) \times {n-i + (n-j) \times (k-1) + k-2 \choose k-2}<br>\end{aligned}<br>$$</p>
<blockquote>
<p>后面那个公式是可重集, 还有最后的答案要乘以$n!$.</p>
</blockquote>
<h4 id="AGC005-D-K-Perm-Counting"><a href="#AGC005-D-K-Perm-Counting" class="headerlink" title="AGC005 D ~K Perm Counting"></a>AGC005 D ~K Perm Counting</h4><blockquote>
<p>求长度为$N$的排列中, 满足对任意的$i$, 都有$|a_i - i| \neq K$的排列数量. </p>
</blockquote>
<p>$1 \leq K &lt; N \leq 2000$</p>
<p>&emsp;&emsp; 考虑容斥, 计算至少有$i$个位置不合法的方案数. 由于$K$是确定的, 那么所有不合法的方案可以看成是完全二分图匹配中出现了一条$(i, i+k)$的边或者一条$(i, i-k)$的边.</p>
<p>&emsp;&emsp; 将这样的边在画出来就是若干条交叉路径. 观察到这样的交叉路径不相交, 所以可以拆开拼成一个序列, 然后在序列上$dp$即可.</p>
<h4 id="AGC015-D-A-or…or-B-Problem"><a href="#AGC015-D-A-or…or-B-Problem" class="headerlink" title="AGC015 D A or…or B Problem"></a>AGC015 D A or…or B Problem</h4><blockquote>
<p>求在$[A, B]$中任意选出一个非空整数集合的元素位或和有多少种不同的答案.</p>
</blockquote>
<p>$1 \le A \le B \le 2^{60}$</p>
<p>&emsp;&emsp; 先考虑一些比较特殊的情况(以下默认$A, B$的位数相同):</p>
<ul>
<li><p>当$B$可以表示为$2^k - 1$时, 这个位或和恰好取遍$[A, B]$之间的所有整数.</p>
</li>
<li><p>当$A$可以表示为$2^k$时, 这个位或和在区间$[A, A + 2^{t+1}) \mid t &lt; log_2 A$中, 其中$t$是最大的满足$B$的第$t$位为$1$的数.</p>
</li>
</ul>
<p>&emsp;&emsp; 那么一般情况下这些条件有什么用呢?</p>
<p>&emsp;&emsp; 我们考虑找到最大的一个$T$,使得$B$的第$T$位为$1$且$A$的第$T$位不为$1$, 记$K = 2 ^ T$. 当选择的数的集合在$[A, K)$以及在$[K, B]$中的情况可以直接用上述结论.</p>
<p>&emsp;&emsp; 接下来考虑同时选取两个集合中的数可能会产生的答案. 因为这时小于$K$的部分是没有贡献的, 所以直接将$[A, K)$中的所有答案取出. 不难发现$[K, B]$中取任意个都与只使用$K$没有区别, 那么这时候的范围是$[K+A, 2\times K-1]$, 注意减去重复贡献.</p>
<h4 id="AGC015-F-Kenus-the-Ancient-Greek"><a href="#AGC015-F-Kenus-the-Ancient-Greek" class="headerlink" title="AGC015 F Kenus the Ancient Greek"></a>AGC015 F Kenus the Ancient Greek</h4><blockquote>
<p>Q组询问, 每组询问的形式为A, B, 表示求$x \in [1, A], y \in [1, B]$的$g(x, y)$的最大值, 及最大值的方案数, 其中: </p>
</blockquote>
<p>$$<br>g(x, y) =<br>\begin{cases}<br>    1, &amp; \text{y = 0} \\<br>    g(y, x), &amp; \text{x &gt; y} \\<br>    g(y \; mod \; x, x) + 1, &amp; \text{otherwise} \\<br>\end{cases}<br>$$</p>
<p>$1 \le Q \le 3 \times 10 ^ 5 \,\,, 1 \le A, B \le 10 ^ {18}$</p>
<p>&emsp;&emsp; <strong>以下无特殊说明, 均默认所有$x &lt; y, A &lt; B$</strong></p>
<p>&emsp;&emsp; 先考虑第一问, 如果我们由一个特定的$(x, y)$, 从小到大地构造使得$g(x, y)$的值不断地变大, 那么如何构造使得这个值最大呢?</p>
<p>&emsp;&emsp; 对于所有$(x’, y’)$满足$g(x’, y’) = g(x, y) + 1$, 显然有:</p>
<p>$$<br>(x’, y’) \in \{ (y, x + ky) \mid k \in Z^+ \}<br>$$</p>
<p>&emsp;&emsp; 同时, 为了使得这个过程尽可能的多次进行,我们从$(0, 1)$出发, 每次取$k = 1$.<br>发现这样生成了一组$Fibonacci$数列, 这里$Fibonacci$数列从0开始标号. </p>
<p>&emsp;&emsp; 那么第一问的答案就是求满足$Fib_k \le A,\; Fib_{k+1} \le B$的最大的$k$. 同时, 这样的数对是满足$g(x, y) = k$的最小的数对.</p>
<p>&emsp;&emsp; 接下来考虑统计方案数. 首先, 对于一组询问我们只需考虑其中<strong>与最优解相关</strong>的$(x, y)$.</p>
<p>&emsp;&emsp; 考虑所有最优的$(x, y)$会具有的性质:</p>
<ul>
<li><p>$x \ge Fib_k, \; y \ge Fib_{k+1}$</p>
</li>
<li><p>不存在一组$(x’ &lt; x, y’ &lt; y)$, 使得$g(x’, y’) &gt; g(x, y)$</p>
</li>
</ul>
<p>然而这样的$(x, y)$并不一定是最优的.</p>
<p>&emsp;&emsp; 我们接着分析所有在最优解的$g$的计算路径上的数对$(x, y)$的性质: 不难发现, 经过一次变化后得到的$(x’, y’)$, 一定满足:</p>
<ul>
<li><p>$g(x’, y’) = k-1$</p>
</li>
<li><p>$x’ \ge Fib_{k-1}, y’ \ge Fib_{k}$</p>
</li>
<li><p>$y’ \le Fib_{k+1} + Fib_{k-2}$</p>
</li>
</ul>
<p>&emsp;&emsp; 后面条件的解释: 若$y’ &gt; Fib_{k+1} + Fib_{k-2}$, 则 $$(x, y) = (y’ &gt; Fib_{k+1} + Fib_{k-2} &gt; Fib_{k+1}, x’ + py’ \ge x’ + y’ &gt; Fib_{k+2})$$, $(x, y)$不再满足上述最优性质2, 矛盾.</p>
<p>&emsp;&emsp; 同时每次向下一步进行构造的时候只有$(Fib_k, Fib_{k+1})$可能取到$p = 2$所以这样的数对个数是$O(k)$的. 所以我们预处理所有的这样的数对, 然后用除法算下答案就好了.</p>
<p>&emsp;&emsp; 复杂度$O(log^2{MAX} + QlogMAX)$.</p>
<h3 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h3><p>ARC 的题目主要来源是打过的几场比赛, 暂时不多.</p>
<h4 id="ARC074-E-RGB-Sequence"><a href="#ARC074-E-RGB-Sequence" class="headerlink" title="ARC074 E RGB Sequence"></a>ARC074 E RGB Sequence</h4><blockquote>
<p>给你一个长度为$N$的序列和$M$组约束条件, 每组条件形如$L_i, R_i, X_i$, 表示序列上的$[L_i, R_i]$中恰好有$X_i$种颜色, 现在要你用三种颜色给这个序列染色, 求满足所有约束的方案数.</p>
</blockquote>
<p>$1 \le N, M \le 300$</p>
<p>&emsp;&emsp; $dp$的思路应该比较显然, 然而普通的状态表示不太好处理. 我们记$dp_{r, g, b}$表示三种颜色的球最后一次出现的位置分别是$r, g, b$时的方案数. </p>
<p>&emsp;&emsp; 然后考虑状态的合法性, 可以把条件存在$R_i$的位置. 当选择一个状态时, 考虑这个状态的最末位的所有约束即可. </p>
<h4 id="ARC077-F-SS"><a href="#ARC077-F-SS" class="headerlink" title="ARC077 F SS"></a>ARC077 F SS</h4><blockquote>
<p>定义一个字符串为偶的, 当且仅当这个字符串能够被分成两个完全相同的字符串.</p>
</blockquote>
<p>&emsp;&emsp; 定义函数$f(s)$, 其中$s, f(s)$均是字符串,$f(s)$为在字符串$s$后添加非空的字符满足新串为偶且长度最小的串. 现在给你串$s$(初始为偶的), 求$f^{10^{100}}(s)[L, R]$中各个字母的出现次数.<br>$1 \le |S| \le 2\times 10^5$<br>$1 \le L \le R \le 10^{18}$</p>
<p>&emsp;&emsp; 首先对于一个给定的$s$, 其$f(s)$必定唯一. 考虑每次最少加一个字符,$f^{10^{100}}(s)$就等价于一个长度无穷的字符串. 这个答案的形式显然可以前缀和, 又因为$s$在变化过程中始终是偶的, 实际上我们只需要关注左半部分的字符.</p>
<p>&emsp;&emsp; 我们从最简单的一次操作来考虑. 记初始的字符串$s$为$SS$, 记一次变化之后左边的部分为$ST$, 那么得到的新串就是$STST$. 要使得加的字符长度最小, 就要在$S$中找到最长前后缀匹配长度, 这时$T$就是$S$去掉最长匹配后缀所得.</p>
<p>&emsp;&emsp; 我们发现, 每次操作都等价于找到前后缀匹配最大长度(当然要小于$|S|$), 然后将剩下部分的前缀$T$添加到$S$的末尾.</p>
<ul>
<li><p>当$|T| \mid |S|$时,$|S|$有长为$|T|$的最小周期, 每次加入的$|T|$相同.</p>
</li>
<li><p>当$|T| \nmid|S|$时, 我们<del>通过打表</del>发现, 这样的$T$是在有规律地变化的, 因为每次加入$T$之后的串前后缀最长匹配一定是$|T|$, 否则的话, 上一步中最长匹配的性质就不一定会满足.</p>
</li>
</ul>
<p>&emsp;&emsp; 然后我们得到了一个$Fibonacci$数列? 直接暴力算就好了… 实际上第一种情况也可以直接算, 因为整个序列都是$T$的若干次重复得到的.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp; 其实是总结一下比赛中遇到的好题, 然后瞎做了几场 AGC 的题目练习, 感觉还比较有意思.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Combinatorial" scheme="http://yoursite.com/tags/Combinatorial/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Div2 418E</title>
    <link href="http://yoursite.com/2017/cf-418e/"/>
    <id>http://yoursite.com/2017/cf-418e/</id>
    <published>2017-06-12T12:56:07.000Z</published>
    <updated>2018-08-14T01:21:40.249Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>求满足如下条件的 $N$ 个点的简单无向图的个数对 $ 1e9 + 7 $ 取模的结果：</p>
<ul>
<li>每个点的度数均为 $2$ 或 $3$</li>
<li>从一号点到任何一个点的最短路唯一并且随着点标号上升而不降. </li>
</ul>
</blockquote>
<p>(两个图不同当且仅当边的集合不同).<br>$N &lt;= 50$ </p>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们可以记:</p>
<ul>
<li>$f_{i, j}$ 表示考虑完前 $i$ 个点, 最后一层恰好有 $j$ 个点, 且最后一层之前的点度数已经满足条件时的方案数.</li>
<li>$g_{i, j, k}$ 表示当前层有 $i$ 个点, 上一层剩下来 $j$ 个度为 $2$ 的点, $k$ 个度为 $3$ 的点时连边的方案数.</li>
</ul>
<p>那么容易得到$f_{i, j} = \sum_{k} f_{i-j, k} \times g_{j, c0, c1}$, 其中$c0\,,c1$表示最后一层 $k$ 个点中度为 $2$ 的点和度为 $3$ 的点的个数.</p>
<p>对于 $g$, 不难得到:</p>
<p>$$<br>g_{i, j, k} =<br>\begin{cases}<br>    1 &amp; i = 0, j = 0, k = 0 \\<br>    \sum_{l=2}^{k-1} \frac{l!}{2} {k-1 \choose l} g_{i, j, k-l-1} &amp; i = 0, j = 0, k &gt; 0 \\<br>    (j-1) \cdot g_{i, j-2, k} + k \cdot g_{i, j, k-1} &amp; i = 0, j &gt; 0 \\<br>    j \cdot g_{i-1, j-1, k} + k \cdot g_{i-1, j+1, k-1} &amp; i &gt; 0<br>\end{cases}<br>$$</p>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>注意在第二个递推式中 $l$ 从 $2$ 开始枚举, 因为不能有重边, 所以不存在大小为 $2$ 的环.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;求满足如下条件的 $N$ 个点的简单无向图的个数对 $ 1e9 + 7 $ 取模的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个点的度数均为 $2$ 或 $3$&lt;/li&gt;
&lt;li&gt;从一号点到任何一个点的最短路唯一并且随着点标号上升而不降. &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;(两个图不同当且仅当边的集合不同).&lt;br&gt;$N &amp;lt;= 50$ &lt;/p&gt;
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="Combinatorial" scheme="http://yoursite.com/tags/Combinatorial/"/>
    
  </entry>
  
  <entry>
    <title>ZJOI2017 树状数组</title>
    <link href="http://yoursite.com/2017/zjoi2017-bit/"/>
    <id>http://yoursite.com/2017/zjoi2017-bit/</id>
    <published>2017-06-12T12:04:19.000Z</published>
    <updated>2018-08-14T01:23:36.771Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>给你一个长度为 $N$ 的序列以及 $M$ 次操作, 每次等概率地修改 $[L_i, R_i]$ 区间中一个值的奇偶性, 或者对于询问$[L_i,R_i]$区间中的和的奇偶性, 判断给定的一种错误算法输出正确答案的概率是多少<br>$ N, M &lt;= 10^5 $</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>考虑这个错误算法, 由于可以把 $ + lowbit $ 和 $ - lowbit $ 都看成在一棵树上向父亲节点跳, 根据这个性质可以知道错误算法求了一个后缀和, 所以当且仅当对于询问区间 $[L_i, R_i]$, 满足 $ a[L_i-1] = a[R_i] $ 时它会输出正确答案</p>
<p>那么我们得到了一个 $ O(nm) $ 的暴力算法, 即每一个询问都暴力扫之前的所有修改计算概率即可.</p>
<p>然而这样还不能通过所有数据, 考虑将区间 $[L_i, R_i]$ 表示成二维平面上的一个点 $ (L_i, R_i)$.</p>
<p>然后用一个二维线段树去维护每个点代表的两个端点的值不相等的概率.显然地, 这个概率是可以很方便的合并的.<br>这样对于每次修改$[L_i, R_i]$的操作, 相当于:</p>
<ul>
<li>将 $ x \in [L_i, R_i], y \in [L_i, R_i] $ 中的点 $(x, y)$ 与 $ \frac{2}{R_i - L_i+1} $ 合并.</li>
<li>将 $ x \in [L_i, R_i], y \in (R_i, N] $ 以及 $ x \in [0, L_i), y \in [L_i, R_i] $ 与 $ \frac{1}{R_i - L_i+1} $ 合并.</li>
</ul>
<h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>注意到对于 $ L_i = 1 $ 的情况, $ Find(0) $ 直接返回了 $0$ 而非 $0$ 的后缀和<br>这个时候就要特判一下了, 注意到每次不管如何修改, 最终的正确答案是 $R_i$ 的前缀和, 而题中所给的方法输出的答案是 $R_i$ 的后缀和.</p>
<ul>
<li>当前修改次数为偶数,  则当且仅当 $R_i = 0$ 前后缀和相同, 相当于查询 $a[R_i] = 0$ 的概率.</li>
<li>当前修改次数为奇数,  则当且仅当 $R_i = 1$ 前后缀和相同, 相当于查询 $a[R_i] = 1$ 的概率.</li>
</ul>
<p>因为 $a[0]$ 不可能被修改, 所以上述问题也可以转化为查询 $[L_i, R_i]$ 相等概率.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fst first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> snd second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar getchar_unlocked</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmax</span><span class="params">(T&amp; a, T b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmin</span><span class="params">(T&amp; a, T b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">0</span>, f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">for</span>( ;!<span class="built_in">isdigit</span>(ch); ch = getchar()) <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>( ; <span class="built_in">isdigit</span>(ch); ch = getchar()) n = n * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">    <span class="keyword">return</span> n * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (a * (<span class="number">1L</span>L - b + mod) % mod + b * (<span class="number">1L</span>L - a + mod) % mod) % mod;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> N, M, prob;</div><div class="line"><span class="keyword">namespace</span> Seg_Tree &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SZ_X = (maxn &lt;&lt; <span class="number">2</span>) + <span class="number">5</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SZ_Y = (maxn * <span class="number">400</span>) + <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> rt[SZ_X];</div><div class="line">    <span class="keyword">int</span> val[SZ_Y];</div><div class="line">    <span class="keyword">int</span> lc[SZ_Y], rc[SZ_Y], cnt;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LC (u &lt;&lt; 1) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RC (LC | 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r) &gt;&gt; 1)</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add_Y</span><span class="params">(<span class="keyword">int</span>&amp; u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!u) u = ++cnt;</div><div class="line">        <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) &#123;</div><div class="line">            val[u] = merge(val[u], prob);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(x &lt;= mid) Add_Y(lc[u], l, mid, x, y);</div><div class="line">        <span class="keyword">if</span>(y &gt; mid) Add_Y(rc[u], mid+<span class="number">1</span>, r, x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add_X</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> x0, <span class="keyword">int</span> y0)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(x &lt;= l &amp;&amp; r &lt;= y) &#123;</div><div class="line">            Add_Y(rt[u], <span class="number">0</span>, N, x0, y0);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(x &lt;= mid) Add_X(LC, l, mid, x, y, x0, y0);</div><div class="line">        <span class="keyword">if</span>(y &gt; mid) Add_X(RC, mid+<span class="number">1</span>, r, x, y, x0, y0);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query_Y</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> val[u];</div><div class="line">        <span class="keyword">return</span> merge(val[u], </div><div class="line">                x &lt;= mid ? query_Y(lc[u], l, mid, x) : query_Y(rc[u], mid+<span class="number">1</span>, r, x));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query_X</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> x0)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> query_Y(rt[u], <span class="number">0</span>, N, x0);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> merge(query_Y(rt[u], <span class="number">0</span>, N, x0), </div><div class="line">                x &lt;= mid ? query_X(LC, l, mid, x, x0) : query_X(RC, mid+<span class="number">1</span>, r, x, x0));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpm</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> <span class="built_in">exp</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; <span class="built_in">exp</span> &gt; <span class="number">0</span>; <span class="built_in">exp</span> &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">exp</span> &amp; <span class="number">1</span>) </div><div class="line">            res = <span class="number">1L</span>L * res * base % mod;</div><div class="line">        base = <span class="number">1L</span>L * base * base % mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    N = read(); M = read();</div><div class="line">    <span class="keyword">while</span>(M--) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> ty, l, r;</div><div class="line">        ty = read(); l = read(); r = read();</div><div class="line">        <span class="keyword">if</span>(ty == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">static</span> LL tmp; </div><div class="line">            tmp = fpm(r-l+<span class="number">1</span>, mod<span class="number">-2</span>);</div><div class="line">            prob = <span class="number">2</span>*tmp; Seg_Tree::Add_X(<span class="number">1</span>, <span class="number">0</span>, N, l, r, l, r); </div><div class="line">            prob = tmp; Seg_Tree::Add_X(<span class="number">1</span>, <span class="number">0</span>, N, l, r, r+<span class="number">1</span>, N);</div><div class="line">            prob = tmp; Seg_Tree::Add_X(<span class="number">1</span>, <span class="number">0</span>, N, <span class="number">0</span>, l<span class="number">-1</span>, l, r);</div><div class="line">            ++ tot;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">static</span> <span class="keyword">int</span> ans;</div><div class="line">            ans = (<span class="number">1</span>-Seg_Tree::query_X(<span class="number">1</span>, <span class="number">0</span>, N, l<span class="number">-1</span>, r)+mod) % mod;</div><div class="line">            <span class="keyword">if</span>(!(l<span class="number">-1</span>) &amp;&amp; (tot &amp; <span class="number">1</span>))</div><div class="line">                ans = (<span class="number">1</span>-ans+mod) % mod;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"ans.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    solve();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个长度为 $N$ 的序列以及 $M$ 次操作, 每次等概率地修改 $[L_i, R_i]$ 区间中一个值的奇偶性, 或者对于询问$[L_i,R_i]$区间中的和的奇偶性, 判断给定的一种错误算法输出正确答案的概率是多少&lt;br&gt;$ N, M &amp;lt;= 10^5 $&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>NOI2016 网格</title>
    <link href="http://yoursite.com/2017/noi2016-grid/"/>
    <id>http://yoursite.com/2017/noi2016-grid/</id>
    <published>2017-06-10T06:36:06.000Z</published>
    <updated>2018-08-14T01:23:07.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>给出一个 $ N \times M $ 的网格图和图上的 $ C $ 个障碍物, 求最少删去多少个点可使得原图空格不四连通.<br>$ N, M &lt;= 10 ^ 9, C &lt;= 10 ^ 5 $</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们可以发现, 可能的答案只有 $ \{ -1, 0, 1, 2 \} $ 几种.</p>
<p>考虑一些简单的情况:<br>答案等于 $ -1 $ 时, 点数小于 $2$ 或者恰好有两个相邻的点.<br>答案为 $ 0 $ 时, 显然原图不连通.</p>
<p>那么就只需知道答案是否为 $ 1 $, 发现答案等于 $ 1 $ 当且仅当原图存在割点, 暴力的话不难做到 $ O(n * m) $.</p>
<p>将到达每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来, 然后在这些点中找出一个割点, 满足到达最近的障碍的距离不超过 $1$.<br>这样的点就一定是原图中的割点.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fst first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> snd second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">chkmax</span><span class="params">(T&amp; a, T b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">chkmin</span><span class="params">(T&amp; a, T b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2.5e6</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">	T n = <span class="number">0</span>, f = <span class="number">1</span>;</div><div class="line">	<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">for</span>( ;!<span class="built_in">isdigit</span>(ch); ch = getchar()) <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>( ; <span class="built_in">isdigit</span>(ch); ch = getchar()) n = n * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">	<span class="keyword">return</span> n * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash_Map</span> &#123;</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1666667</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> st[mod], nxt[maxn], X[maxn], Y[maxn];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        cnt = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((<span class="number">233L</span>L*x + (y^<span class="number">888</span>))%mod + mod)%mod;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = idx(x, y);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = st[u]; i; i = nxt[i]) </div><div class="line">            <span class="keyword">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> u = idx(x, y);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = st[u]; i; i = nxt[i]) </div><div class="line">            <span class="keyword">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class="line">                <span class="keyword">return</span> i;</div><div class="line"></div><div class="line">        ++ cnt;</div><div class="line">        X[cnt] = x, Y[cnt] = y;</div><div class="line">        nxt[cnt] = st[u]; st[u] = cnt;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;HM;</div><div class="line"></div><div class="line">LL n, m, c;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> st[maxn], nxt[maxn &lt;&lt; <span class="number">3</span>], to[maxn &lt;&lt; <span class="number">3</span>], ecnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;</div><div class="line">    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> mark[maxn], now = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    ecnt = <span class="number">1</span>;</div><div class="line">    HM.clear();</div><div class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">flood_fill</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</div><div class="line">    mark[u] = now;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = st[u], v; i; i = nxt[i]) <span class="keyword">if</span>(mark[v = to[i]] != now) </div><div class="line">        res += flood_fill(v);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">area_count</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123; <span class="keyword">return</span> ++ now, flood_fill(s); &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">chk</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n*m-c &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> res = area_count(c + <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(n*m == <span class="number">2</span> || (res == <span class="number">2</span> &amp;&amp; n*m-c == <span class="number">2</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">-2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> flag;</div><div class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], dfs_clock = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">bool</span> f = <span class="literal">false</span>)</span> </span>&#123;</div><div class="line">    low[u] = dfn[u] = ++dfs_clock;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = st[u], v; i; i = nxt[i]) <span class="keyword">if</span>((v = to[i]) ^ fa) &#123;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            <span class="keyword">if</span>(dfs(v, u)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(vis[u] == <span class="number">1</span> &amp;&amp; (low[v] &gt; dfn[u] || (!f &amp;&amp; low[v] == dfn[u]))) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            chkmin(low[u], low[v]);</div><div class="line">        &#125;<span class="keyword">else</span> chkmin(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chk1</span><span class="params">()</span> </span>&#123;</div><div class="line">    flag = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn, dfs_clock = <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = c+<span class="number">1</span>; i &lt;= HM.cnt; i++) <span class="keyword">if</span>(!dfn[i]) &#123;</div><div class="line">        <span class="keyword">if</span>(dfs(i, <span class="number">0</span>, <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> x(i) HM.X[i]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y(i) HM.Y[i]</span></div><div class="line"></div><div class="line"><span class="comment">//char ch[1000][1000];</span></div><div class="line"><span class="keyword">int</span> X[maxn], Y[maxn], idx[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chk0</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(idx, <span class="number">0</span>, <span class="keyword">sizeof</span> idx);</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) HM.insert(X[i], Y[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= c; v++) <span class="keyword">if</span>(!vis[v]) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; V;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> q[maxn];</div><div class="line">        <span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</div><div class="line"></div><div class="line">        ecnt = <span class="number">1</span>;</div><div class="line">        vis[q[tail++] = v] = <span class="number">3</span>;</div><div class="line">        <span class="keyword">while</span>(head &lt; tail) &#123;</div><div class="line">            <span class="keyword">int</span> h = q[head++];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</div><div class="line">                <span class="keyword">int</span> nx = x(h) + dx[i];</div><div class="line">                <span class="keyword">int</span> ny = y(h) + dy[i];</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(nx &gt;= <span class="number">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class="line">                    <span class="keyword">int</span> Nxt = HM.insert(nx, ny);</div><div class="line"></div><div class="line">                    st[Nxt] = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">if</span>(Nxt &lt;= c) &#123;</div><div class="line">                        <span class="keyword">if</span>(!vis[Nxt]) &#123;</div><div class="line">                            vis[Nxt] = <span class="number">3</span>;</div><div class="line">                            q[tail++] = Nxt;</div><div class="line">                        &#125;</div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(idx[Nxt] != v) &#123;</div><div class="line">                        idx[Nxt] = v, V.pb(Nxt);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">int</span>(V.size()); i++) &#123;</div><div class="line">            <span class="keyword">int</span> u = V[i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</div><div class="line">                <span class="keyword">int</span> nx = x(u) + dx[j];</div><div class="line">                <span class="keyword">int</span> ny = y(u) + dy[j];</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(nx &gt;= <span class="number">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class="line">                    <span class="keyword">int</span> Nxt = HM.find(nx, ny);</div><div class="line">                    <span class="keyword">if</span>(idx[Nxt] == v) addedge(u, Nxt);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(V.size() &amp;&amp; area_count(V[<span class="number">0</span>]) != <span class="keyword">int</span>(V.size()))</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tail = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> q[maxn];</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) </div><div class="line">        HM.insert(X[i], Y[i]), vis[i] = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</div><div class="line">            <span class="keyword">int</span> nx = X[i] + dx[j];</div><div class="line">            <span class="keyword">int</span> ny = Y[i] + dy[j];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(nx &gt;= <span class="number">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class="line">                <span class="keyword">int</span> Nxt = HM.insert(nx, ny);</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(!vis[Nxt]) &#123;</div><div class="line">                    vis[Nxt] = <span class="number">1</span>;</div><div class="line">                    q[tail++] = Nxt;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lim = tail;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</div><div class="line">            <span class="keyword">int</span> nx = x(q[i]) + dx[j];</div><div class="line">            <span class="keyword">int</span> ny = y(q[i]) + dy[j];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(nx &gt;= <span class="number">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class="line">                <span class="keyword">int</span> Nxt = HM.insert(nx, ny);</div><div class="line">                <span class="keyword">if</span>(!vis[Nxt]) &#123;</div><div class="line">                    vis[Nxt] = <span class="number">2</span>;</div><div class="line">                    q[tail++] = Nxt;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tail; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</div><div class="line">            <span class="keyword">int</span> nx = x(q[i]) + dx[j];</div><div class="line">            <span class="keyword">int</span> ny = y(q[i]) + dy[j];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(nx &gt;= <span class="number">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class="line">                <span class="keyword">int</span> Nxt = HM.find(nx, ny);</div><div class="line">                <span class="keyword">if</span>(Nxt &gt; c) addedge(q[i], Nxt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">spe</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</div><div class="line">        Y[++c] = <span class="number">0</span>; Y[++c] = m+<span class="number">1</span>; sort(Y+<span class="number">1</span>, Y+c+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= c; i++) <span class="keyword">if</span>(Y[i] - Y[i<span class="number">-1</span>] &gt; <span class="number">1</span>) ++ res;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        X[++c] = <span class="number">0</span>; X[++c] = n+<span class="number">1</span>; sort(X+<span class="number">1</span>, X+c+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= c; i++) <span class="keyword">if</span>(X[i] - X[i<span class="number">-1</span>] &gt; <span class="number">1</span>) ++ res;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res &gt;= <span class="number">2</span> ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"ans.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> T = read&lt;<span class="keyword">int</span>&gt;(); T--; ) &#123;</div><div class="line"></div><div class="line">        init();</div><div class="line"></div><div class="line">        n = read&lt;<span class="keyword">int</span>&gt;();</div><div class="line">        m = read&lt;<span class="keyword">int</span>&gt;();</div><div class="line">        c = read&lt;<span class="keyword">int</span>&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) &#123;</div><div class="line">            X[i] = read&lt;<span class="keyword">int</span>&gt;();</div><div class="line">            Y[i] = read&lt;<span class="keyword">int</span>&gt;();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(chk0()) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        init();</div><div class="line">        build();</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> ans;</div><div class="line">        <span class="keyword">if</span>((ans = chk()) != <span class="number">-2</span>) &#123; &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(min(n, m) == <span class="number">1</span>) &#123; ans = spe(); &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            ans = chk1() ? <span class="number">1</span> : <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(c == <span class="number">0</span>) ans = min(n, m) == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给出一个 $ N \times M $ 的网格图和图上的 $ C $ 个障碍物, 求最少删去多少个点可使得原图空格不四连通.&lt;br&gt;$ N, M &amp;lt;= 10 ^ 9, C &amp;lt;= 10 ^ 5 $&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Graph Theory" scheme="http://yoursite.com/tags/Graph-Theory/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 553E Kyoya and Train</title>
    <link href="http://yoursite.com/2017/cf-553e/"/>
    <id>http://yoursite.com/2017/cf-553e/</id>
    <published>2017-05-03T13:21:27.000Z</published>
    <updated>2018-08-14T01:26:22.360Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote>
<p>给定 $N$ 个点, $M$ 条边的有向图.<br>每条边有花费: 通过第 $i$ 条边的时间有 $ P _ {i1} $ 的概率为 $1$, $P _ {i2}$ 的概率为 $2$…<br>如果总用时超过 $T$ 则会被罚钱 $X$ 元, 求从 $1$ 号点到 $n$ 号点的最小期望花费.<br>$ N \leq 50, M \leq 100, T \leq 100000 $</p>
</blockquote>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>考虑暴力DP, 记状态 $ dp _ {i, t} $ 表示到达 $i$ 号点, 且经过的时间为 $t$ 的最小期望花费, 转移十分显然.<br>同时因为状态之间按照时间构成一个拓扑图, 所以转移不存在环.</p>
<a id="more"></a>
<p>可以记 $S _ {e, t}$ 表示边 $e$ 在时刻 $t$ 之后后继状态的最小期望花费. </p>
<p>则可以用下面这个式子计算 $dp _ {e, t}$:</p>
<p>$$ dp _ {i, t} = min \left\{ S _ {e, t} + cost _ e \right\} $$</p>
<p>$e$ 是 $i$ 的出边.</p>
<p>接下来考虑如何计算 $S(e,t)$, 利用定义:</p>
<p>$$ S _ {e, t} = \sum _ {i = 1}^{T} dp _ {to _ e, t + i} * P _ {ei} $$</p>
<p>这样变成卷积形式, 分治 $FFT$ 即可.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">chkmax</span><span class="params">(T&amp; a, T b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">bool</span> <span class="title">chkmin</span><span class="params">(T&amp; a, T b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fst first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> snd second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class="meta-string">":"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    T n = <span class="number">0</span>, f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">for</span>( ;!<span class="built_in">isdigit</span>(ch); ch = getchar()) <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>( ; <span class="built_in">isdigit</span>(ch); ch = getchar()) n = n * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">    <span class="keyword">return</span> n * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> real, imag;</div><div class="line">    Complex(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>): real(r), imag(i) &#123;&#125;</div><div class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Complex(real + rhs.real, imag + rhs.imag);</div><div class="line">    &#125;</div><div class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Complex(real - rhs.real, imag - rhs.imag);</div><div class="line">    &#125;</div><div class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Complex(real*rhs.real - imag*rhs.imag, real*rhs.imag + imag*rhs.real);</div><div class="line">    &#125;</div><div class="line">    Complex <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; div) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> Complex(real / div, imag / div);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rev[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFT</span><span class="params">(Complex *x, <span class="keyword">int</span> N, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) </div><div class="line">        <span class="keyword">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">2</span>; l &lt;= N; l &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">        Complex wn = Complex(<span class="built_in">cos</span>(<span class="number">2</span>*PI*t/l), <span class="built_in">sin</span>(<span class="number">2</span>*PI*t/l));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += l) &#123;</div><div class="line">            Complex w = Complex(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (l &gt;&gt; <span class="number">1</span>); j++, w = w * wn) &#123;</div><div class="line">                Complex L = x[i + j];</div><div class="line">                Complex R = x[i + j + (l &gt;&gt; <span class="number">1</span>)] * w;</div><div class="line">                x[i + j] = L + R;</div><div class="line">                x[i + j + (l &gt;&gt; <span class="number">1</span>)] = L - R;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!~t) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) x[i] = x[i] / N;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> dis[N][N];</div><div class="line"><span class="keyword">int</span> n, m, t, x;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> u, v, c;</div><div class="line">    <span class="keyword">double</span> p[maxn];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</div><div class="line">        u = read&lt;<span class="keyword">int</span>&gt;(), v = read&lt;<span class="keyword">int</span>&gt;(), c = read&lt;<span class="keyword">int</span>&gt;();</div><div class="line"></div><div class="line">        chkmin(dis[u][v], c);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) p[i] = <span class="keyword">double</span>(read&lt;<span class="keyword">int</span>&gt;()) / <span class="number">100000.0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;E[N];</div><div class="line"></div><div class="line">Complex A[maxn], B[maxn];</div><div class="line"><span class="keyword">double</span> S[N][maxn], f[N][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> mid)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> base, len;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</div><div class="line">        <span class="keyword">int</span> v = E[k].v;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(base = <span class="number">1</span>, len = <span class="number">0</span>; base &lt;= <span class="number">2</span>*r-l-mid+<span class="number">1</span>; base &lt;&lt;= <span class="number">1</span>) ++ len;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; base; i++) rev[i] = (rev[i&gt;&gt;<span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i&amp;<span class="number">1</span>) &lt;&lt; (len<span class="number">-1</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; base; i++) A[i] = B[i] = Complex(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r-mid; i++) A[i] = Complex(f[v][r-i], <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r-l; i++) B[i<span class="number">-1</span>] = Complex(E[k].p[i], <span class="number">0</span>);</div><div class="line"></div><div class="line">        DFT(A, base, <span class="number">1</span>); DFT(B, base, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; base; i++) A[i] = A[i] * B[i];</div><div class="line">        DFT(A, base, <span class="number">-1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= mid; i++) S[k][i] += A[r-i<span class="number">-1</span>].real;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq_solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(l == r) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) </div><div class="line">            chkmin(f[E[i].u][l], S[i][l] + E[i].c);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    cdq_solve(mid+<span class="number">1</span>, r);</div><div class="line">    calc(l, r, mid);</div><div class="line">    cdq_solve(l, mid);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">    freopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"ans.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(dis, oo, <span class="keyword">sizeof</span> dis);</div><div class="line">    n = read&lt;<span class="keyword">int</span>&gt;(), m = read&lt;<span class="keyword">int</span>&gt;(), t = read&lt;<span class="keyword">int</span>&gt;(), x = read&lt;<span class="keyword">int</span>&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i][i] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) E[i].input();</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) </div><div class="line">                chkmin(dis[i][j], dis[i][k] + dis[k][j]);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> T = <span class="number">0</span>; T &lt;= t; T++) f[i][T] = (i == n) ? <span class="number">0</span> : oo;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> T = t+<span class="number">1</span>; T &lt;= <span class="number">2</span>*t; T++) f[i][T] = dis[i][n] + x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    calc(<span class="number">1</span>, t*<span class="number">2</span>, t);</div><div class="line">    cdq_solve(<span class="number">0</span>, t);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, f[<span class="number">1</span>][<span class="number">0</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定 $N$ 个点, $M$ 条边的有向图.&lt;br&gt;每条边有花费: 通过第 $i$ 条边的时间有 $ P _ {i1} $ 的概率为 $1$, $P _ {i2}$ 的概率为 $2$…&lt;br&gt;如果总用时超过 $T$ 则会被罚钱 $X$ 元, 求从 $1$ 号点到 $n$ 号点的最小期望花费.&lt;br&gt;$ N \leq 50, M \leq 100, T \leq 100000 $&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h3&gt;&lt;p&gt;考虑暴力DP, 记状态 $ dp _ {i, t} $ 表示到达 $i$ 号点, 且经过的时间为 $t$ 的最小期望花费, 转移十分显然.&lt;br&gt;同时因为状态之间按照时间构成一个拓扑图, 所以转移不存在环.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="Probability" scheme="http://yoursite.com/tags/Probability/"/>
    
      <category term="Generating Function" scheme="http://yoursite.com/tags/Generating-Function/"/>
    
  </entry>
  
</feed>
