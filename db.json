{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/img/plane-tree.png","path":"img/plane-tree.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/ava.png","path":"images/ava.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"6262b4f24098621ca686cfd555166e6ee2d6aa6a","modified":1512568965527},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1512562679246},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1512562679246},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1512562679254},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1512562679246},{"_id":"themes/next/README.md","hash":"aa2fb15ef016074b10755323c99025df506d5ca3","modified":1512562679246},{"_id":"themes/next/_config.yml","hash":"6824ff805a0d64903240d7000e1a0cac52fb1106","modified":1512564418480},{"_id":"source/_drafts/CF623E.md","hash":"87516a3d64c69759464cce970ac91ca1b389be56","modified":1513778577575},{"_id":"source/_drafts/FFT.md","hash":"bb0803af78318884514a38c232e95ea782692beb","modified":1514099107439},{"_id":"source/_drafts/HNOI2017_day1.md","hash":"3aa3284812bde58e165ce9e04f2566fa79e9484b","modified":1512568965527},{"_id":"source/_drafts/NOI2016-d1t2.md","hash":"995a7393b8b177dd1138fdfab8d3594eaf686f1f","modified":1512568965527},{"_id":"source/_drafts/NOI2016_d1t3.md","hash":"a60f1e93d0f738e5fda36e5d8aa9c2f1b796aa19","modified":1512568965527},{"_id":"source/_drafts/NTT.md","hash":"60bb7ea84b8786a13732b1e82b276b6edc022cdd","modified":1512568965527},{"_id":"source/_drafts/durable.md","hash":"cff4d4dfafd7cb3aa47d5f2897c779c718e073e4","modified":1512803375146},{"_id":"source/_drafts/sm_and_pl.md","hash":"7b90ec6c15dda5b7e90b074852c834952558de6a","modified":1512568965527},{"_id":"source/_drafts/网络流建模技巧总结.md","hash":"25b820ca5eff05d83e5ac6871b8fb10f6dcdd81b","modified":1512568965527},{"_id":"source/_posts/after-noip-2017.md","hash":"c8389fa8e70c51a4fc65f61465bb2f92f2c88657","modified":1512568965527},{"_id":"source/_drafts/SAM.md","hash":"3feb15e0cd24536644a6c0c209b2076a570595fe","modified":1513843891188},{"_id":"source/_posts/cf-418e.md","hash":"01c24e7296d7317bd4a4c018770d432428441b6a","modified":1514691358594},{"_id":"source/_posts/cf-553e.md","hash":"728260554f45e2645339fc9bb8fe7362bf87faea","modified":1512568965527},{"_id":"source/_posts/count-plane-tree.md","hash":"253e5427756b473b1eccb7b67239a8473a0fa38c","modified":1512568965527},{"_id":"source/_posts/ctsc2017-game.md","hash":"0591cdf9ff7845c8c5a60c0646a25c8e64f3f0fe","modified":1512568965527},{"_id":"source/_posts/noi2016-grid.md","hash":"a287e1e8ed203560045ded156e689b8679577d33","modified":1512568965527},{"_id":"source/_posts/atcoder-select.md","hash":"6974c90226cb4118cb0447837649531f90626a88","modified":1512568965527},{"_id":"source/friends/index.md","hash":"c8ac2d70eac6b2016569adb92c3d1e71ff7068ce","modified":1512568965527},{"_id":"source/_posts/zjoi2017-bit.md","hash":"3bbaa82abafd9d9659a55c0caf4f7f5f421ad62d","modified":1512568965527},{"_id":"source/img/plane-tree.png","hash":"15f8b0488ac2db4c629207673da6a561e5c7d243","modified":1512568965527},{"_id":"source/_posts/probability-problems.md","hash":"45c76738b7687e7acf2b5f928c3f0825b3870b77","modified":1512568965527},{"_id":"source/tags/index.md","hash":"f4771ae41d739770577ef424e473e57879f8c966","modified":1512568965527},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1512562679254},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1512562679254},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1512562679290},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1512562679290},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1512562679290},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1512562679246},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1512562679246},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1512562679246},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1512562679246},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1512562679246},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1512562679246},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1512562679246},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1512562679246},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1512562679246},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1512562679246},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1512562679250},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1512562679250},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1512562679250},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1512562679250},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1512562679250},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1512562679250},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1512562679250},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1512562679254},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1512562679254},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1512562679254},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1512562679254},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1512562679254},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1512562679254},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1512562679254},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1512562679246},{"_id":"source/_drafts/DYH_sieve.md","hash":"4123bf4c4ea44cdd8e1463bafa96c68945d62182","modified":1512568965527},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1512562679254},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1512562679254},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1512562679254},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1512562679254},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1512562679254},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1512562679254},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1512562679254},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1512562679254},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1512562679254},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1512562679250},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1512562679250},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1512562679250},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1512562679250},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1512562679250},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1512562679250},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1512562679250},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1512562679250},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1512562679250},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1512562679250},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1512562679250},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1512562679250},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1512562679250},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1512562679250},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1512562679250},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1512562679250},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1512562679250},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1512562679250},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512562679258},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1512562679250},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1512562679250},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1512562679250},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1512562679250},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1512562679250},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1512562679250},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1512562679250},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512562679250},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512562679250},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1512562679258},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1512562679258},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1512562679258},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1512562679258},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1512562679258},{"_id":"themes/next/source/images/ava.png","hash":"31ee55f45676b0a5f077f0160647ccb229b9bee1","modified":1512299592568},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1512562679258},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1512562679258},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1512562679258},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1512562679262},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1512562679262},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1512562679262},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1512562679262},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1512562679262},{"_id":"themes/next/source/images/favicon.ico","hash":"6262b4f24098621ca686cfd555166e6ee2d6aa6a","modified":1512560205998},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512562679262},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1512562679262},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512562679262},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1512562679262},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1512562679262},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1512562679250},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1512562679262},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1512562679250},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1512562679250},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1512562679250},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1512562679250},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1512562679250},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1512562679250},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512562679258},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512562679258},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512562679258},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1512562679250},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1512562679250},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512562679258},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1512562679250},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1512562679250},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1512562679250},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1512562679250},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1512562679250},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1512562679254},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1512562679254},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1512562679254},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1512562679254},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1512562679258},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1512562679258},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1512562679258},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1512562679258},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1512562679258},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1512562679258},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1512562679258},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1512562679258},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"6cbb5a84cf69294c8af8a23e57998dc16221047a","modified":1512564145616},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1512562679262},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1512562679262},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1512562679262},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1512562679262},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1512562679262},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1512562679262},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1512562679262},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1512562679262},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1512562679262},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1512562679262},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1512562679262},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1512562679262},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1512562679266},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1512562679266},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1512562679270},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1512562679270},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1512562679270},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1512562679270},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1512562679282},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1512562679282},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1512562679282},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1512562679282},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1512562679282},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1512562679282},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1512562679282},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1512562679282},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1512562679282},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1512562679282},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1512562679282},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1512562679282},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1512562679282},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1512562679282},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1512562679250},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1512562679254},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1512562679286},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1512562679286},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1512562679282},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1512562679290},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1512562679290},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1512562679290},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1512562679258},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1512562679258},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1512562679258},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1512562679258},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1512562679258},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1512562679258},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1512562679258},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1512562679258},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1512562679262},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1512562679262},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1512562679262},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1512562679266},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1512562679254},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1512562679270},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1512562679270},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1512562679270},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1512562679270},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1512562679270},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1512562679286},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1512562679262},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1512562679286},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1512562679262},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1512562679254},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1512562679258},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1512562679278},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1512562679282},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1512562679258},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1512562679258},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1512562679286},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1512562679258},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1512562679258},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1512562679262},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1512562679262},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1512562679262},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1512562679262},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1512562679262},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1512562679266},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1512562679266},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1512562679270},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1512562679274},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1512562679278},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1512562679270},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1512562679270},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1512562679270},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1512562679266},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1512562679286},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1512562679278},{"_id":"public/atom.xml","hash":"4cbb43d972d92494446025e3d62f9df250a2cc27","modified":1516369333917},{"_id":"public/search.xml","hash":"3ea44019a0f0e1e5776a943a36c615f6bea640cb","modified":1516369333919},{"_id":"public/sitemap.xml","hash":"eb2dbf9da1e235ad0e8e928d5f729acea8465305","modified":1516369333919},{"_id":"public/2017/noi2016-grid/index.html","hash":"70ea9f778e3ff3961a5ae1ff88073abd5f42c320","modified":1516369335514},{"_id":"public/2017/cf-553e/index.html","hash":"50fc8db3911a0dccea0ffc1f9f2493a7bc9a068d","modified":1516369335520},{"_id":"public/2017/zjoi2017-bit/index.html","hash":"8974dc57c428d2566a59ac4e46a63dc476f86aaf","modified":1516369335520},{"_id":"public/2017/cf-418e/index.html","hash":"d09b1e14b39cf0a34d127b8fe144e3821f9b5464","modified":1516369335520},{"_id":"public/2017/atcoder-select/index.html","hash":"412d11872bf832616726a58e5792b5166c6fe97e","modified":1516369335521},{"_id":"public/2017/probability-problems/index.html","hash":"e4fbe7d6a8d29591aaafebb7d146a858bc623ec4","modified":1516369335521},{"_id":"public/friends/index.html","hash":"0a231c04a5d59cee87baa19ea6931c3dcdef5616","modified":1516369335536},{"_id":"public/archives/index.html","hash":"74a0ed60b26bbbe660419e4d11389f98b2e161e7","modified":1516369335536},{"_id":"public/archives/page/2/index.html","hash":"16d3685b3fb33ea59b5476c40176dde867cac2f8","modified":1516369335536},{"_id":"public/archives/2017/index.html","hash":"00b3b93821e0fcda22121dbf1734c7163221eb0a","modified":1516369335536},{"_id":"public/archives/2017/06/index.html","hash":"ebba3aa1907cee32413cbd7f23fe87651ec01f6a","modified":1516369335536},{"_id":"public/archives/2017/05/index.html","hash":"f84c924d86f1536ca150e3cffc9e886cf3b033c1","modified":1516369335536},{"_id":"public/archives/2017/page/2/index.html","hash":"ed1f7e21427612952bc66d7988b4fbd2a31377a3","modified":1516369335536},{"_id":"public/archives/2017/07/index.html","hash":"cb4d84f7697dd3a36be294c159c60abbe1a41f05","modified":1516369335536},{"_id":"public/archives/2017/08/index.html","hash":"a9cf43cfe4026edb449406e26e8b6145f6cc3b79","modified":1516369335536},{"_id":"public/archives/2017/11/index.html","hash":"8bfd20cde2e4d57212deab8c5714d0758a9259f7","modified":1516369335536},{"_id":"public/archives/2017/12/index.html","hash":"773b686a3801257c1b23108c47914214eca48de3","modified":1516369335537},{"_id":"public/page/2/index.html","hash":"25a8c53ccf2a3bb912479b41d2eab9b7c5678b15","modified":1516369335537},{"_id":"public/tags/index.html","hash":"eb55a4ef63f7fa71b10265cb22fee8e542d033d5","modified":1516369335537},{"_id":"public/tags/Datastructure/index.html","hash":"c353e3ea7e566ac6838d075015e10b134a5f0506","modified":1516369335537},{"_id":"public/tags/Solution/index.html","hash":"4c79144f10a9591c3e3d7ec1355bb56228dec14e","modified":1516369335537},{"_id":"public/tags/Dynamic-Programming/index.html","hash":"e90d7d4ca44627f6c028ec064b4cf958c613b7a9","modified":1516369335537},{"_id":"public/tags/Graph-Theory/index.html","hash":"59bb4ba55c7a36aeef750aebf8149f9fe1779455","modified":1516369335537},{"_id":"public/tags/Summary/index.html","hash":"ae540351aeddb3d80394f89aee8edb59bcd7f26c","modified":1516369335537},{"_id":"public/tags/Counting-Problems/index.html","hash":"e7319e22239b01d03214835a39f698b679119d48","modified":1516369335537},{"_id":"public/tags/Probability/index.html","hash":"a93a0a516e7244ca44d0f87f91be776d6689482a","modified":1516369335537},{"_id":"public/tags/Burnside/index.html","hash":"6ffa7586f92ed6976f26b4dcbfe7ef36c3373b5e","modified":1516369335537},{"_id":"public/tags/Combinatorial/index.html","hash":"241e49a6e9fec7876861c2a6cd58c3c0294c5075","modified":1516369335537},{"_id":"public/2017/ctsc2017-game/index.html","hash":"bf614654cc15cedd278e3a3521f497a65f25b315","modified":1516369335537},{"_id":"public/2017/count-plane-tree/index.html","hash":"069444af4529ca09a745dd45b5b049832bbdbc0f","modified":1516369335537},{"_id":"public/2017/after-noip-2017/index.html","hash":"2328f9db0ca7adcef1c8a0fd08868384811ab360","modified":1516369335537},{"_id":"public/index.html","hash":"cc26722ec6d1b90a06ceff1fc5a6b57fbdfd00f1","modified":1516369335537},{"_id":"public/favicon.ico","hash":"6262b4f24098621ca686cfd555166e6ee2d6aa6a","modified":1516369335551},{"_id":"public/img/plane-tree.png","hash":"15f8b0488ac2db4c629207673da6a561e5c7d243","modified":1516369335551},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1516369335551},{"_id":"public/images/ava.png","hash":"31ee55f45676b0a5f077f0160647ccb229b9bee1","modified":1516369335551},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1516369335551},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1516369335551},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1516369335551},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1516369335551},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1516369335551},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1516369335551},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1516369335552},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1516369335552},{"_id":"public/images/favicon.ico","hash":"6262b4f24098621ca686cfd555166e6ee2d6aa6a","modified":1516369335552},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516369335552},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1516369335552},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516369335552},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1516369335552},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1516369335552},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516369335552},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1516369335552},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1516369335552},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516369335552},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1516369335552},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1516369335552},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1516369335552},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1516369335553},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1516369335553},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1516369335553},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1516369335553},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1516369335553},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1516369335553},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1516369335553},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1516369335553},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1516369335553},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1516369335553},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1516369335553},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1516369335553},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516369336559},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516369336566},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1516369336577},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1516369336577},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1516369336577},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1516369336577},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1516369336577},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1516369336577},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1516369336577},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1516369336577},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1516369336577},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1516369336578},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1516369336578},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1516369336578},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1516369336578},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1516369336578},{"_id":"public/lib/fastclick/README.html","hash":"d6e90449a2c09f3033f7e43d68b0cc8208e22e09","modified":1516369336578},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1516369336578},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1516369336578},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1516369336578},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1516369336578},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"06811ca2f722dead021493457f27cdc264ef928d","modified":1516369336578},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a08fccd381c8fdb70ba8974b208254c5ba23a95f","modified":1516369336578},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1516369336578},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1516369336578},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1516369336578},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1516369336578},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1516369336578},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1516369336578},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1516369336578},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1516369336578},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1516369336579},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1516369336579},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1516369336579},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1516369336579},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1516369336579},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1516369336579},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1516369336579},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1516369336579},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1516369336579},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1516369336579},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1516369336580},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1516369336580},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1516369336580},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1516369336580},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1516369336580},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1516369336581},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1516369336581},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1516369336581},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1516369336581},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1516369336581},{"_id":"public/css/main.css","hash":"c55b8aae82fdc0d14ea9b45e77bc3cc113e74aa6","modified":1516369336581},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1516369336581},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1516369336581},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1516369336581},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1516369336581},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1516369336581},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1516369336581},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1516369336581},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1516369336581},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1516369336581},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1516369336584},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1516369336584},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1516369336584},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1516369336584},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1516369336584},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1516369336584},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1516369336584},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1516369336584},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1516369336584},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1516369336585},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1516369336585},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1516369336585},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516369336585},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1516369336585},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1516369336596}],"Category":[],"Data":[],"Page":[{"title":"My Friends","date":"2017-04-23T03:09:26.000Z","_content":"\n&emsp;&emsp;[Dy's Blog](http://dy0607.github.io)\n&emsp;&emsp;[DR.Z's Blog](http://blog.leanote.com/183297119@qq.com)\n&emsp;&emsp;[Easy's Blog](http://blog.leanote.com/glasses)\n&emsp;&emsp;[MiaoMiao's Blog](http://miaomiao1220.github.io)\n&emsp;&emsp;[Sunshine's Blog](http://www.sunshine-cfbsl.com/)\n&emsp;&emsp;[Xffyjq's Blog](http://xffyjq.github.io)\n\n欢迎添加友链(QQ:1721604476)~~ \n","source":"friends/index.md","raw":"---\ntitle: My Friends\ndate: 2017-04-23 11:09:26\n---\n\n&emsp;&emsp;[Dy's Blog](http://dy0607.github.io)\n&emsp;&emsp;[DR.Z's Blog](http://blog.leanote.com/183297119@qq.com)\n&emsp;&emsp;[Easy's Blog](http://blog.leanote.com/glasses)\n&emsp;&emsp;[MiaoMiao's Blog](http://miaomiao1220.github.io)\n&emsp;&emsp;[Sunshine's Blog](http://www.sunshine-cfbsl.com/)\n&emsp;&emsp;[Xffyjq's Blog](http://xffyjq.github.io)\n\n欢迎添加友链(QQ:1721604476)~~ \n","updated":"2017-12-06T14:02:45.527Z","path":"friends/index.html","comments":1,"layout":"page","_id":"cjclz5cm9000honisl4s7ni7y","content":"<p>&emsp;&emsp;<a href=\"http://dy0607.github.io\" target=\"_blank\" rel=\"external\">Dy’s Blog</a><br>&emsp;&emsp;<a href=\"http://blog.leanote.com/183297119@qq.com\" target=\"_blank\" rel=\"external\">DR.Z’s Blog</a><br>&emsp;&emsp;<a href=\"http://blog.leanote.com/glasses\" target=\"_blank\" rel=\"external\">Easy’s Blog</a><br>&emsp;&emsp;<a href=\"http://miaomiao1220.github.io\" target=\"_blank\" rel=\"external\">MiaoMiao’s Blog</a><br>&emsp;&emsp;<a href=\"http://www.sunshine-cfbsl.com/\" target=\"_blank\" rel=\"external\">Sunshine’s Blog</a><br>&emsp;&emsp;<a href=\"http://xffyjq.github.io\" target=\"_blank\" rel=\"external\">Xffyjq’s Blog</a></p>\n<p>欢迎添加友链(QQ:1721604476)~~ </p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;<a href=\"http://dy0607.github.io\">Dy’s Blog</a><br>&emsp;&emsp;<a href=\"http://blog.leanote.com/183297119@qq.com\">DR.Z’s Blog</a><br>&emsp;&emsp;<a href=\"http://blog.leanote.com/glasses\">Easy’s Blog</a><br>&emsp;&emsp;<a href=\"http://miaomiao1220.github.io\">MiaoMiao’s Blog</a><br>&emsp;&emsp;<a href=\"http://www.sunshine-cfbsl.com/\">Sunshine’s Blog</a><br>&emsp;&emsp;<a href=\"http://xffyjq.github.io\">Xffyjq’s Blog</a></p>\n<p>欢迎添加友链(QQ:1721604476)~~ </p>\n"},{"title":"Tags","date":"2017-02-19T07:04:01.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2017-02-19 15:04:01\ntype: \"tags\"\n---\n","updated":"2017-12-06T14:02:45.527Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjclz5cmd000jonisgw1htbf5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Codeforces 623E Transforming Sequence","date":"2017-05-05T10:42:57.000Z","_content":"\n### Problem\n> Let's define a transformation to a sequence $a1$ to $an$, as $b1$ to $bn$, where $bi = a1 | a2 | ... | ai$, for all $i$ = $1$ to $n$. Now you need to count how many sequences $\\{a\\}$ have such property that the sequence $\\{b\\}$ they genarate is strictly increasing, where all $ai$ are in the range [0, $2^k - 1$]. You should just print the answer modulo $10^9 + 7$.\n'|' is the bitwise OR operation\n\n<!--more-->\n\n### Analysis\nFirstly, we can think of DP to solve it. Define the status $dp_{i, j}$ to describe the answer when we finish the first i positions and used j 1s in total.\nThen it's obviously that: $$ dp_{i, j} = \\sum_{l = 1}^{j} {2}^{j-l} dp_{i-1, j-l} \\; {k-j+l \\choose l} $$\nNow what we need is $ \\{ dp_{n, x}\\}$. We can also find a relationship that:\n$$ dp_{x+y, i} = \\sum_{j = 1}^{i} 2^{yj} dp_{x, j} \\; dp_{y, i-j} \\; \\frac{k-j \\choose i-j}{k \\choose i-j} $$\n\n$$ k!\\;(k-i)!\\;dp_{x+y, i} = \\sum_{j=1}^{i} 2^{yj} \\; (k-j)! \\; dp_{x,j} \\; (k-i+j)! \\; dp_{y, i-j} $$\n\nNow we find that has the formation of convolution, so we can use FFT and dynamics for the powers of two, overall the complexity is $O(k\\ log\\ n\\ log\\ k)$.\n\n### Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst int mod = 1e9 + 7;\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 120000 + 10;\nconst int Div_Base = 1 << 15;\nconst double PI = acos(-1.0);\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\n#define fst first\n#define snd second\n#define debug(x) cerr << #x << \":\" << (x) << endl\n#define REP(i, a, b) for(int i = (a), i##end = (b); i < i##end; ++i)\n#define DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i >= i##bgn; --i)\n\ntemplate<typename T> T read() {\n    T n = 0, f = 1;\n    char ch = getchar();\n    for( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\nLL fpm(LL x, LL exp) {\n    LL ans = 1;\n    for(; exp > 0; exp >>= 1, (x *= x) %= mod) \n        if(exp & 1) (ans *= x) %= mod;\n    return ans;\n}\n\nint base, dis;\nint rev[maxn];\nvoid init(int k) {\n    for(base = 1, dis = 0; base <= 2*k; base <<= 1) ++ dis;\n    for(int i = 0; i < base; i++) rev[i] = (rev[i>>1] >> 1) | ((i&1) << (dis-1));\n}\n\ncomplex<double> w[maxn];\nvoid DFT(complex<double> *x, int N, int t) {\n    for(int i = 0; i < N; i++) \n        if(i < rev[i]) swap(x[i], x[rev[i]]);\n\n    for(int l = 2; l <= N; l <<= 1) {\n        for(int i = 0; i < (l >> 1); i++) \n            w[i] = complex<double>(cos(i*2*PI/l), sin(t*i*2*PI/l));\n\n        for(int i = 0; i < N; i += l) \n            for(int j = 0; j < (l >> 1); ++j) {\n                complex<double> L = x[i + j];\n                complex<double> R = x[i + j + (l>>1)] * w[j];\n                x[i + j] = L + R;\n                x[i + j + (l >> 1)] = L - R;\n            }\n    }\n    if(!~t) for(int i = 0; i < base; i++) x[i] /= N;\n}\n\nLL fac[maxn], ifac[maxn];\nLL A[maxn], B[maxn], n, k;\n\ncomplex<double> P[maxn], Q[maxn], T[maxn];\ncomplex<double> X[maxn], Y[maxn], Z[maxn], W[maxn];\n\nvoid Mul(LL *a, LL *b, LL d) {\n    complex<double> nul(0, 0);\n\n    for(int i = 0; i < base; i++) \n        X[i] = Y[i] = Z[i] = W[i] = nul;\n\n    for(int i = 0; i <= k; i++) {\n        A[i] = a[i] * fpm(d, i) % mod * fac[k-i] % mod;\n        B[i] = b[i] * fac[k-i] % mod;\n    }\n\n    for(int i = 0; i < base; i++) {\n        X[i] = A[i] >> 15; Y[i] = A[i] & (Div_Base-1);\n        Z[i] = B[i] >> 15; W[i] = B[i] & (Div_Base-1);\n    }\n\n    DFT(X, base, 1); DFT(Y, base, 1);\n    DFT(Z, base, 1); DFT(W, base, 1);\n\n    for(int i = 0; i < base; i++) {\n        P[i] = X[i] * Z[i];\n        Q[i] = X[i] * W[i] + Y[i] * Z[i];\n        T[i] = Y[i] * W[i];\n    }\n\n    DFT(P, base, -1);\n    DFT(Q, base, -1);\n    DFT(T, base, -1);\n\n    for(int i = 0; i <= k; i++) {\n        LL X1 = LL(P[i].real() + 0.5) % mod;\n        LL X2 = LL(Q[i].real() + 0.5) % mod;\n        LL X3 = LL(T[i].real() + 0.5) % mod;\n\n        a[i] = ((X1 << 30) % mod + (X2 << 15) % mod + X3) % mod;\n    }\n    for(int i = 0; i <= k; i++) a[i] = a[i] * ifac[k] % mod * ifac[k-i] % mod;\n}\n\nLL f[maxn], g[maxn];\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    n = read<LL>(), k = read<LL>();\n    if(n > k) return puts(\"0\"), 0;\n\n    init(k);\n    fac[0] = ifac[0] = 1;\n    for(int i = 1; i <= k; i++) {\n        fac[i] = fac[i-1] * i % mod;\n        ifac[i] = fpm(fac[i], mod-2);\n    }\n\n    g[0] = 1;\n    for(int i = 1; i <= k; i++) {\n        f[i] = fac[k] * ifac[i] % mod * ifac[k-i] % mod;\n    }\n\n    LL p = 2;\n    for(; n > 0; n >>= 1, Mul(f, f, p), (p *= p) %= mod) \n        if(n & 1) Mul(g, f, p);\n\n    LL ans = 0;\n    for(int i = 0; i <= k; i++) (ans += g[i]) %= mod;\n    printf(\"%lld\\n\", ans);\n\n    return 0;\n}\n```\n","source":"_drafts/CF623E.md","raw":"---\ntitle: Codeforces 623E Transforming Sequence\ndate: 2017-05-05 18:42:57\ntags:\n    - Mathematics\n    - Dynamic Programming\n---\n\n### Problem\n> Let's define a transformation to a sequence $a1$ to $an$, as $b1$ to $bn$, where $bi = a1 | a2 | ... | ai$, for all $i$ = $1$ to $n$. Now you need to count how many sequences $\\{a\\}$ have such property that the sequence $\\{b\\}$ they genarate is strictly increasing, where all $ai$ are in the range [0, $2^k - 1$]. You should just print the answer modulo $10^9 + 7$.\n'|' is the bitwise OR operation\n\n<!--more-->\n\n### Analysis\nFirstly, we can think of DP to solve it. Define the status $dp_{i, j}$ to describe the answer when we finish the first i positions and used j 1s in total.\nThen it's obviously that: $$ dp_{i, j} = \\sum_{l = 1}^{j} {2}^{j-l} dp_{i-1, j-l} \\; {k-j+l \\choose l} $$\nNow what we need is $ \\{ dp_{n, x}\\}$. We can also find a relationship that:\n$$ dp_{x+y, i} = \\sum_{j = 1}^{i} 2^{yj} dp_{x, j} \\; dp_{y, i-j} \\; \\frac{k-j \\choose i-j}{k \\choose i-j} $$\n\n$$ k!\\;(k-i)!\\;dp_{x+y, i} = \\sum_{j=1}^{i} 2^{yj} \\; (k-j)! \\; dp_{x,j} \\; (k-i+j)! \\; dp_{y, i-j} $$\n\nNow we find that has the formation of convolution, so we can use FFT and dynamics for the powers of two, overall the complexity is $O(k\\ log\\ n\\ log\\ k)$.\n\n### Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst int mod = 1e9 + 7;\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 120000 + 10;\nconst int Div_Base = 1 << 15;\nconst double PI = acos(-1.0);\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\n#define fst first\n#define snd second\n#define debug(x) cerr << #x << \":\" << (x) << endl\n#define REP(i, a, b) for(int i = (a), i##end = (b); i < i##end; ++i)\n#define DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i >= i##bgn; --i)\n\ntemplate<typename T> T read() {\n    T n = 0, f = 1;\n    char ch = getchar();\n    for( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\nLL fpm(LL x, LL exp) {\n    LL ans = 1;\n    for(; exp > 0; exp >>= 1, (x *= x) %= mod) \n        if(exp & 1) (ans *= x) %= mod;\n    return ans;\n}\n\nint base, dis;\nint rev[maxn];\nvoid init(int k) {\n    for(base = 1, dis = 0; base <= 2*k; base <<= 1) ++ dis;\n    for(int i = 0; i < base; i++) rev[i] = (rev[i>>1] >> 1) | ((i&1) << (dis-1));\n}\n\ncomplex<double> w[maxn];\nvoid DFT(complex<double> *x, int N, int t) {\n    for(int i = 0; i < N; i++) \n        if(i < rev[i]) swap(x[i], x[rev[i]]);\n\n    for(int l = 2; l <= N; l <<= 1) {\n        for(int i = 0; i < (l >> 1); i++) \n            w[i] = complex<double>(cos(i*2*PI/l), sin(t*i*2*PI/l));\n\n        for(int i = 0; i < N; i += l) \n            for(int j = 0; j < (l >> 1); ++j) {\n                complex<double> L = x[i + j];\n                complex<double> R = x[i + j + (l>>1)] * w[j];\n                x[i + j] = L + R;\n                x[i + j + (l >> 1)] = L - R;\n            }\n    }\n    if(!~t) for(int i = 0; i < base; i++) x[i] /= N;\n}\n\nLL fac[maxn], ifac[maxn];\nLL A[maxn], B[maxn], n, k;\n\ncomplex<double> P[maxn], Q[maxn], T[maxn];\ncomplex<double> X[maxn], Y[maxn], Z[maxn], W[maxn];\n\nvoid Mul(LL *a, LL *b, LL d) {\n    complex<double> nul(0, 0);\n\n    for(int i = 0; i < base; i++) \n        X[i] = Y[i] = Z[i] = W[i] = nul;\n\n    for(int i = 0; i <= k; i++) {\n        A[i] = a[i] * fpm(d, i) % mod * fac[k-i] % mod;\n        B[i] = b[i] * fac[k-i] % mod;\n    }\n\n    for(int i = 0; i < base; i++) {\n        X[i] = A[i] >> 15; Y[i] = A[i] & (Div_Base-1);\n        Z[i] = B[i] >> 15; W[i] = B[i] & (Div_Base-1);\n    }\n\n    DFT(X, base, 1); DFT(Y, base, 1);\n    DFT(Z, base, 1); DFT(W, base, 1);\n\n    for(int i = 0; i < base; i++) {\n        P[i] = X[i] * Z[i];\n        Q[i] = X[i] * W[i] + Y[i] * Z[i];\n        T[i] = Y[i] * W[i];\n    }\n\n    DFT(P, base, -1);\n    DFT(Q, base, -1);\n    DFT(T, base, -1);\n\n    for(int i = 0; i <= k; i++) {\n        LL X1 = LL(P[i].real() + 0.5) % mod;\n        LL X2 = LL(Q[i].real() + 0.5) % mod;\n        LL X3 = LL(T[i].real() + 0.5) % mod;\n\n        a[i] = ((X1 << 30) % mod + (X2 << 15) % mod + X3) % mod;\n    }\n    for(int i = 0; i <= k; i++) a[i] = a[i] * ifac[k] % mod * ifac[k-i] % mod;\n}\n\nLL f[maxn], g[maxn];\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    n = read<LL>(), k = read<LL>();\n    if(n > k) return puts(\"0\"), 0;\n\n    init(k);\n    fac[0] = ifac[0] = 1;\n    for(int i = 1; i <= k; i++) {\n        fac[i] = fac[i-1] * i % mod;\n        ifac[i] = fpm(fac[i], mod-2);\n    }\n\n    g[0] = 1;\n    for(int i = 1; i <= k; i++) {\n        f[i] = fac[k] * ifac[i] % mod * ifac[k-i] % mod;\n    }\n\n    LL p = 2;\n    for(; n > 0; n >>= 1, Mul(f, f, p), (p *= p) %= mod) \n        if(n & 1) Mul(g, f, p);\n\n    LL ans = 0;\n    for(int i = 0; i <= k; i++) (ans += g[i]) %= mod;\n    printf(\"%lld\\n\", ans);\n\n    return 0;\n}\n```\n","slug":"CF623E","published":0,"updated":"2017-12-20T14:02:57.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cke0000onisnzcmapww","content":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h3><blockquote>\n<p>Let’s define a transformation to a sequence $a1$ to $an$, as $b1$ to $bn$, where $bi = a1 | a2 | … | ai$, for all $i$ = $1$ to $n$. Now you need to count how many sequences $\\{a\\}$ have such property that the sequence $\\{b\\}$ they genarate is strictly increasing, where all $ai$ are in the range [0, $2^k - 1$]. You should just print the answer modulo $10^9 + 7$.<br>‘|’ is the bitwise OR operation</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h3><p>Firstly, we can think of DP to solve it. Define the status $dp_{i, j}$ to describe the answer when we finish the first i positions and used j 1s in total.<br>Then it’s obviously that: <script type=\"math/tex\">dp_{i, j} = \\sum_{l = 1}^{j} {2}^{j-l} dp_{i-1, j-l} \\; {k-j+l \\choose l}</script><br>Now what we need is $ \\{ dp_{n, x}\\}$. We can also find a relationship that:</p>\n<script type=\"math/tex; mode=display\">dp_{x+y, i} = \\sum_{j = 1}^{i} 2^{yj} dp_{x, j} \\; dp_{y, i-j} \\; \\frac{k-j \\choose i-j}{k \\choose i-j}</script><script type=\"math/tex; mode=display\">k!\\;(k-i)!\\;dp_{x+y, i} = \\sum_{j=1}^{i} 2^{yj} \\; (k-j)! \\; dp_{x,j} \\; (k-i+j)! \\; dp_{y, i-j}</script><p>Now we find that has the formation of convolution, so we can use FFT and dynamics for the powers of two, overall the complexity is $O(k\\ log\\ n\\ log\\ k)$.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">120000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Div_Base = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">15</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">\":\"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    T n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">fpm</span><span class=\"params\">(LL x, LL <span class=\"built_in\">exp</span>)</span> </span>&#123;</div><div class=\"line\">    LL ans = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">exp</span> &gt; <span class=\"number\">0</span>; <span class=\"built_in\">exp</span> &gt;&gt;= <span class=\"number\">1</span>, (x *= x) %= mod) </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &amp; <span class=\"number\">1</span>) (ans *= x) %= mod;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> base, dis;</div><div class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(base = <span class=\"number\">1</span>, dis = <span class=\"number\">0</span>; base &lt;= <span class=\"number\">2</span>*k; base &lt;&lt;= <span class=\"number\">1</span>) ++ dis;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (dis<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; w[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; *x, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= N; l &lt;&lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (l &gt;&gt; <span class=\"number\">1</span>); i++) </div><div class=\"line\">            w[i] = <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt;(<span class=\"built_in\">cos</span>(i*<span class=\"number\">2</span>*PI/l), <span class=\"built_in\">sin</span>(t*i*<span class=\"number\">2</span>*PI/l));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i += l) </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (l &gt;&gt; <span class=\"number\">1</span>); ++j) &#123;</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; L = x[i + j];</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; R = x[i + j + (l&gt;&gt;<span class=\"number\">1</span>)] * w[j];</div><div class=\"line\">                x[i + j] = L + R;</div><div class=\"line\">                x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] = L - R;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!~t) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) x[i] /= N;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LL fac[maxn], ifac[maxn];</div><div class=\"line\">LL A[maxn], B[maxn], n, k;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; P[maxn], Q[maxn], T[maxn];</div><div class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; X[maxn], Y[maxn], Z[maxn], W[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Mul</span><span class=\"params\">(LL *a, LL *b, LL d)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; nul(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) </div><div class=\"line\">        X[i] = Y[i] = Z[i] = W[i] = nul;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">        A[i] = a[i] * fpm(d, i) % mod * fac[k-i] % mod;</div><div class=\"line\">        B[i] = b[i] * fac[k-i] % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) &#123;</div><div class=\"line\">        X[i] = A[i] &gt;&gt; <span class=\"number\">15</span>; Y[i] = A[i] &amp; (Div_Base<span class=\"number\">-1</span>);</div><div class=\"line\">        Z[i] = B[i] &gt;&gt; <span class=\"number\">15</span>; W[i] = B[i] &amp; (Div_Base<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    DFT(X, base, <span class=\"number\">1</span>); DFT(Y, base, <span class=\"number\">1</span>);</div><div class=\"line\">    DFT(Z, base, <span class=\"number\">1</span>); DFT(W, base, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) &#123;</div><div class=\"line\">        P[i] = X[i] * Z[i];</div><div class=\"line\">        Q[i] = X[i] * W[i] + Y[i] * Z[i];</div><div class=\"line\">        T[i] = Y[i] * W[i];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    DFT(P, base, <span class=\"number\">-1</span>);</div><div class=\"line\">    DFT(Q, base, <span class=\"number\">-1</span>);</div><div class=\"line\">    DFT(T, base, <span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">        LL X1 = LL(P[i].real() + <span class=\"number\">0.5</span>) % mod;</div><div class=\"line\">        LL X2 = LL(Q[i].real() + <span class=\"number\">0.5</span>) % mod;</div><div class=\"line\">        LL X3 = LL(T[i].real() + <span class=\"number\">0.5</span>) % mod;</div><div class=\"line\"></div><div class=\"line\">        a[i] = ((X1 &lt;&lt; <span class=\"number\">30</span>) % mod + (X2 &lt;&lt; <span class=\"number\">15</span>) % mod + X3) % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) a[i] = a[i] * ifac[k] % mod * ifac[k-i] % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LL f[maxn], g[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    n = read&lt;LL&gt;(), k = read&lt;LL&gt;();</div><div class=\"line\">    <span class=\"keyword\">if</span>(n &gt; k) <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>), <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    init(k);</div><div class=\"line\">    fac[<span class=\"number\">0</span>] = ifac[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">        fac[i] = fac[i<span class=\"number\">-1</span>] * i % mod;</div><div class=\"line\">        ifac[i] = fpm(fac[i], mod<span class=\"number\">-2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    g[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">        f[i] = fac[k] * ifac[i] % mod * ifac[k-i] % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    LL p = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; n &gt; <span class=\"number\">0</span>; n &gt;&gt;= <span class=\"number\">1</span>, Mul(f, f, p), (p *= p) %= mod) </div><div class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) Mul(g, f, p);</div><div class=\"line\"></div><div class=\"line\">    LL ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) (ans += g[i]) %= mod;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h3><blockquote>\n<p>Let’s define a transformation to a sequence $a1$ to $an$, as $b1$ to $bn$, where $bi = a1 | a2 | … | ai$, for all $i$ = $1$ to $n$. Now you need to count how many sequences $\\{a\\}$ have such property that the sequence $\\{b\\}$ they genarate is strictly increasing, where all $ai$ are in the range [0, $2^k - 1$]. You should just print the answer modulo $10^9 + 7$.<br>‘|’ is the bitwise OR operation</p>\n</blockquote>","more":"<h3 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h3><p>Firstly, we can think of DP to solve it. Define the status $dp_{i, j}$ to describe the answer when we finish the first i positions and used j 1s in total.<br>Then it’s obviously that: <script type=\"math/tex\">dp_{i, j} = \\sum_{l = 1}^{j} {2}^{j-l} dp_{i-1, j-l} \\; {k-j+l \\choose l}</script><br>Now what we need is $ \\{ dp_{n, x}\\}$. We can also find a relationship that:</p>\n<script type=\"math/tex; mode=display\">dp_{x+y, i} = \\sum_{j = 1}^{i} 2^{yj} dp_{x, j} \\; dp_{y, i-j} \\; \\frac{k-j \\choose i-j}{k \\choose i-j}</script><script type=\"math/tex; mode=display\">k!\\;(k-i)!\\;dp_{x+y, i} = \\sum_{j=1}^{i} 2^{yj} \\; (k-j)! \\; dp_{x,j} \\; (k-i+j)! \\; dp_{y, i-j}</script><p>Now we find that has the formation of convolution, so we can use FFT and dynamics for the powers of two, overall the complexity is $O(k\\ log\\ n\\ log\\ k)$.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">120000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Div_Base = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">15</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">\":\"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    T n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">fpm</span><span class=\"params\">(LL x, LL <span class=\"built_in\">exp</span>)</span> </span>&#123;</div><div class=\"line\">    LL ans = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">exp</span> &gt; <span class=\"number\">0</span>; <span class=\"built_in\">exp</span> &gt;&gt;= <span class=\"number\">1</span>, (x *= x) %= mod) </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &amp; <span class=\"number\">1</span>) (ans *= x) %= mod;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> base, dis;</div><div class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(base = <span class=\"number\">1</span>, dis = <span class=\"number\">0</span>; base &lt;= <span class=\"number\">2</span>*k; base &lt;&lt;= <span class=\"number\">1</span>) ++ dis;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (dis<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; w[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; *x, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= N; l &lt;&lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (l &gt;&gt; <span class=\"number\">1</span>); i++) </div><div class=\"line\">            w[i] = <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt;(<span class=\"built_in\">cos</span>(i*<span class=\"number\">2</span>*PI/l), <span class=\"built_in\">sin</span>(t*i*<span class=\"number\">2</span>*PI/l));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i += l) </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (l &gt;&gt; <span class=\"number\">1</span>); ++j) &#123;</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; L = x[i + j];</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; R = x[i + j + (l&gt;&gt;<span class=\"number\">1</span>)] * w[j];</div><div class=\"line\">                x[i + j] = L + R;</div><div class=\"line\">                x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] = L - R;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!~t) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) x[i] /= N;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LL fac[maxn], ifac[maxn];</div><div class=\"line\">LL A[maxn], B[maxn], n, k;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; P[maxn], Q[maxn], T[maxn];</div><div class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; X[maxn], Y[maxn], Z[maxn], W[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Mul</span><span class=\"params\">(LL *a, LL *b, LL d)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; nul(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) </div><div class=\"line\">        X[i] = Y[i] = Z[i] = W[i] = nul;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">        A[i] = a[i] * fpm(d, i) % mod * fac[k-i] % mod;</div><div class=\"line\">        B[i] = b[i] * fac[k-i] % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) &#123;</div><div class=\"line\">        X[i] = A[i] &gt;&gt; <span class=\"number\">15</span>; Y[i] = A[i] &amp; (Div_Base<span class=\"number\">-1</span>);</div><div class=\"line\">        Z[i] = B[i] &gt;&gt; <span class=\"number\">15</span>; W[i] = B[i] &amp; (Div_Base<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    DFT(X, base, <span class=\"number\">1</span>); DFT(Y, base, <span class=\"number\">1</span>);</div><div class=\"line\">    DFT(Z, base, <span class=\"number\">1</span>); DFT(W, base, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) &#123;</div><div class=\"line\">        P[i] = X[i] * Z[i];</div><div class=\"line\">        Q[i] = X[i] * W[i] + Y[i] * Z[i];</div><div class=\"line\">        T[i] = Y[i] * W[i];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    DFT(P, base, <span class=\"number\">-1</span>);</div><div class=\"line\">    DFT(Q, base, <span class=\"number\">-1</span>);</div><div class=\"line\">    DFT(T, base, <span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">        LL X1 = LL(P[i].real() + <span class=\"number\">0.5</span>) % mod;</div><div class=\"line\">        LL X2 = LL(Q[i].real() + <span class=\"number\">0.5</span>) % mod;</div><div class=\"line\">        LL X3 = LL(T[i].real() + <span class=\"number\">0.5</span>) % mod;</div><div class=\"line\"></div><div class=\"line\">        a[i] = ((X1 &lt;&lt; <span class=\"number\">30</span>) % mod + (X2 &lt;&lt; <span class=\"number\">15</span>) % mod + X3) % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) a[i] = a[i] * ifac[k] % mod * ifac[k-i] % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LL f[maxn], g[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    n = read&lt;LL&gt;(), k = read&lt;LL&gt;();</div><div class=\"line\">    <span class=\"keyword\">if</span>(n &gt; k) <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>), <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    init(k);</div><div class=\"line\">    fac[<span class=\"number\">0</span>] = ifac[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">        fac[i] = fac[i<span class=\"number\">-1</span>] * i % mod;</div><div class=\"line\">        ifac[i] = fpm(fac[i], mod<span class=\"number\">-2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    g[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">        f[i] = fac[k] * ifac[i] % mod * ifac[k-i] % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    LL p = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; n &gt; <span class=\"number\">0</span>; n &gt;&gt;= <span class=\"number\">1</span>, Mul(f, f, p), (p *= p) %= mod) </div><div class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) Mul(g, f, p);</div><div class=\"line\"></div><div class=\"line\">    LL ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++) (ans += g[i]) %= mod;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Fast Fourier Transformation","date":"2017-02-16T16:00:00.000Z","_content":"\n### Preface\n\n在计算生成函数等多项式的乘积或者进行大整数乘法时，计算答案的过程常常成为算法时间的瓶颈，然而接下来介绍的快速傅里叶变换(Fast Fourier Transformation, FFT)可以在$O(nlogn)$的时间内处理出问题的答案。\n\n### Preparatory knowledge\n\n1. 多项式的两种表示:系数表示法和点值表示法，这个不多说…\n\n2. 一些简单的复数姿势:\n\n主要是单位复数根，定义复平面上满足$w^n = 1$的复数$w$为n次单位复数根，\n根据复数乘法模长相乘，幅角相加的特点，不难发现一些性质：\n\na) n次单位复数根在复平面上是对称分布的，且在单位圆上构成一个正n边形。\n\nb) 次单位复数根构成一个乘法群，且生成元的个数为$\\phi(n)$。\n\nc) 这样复平面上的单位复数根也可以用更一般的形式来表示了:\n\n$$ w_n^k = e^{\\frac{2ki\\pi}{n}}， k = 0, 1, 2 … n-1$$\n\n欧拉公式 $e^{ki} = sin(k) + icos(k)$, 利用这个可以证明许多结论。\n\n<!--more-->\n\n### Algorithm\n\n将待乘的两个多项式用$O(nlogn)$时间转成点值形式，将点值相乘得到新多项式的点值，然后$O(nlogn)$时间转换成系数表示即可。\n\n考虑如何快速将系数表示转化成点值表示及其逆过程,这时候刚才提到的复数知识就变得很有用了。\n\n因为\n    $$ w_n^{2k} = e^{\\frac{2ki\\pi}{n}} = e^{\\frac{ki\\pi}{\\frac{n}{2}}} = w_{\\frac{n}{2}} ^ k $$\n    $$ w_n^{k + \\frac{n}{2}} = w_n^k w_n^{\\frac{n}{2}} = -w_n^k $$\n\n所以对于$(k < \\frac{n}{2})$:\n\n$$\n\\begin{aligned}\nA(w_n^k) & = \\sum_{i=0}^{n-1} a_i w_n^{ki} \\\\\n         & = \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_n^{2ki} +            w_n^k \\sum_{i=0} ^{\\frac{n}{2}-1} a_{2i+1} w_n^{2ki} \\\\\n         & = \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} + w_n^k \\sum_{i=0} ^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki}\n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\nA(w_n^{k+\\frac{n}{2}}) &= \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} + w_n^{k+\\frac{n}{2}} \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki} \\\\\n                       &= \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} - w_n^k               \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki}\n\\end{aligned}\n$$\n\n这样原问题就成功地被划分为两个规模减半的子问题，即对于两部分分别做奇偶系数的n/2次单位根求点值，于是可以递归求解。\n\n接下来考虑如何求解逆过程，如果我们把之前求出的点值表示当成一个线性方程组的形式，考虑如下矩阵：\n\n$$\n\\begin{bmatrix}\n    (w_n^{-0})^0 & (w_n^{-0})^1 & \\cdots & (w_n^{-0})^{n-1} \\\\\n    (w_n^{-1})^0 & (w_n^{-1})^1 & \\cdots & (w_n^{-1})^{n-1} \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    (w_n^{-(n-1)})^0 & (w_n^{-(n-1)})^1 & \\cdots & (w_n^{-(n-1)})^{n-1} \\\\\n\\end{bmatrix}\n$$\n\n发现这个矩阵与原矩阵的乘积恰好为$nI$, 所以这个矩阵乘以$\\frac{1}{n}$的矩阵与原矩阵互逆\n\n所以求逆的过程可以把所有单位复数根的指数取反，执行相同的操作然后将所得到的值除以n即可。\n\n### Code\n\n``` cpp\nvoid FFT(complex<double> x[], int n, int type) {\n\tif(n == 1) return;\n\tcomplex<double> l[n >> 1], r[n >> 1];\n\tfor(int i = 0; i < n; i += 2) {\n\t\tl[i >> 1] = x[i];\n\t\tr[i >> 1] = x[i + 1];\n\t}\n\tFFT(l, n >> 1, type);\n\tFFT(r, n >> 1, type);\n\tcomplex<double> wn(cos(type*2*PI/n), sin(type*2*PI/n)), w(1, 0);\n\tfor(int i = 0; i < (n >> 1); w *= wn, i++) {\n\t\tx[i] = l[i] + w * r[i];\n \t\tx[i + (n >> 1)] = l[i] - w * r[i];\n\t}\n}\n```\n\n由于函数传参数组，常数很大，下面介绍一种迭代实现的版本，常数更小。\n\n### Some details\n\n通过观察我们发现对于一个系数$a_i$，它最后一层到达的位置和i的二进制为有关，我们从上往下观察，对于i，如果在第一层它被选到左边，则说明它二进制的最末位是0，否则是1。然后考虑第二层，与第一层类似，考虑i的二进制倒数第二位即可。\n\n不难发现假定i最终到达的位置为Rev[i]，则i与Rev[i]的二进制是互逆的。\n\n``` cpp\nvoid init() {\n    int dis = 0;\n    for(base = 1; base <= n + m; base <<= 1) ++dis;\n    for(int i=0; i<=base; i++) \n        rev[i] = (rev[i>>1] >> 1) | ((i & 1) << (dis - 1));\n}\n```\n\n那么这样有什么好处呢？\n\n于是我们可以直接算出最后一层每一个系数所在的位置，然后往回迭代计算，之后的计算过程与递归版本类似，将系数序列分段计算即可。\n\n``` cpp\nvoid FFT(complex<double> x[], int n, int type) {\n    for(int i=0; i<n; ++i) \n        if(i < rev[i]) swap(x[i], x[rev[i]]);\n    for(int s=1; 1 << s <= n; ++s) {\n        int m = 1 << s;\n        complex<double> wm(cos(type*2*PI/m), sin(type*2*PI/m));\n        for(int k=0; k < n; k += m) {\n            complex<double> w(1, 0);\n            for(int j=0; j < m >> 1; ++j) {\n                complex<double> u = x[k + j];\n                complex<double> t = x[k + j + m / 2] * w;\n                x[k + j] = u + t;\n                x[k + j + m / 2] = u - t;\n                w *= wm;\n            }\n        }\n    }\n}\n```\n","source":"_drafts/FFT.md","raw":"---\ntitle: Fast Fourier Transformation\ndate: 2017-02-17\ntag: \n    - Mathematics\n---\n\n### Preface\n\n在计算生成函数等多项式的乘积或者进行大整数乘法时，计算答案的过程常常成为算法时间的瓶颈，然而接下来介绍的快速傅里叶变换(Fast Fourier Transformation, FFT)可以在$O(nlogn)$的时间内处理出问题的答案。\n\n### Preparatory knowledge\n\n1. 多项式的两种表示:系数表示法和点值表示法，这个不多说…\n\n2. 一些简单的复数姿势:\n\n主要是单位复数根，定义复平面上满足$w^n = 1$的复数$w$为n次单位复数根，\n根据复数乘法模长相乘，幅角相加的特点，不难发现一些性质：\n\na) n次单位复数根在复平面上是对称分布的，且在单位圆上构成一个正n边形。\n\nb) 次单位复数根构成一个乘法群，且生成元的个数为$\\phi(n)$。\n\nc) 这样复平面上的单位复数根也可以用更一般的形式来表示了:\n\n$$ w_n^k = e^{\\frac{2ki\\pi}{n}}， k = 0, 1, 2 … n-1$$\n\n欧拉公式 $e^{ki} = sin(k) + icos(k)$, 利用这个可以证明许多结论。\n\n<!--more-->\n\n### Algorithm\n\n将待乘的两个多项式用$O(nlogn)$时间转成点值形式，将点值相乘得到新多项式的点值，然后$O(nlogn)$时间转换成系数表示即可。\n\n考虑如何快速将系数表示转化成点值表示及其逆过程,这时候刚才提到的复数知识就变得很有用了。\n\n因为\n    $$ w_n^{2k} = e^{\\frac{2ki\\pi}{n}} = e^{\\frac{ki\\pi}{\\frac{n}{2}}} = w_{\\frac{n}{2}} ^ k $$\n    $$ w_n^{k + \\frac{n}{2}} = w_n^k w_n^{\\frac{n}{2}} = -w_n^k $$\n\n所以对于$(k < \\frac{n}{2})$:\n\n$$\n\\begin{aligned}\nA(w_n^k) & = \\sum_{i=0}^{n-1} a_i w_n^{ki} \\\\\n         & = \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_n^{2ki} +            w_n^k \\sum_{i=0} ^{\\frac{n}{2}-1} a_{2i+1} w_n^{2ki} \\\\\n         & = \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} + w_n^k \\sum_{i=0} ^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki}\n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\nA(w_n^{k+\\frac{n}{2}}) &= \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} + w_n^{k+\\frac{n}{2}} \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki} \\\\\n                       &= \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} - w_n^k               \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki}\n\\end{aligned}\n$$\n\n这样原问题就成功地被划分为两个规模减半的子问题，即对于两部分分别做奇偶系数的n/2次单位根求点值，于是可以递归求解。\n\n接下来考虑如何求解逆过程，如果我们把之前求出的点值表示当成一个线性方程组的形式，考虑如下矩阵：\n\n$$\n\\begin{bmatrix}\n    (w_n^{-0})^0 & (w_n^{-0})^1 & \\cdots & (w_n^{-0})^{n-1} \\\\\n    (w_n^{-1})^0 & (w_n^{-1})^1 & \\cdots & (w_n^{-1})^{n-1} \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    (w_n^{-(n-1)})^0 & (w_n^{-(n-1)})^1 & \\cdots & (w_n^{-(n-1)})^{n-1} \\\\\n\\end{bmatrix}\n$$\n\n发现这个矩阵与原矩阵的乘积恰好为$nI$, 所以这个矩阵乘以$\\frac{1}{n}$的矩阵与原矩阵互逆\n\n所以求逆的过程可以把所有单位复数根的指数取反，执行相同的操作然后将所得到的值除以n即可。\n\n### Code\n\n``` cpp\nvoid FFT(complex<double> x[], int n, int type) {\n\tif(n == 1) return;\n\tcomplex<double> l[n >> 1], r[n >> 1];\n\tfor(int i = 0; i < n; i += 2) {\n\t\tl[i >> 1] = x[i];\n\t\tr[i >> 1] = x[i + 1];\n\t}\n\tFFT(l, n >> 1, type);\n\tFFT(r, n >> 1, type);\n\tcomplex<double> wn(cos(type*2*PI/n), sin(type*2*PI/n)), w(1, 0);\n\tfor(int i = 0; i < (n >> 1); w *= wn, i++) {\n\t\tx[i] = l[i] + w * r[i];\n \t\tx[i + (n >> 1)] = l[i] - w * r[i];\n\t}\n}\n```\n\n由于函数传参数组，常数很大，下面介绍一种迭代实现的版本，常数更小。\n\n### Some details\n\n通过观察我们发现对于一个系数$a_i$，它最后一层到达的位置和i的二进制为有关，我们从上往下观察，对于i，如果在第一层它被选到左边，则说明它二进制的最末位是0，否则是1。然后考虑第二层，与第一层类似，考虑i的二进制倒数第二位即可。\n\n不难发现假定i最终到达的位置为Rev[i]，则i与Rev[i]的二进制是互逆的。\n\n``` cpp\nvoid init() {\n    int dis = 0;\n    for(base = 1; base <= n + m; base <<= 1) ++dis;\n    for(int i=0; i<=base; i++) \n        rev[i] = (rev[i>>1] >> 1) | ((i & 1) << (dis - 1));\n}\n```\n\n那么这样有什么好处呢？\n\n于是我们可以直接算出最后一层每一个系数所在的位置，然后往回迭代计算，之后的计算过程与递归版本类似，将系数序列分段计算即可。\n\n``` cpp\nvoid FFT(complex<double> x[], int n, int type) {\n    for(int i=0; i<n; ++i) \n        if(i < rev[i]) swap(x[i], x[rev[i]]);\n    for(int s=1; 1 << s <= n; ++s) {\n        int m = 1 << s;\n        complex<double> wm(cos(type*2*PI/m), sin(type*2*PI/m));\n        for(int k=0; k < n; k += m) {\n            complex<double> w(1, 0);\n            for(int j=0; j < m >> 1; ++j) {\n                complex<double> u = x[k + j];\n                complex<double> t = x[k + j + m / 2] * w;\n                x[k + j] = u + t;\n                x[k + j + m / 2] = u - t;\n                w *= wm;\n            }\n        }\n    }\n}\n```\n","slug":"FFT","published":0,"updated":"2017-12-24T07:05:07.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5ckn0001oniscssessph","content":"<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>在计算生成函数等多项式的乘积或者进行大整数乘法时，计算答案的过程常常成为算法时间的瓶颈，然而接下来介绍的快速傅里叶变换(Fast Fourier Transformation, FFT)可以在$O(nlogn)$的时间内处理出问题的答案。</p>\n<h3 id=\"Preparatory-knowledge\"><a href=\"#Preparatory-knowledge\" class=\"headerlink\" title=\"Preparatory knowledge\"></a>Preparatory knowledge</h3><ol>\n<li><p>多项式的两种表示:系数表示法和点值表示法，这个不多说…</p>\n</li>\n<li><p>一些简单的复数姿势:</p>\n</li>\n</ol>\n<p>主要是单位复数根，定义复平面上满足$w^n = 1$的复数$w$为n次单位复数根，<br>根据复数乘法模长相乘，幅角相加的特点，不难发现一些性质：</p>\n<p>a) n次单位复数根在复平面上是对称分布的，且在单位圆上构成一个正n边形。</p>\n<p>b) 次单位复数根构成一个乘法群，且生成元的个数为$\\phi(n)$。</p>\n<p>c) 这样复平面上的单位复数根也可以用更一般的形式来表示了:</p>\n<script type=\"math/tex; mode=display\">w_n^k = e^{\\frac{2ki\\pi}{n}}， k = 0, 1, 2 … n-1</script><p>欧拉公式 $e^{ki} = sin(k) + icos(k)$, 利用这个可以证明许多结论。</p>\n<a id=\"more\"></a>\n<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>将待乘的两个多项式用$O(nlogn)$时间转成点值形式，将点值相乘得到新多项式的点值，然后$O(nlogn)$时间转换成系数表示即可。</p>\n<p>考虑如何快速将系数表示转化成点值表示及其逆过程,这时候刚才提到的复数知识就变得很有用了。</p>\n<p>因为</p>\n<pre><code>$$ w_n^{2k} = e^{\\frac{2ki\\pi}{n}} = e^{\\frac{ki\\pi}{\\frac{n}{2}}} = w_{\\frac{n}{2}} ^ k $$\n$$ w_n^{k + \\frac{n}{2}} = w_n^k w_n^{\\frac{n}{2}} = -w_n^k $$\n</code></pre><p>所以对于$(k &lt; \\frac{n}{2})$:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nA(w_n^k) & = \\sum_{i=0}^{n-1} a_i w_n^{ki} \\\\\n         & = \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_n^{2ki} +            w_n^k \\sum_{i=0} ^{\\frac{n}{2}-1} a_{2i+1} w_n^{2ki} \\\\\n         & = \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} + w_n^k \\sum_{i=0} ^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nA(w_n^{k+\\frac{n}{2}}) &= \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} + w_n^{k+\\frac{n}{2}} \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki} \\\\\n                       &= \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} - w_n^k               \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki}\n\\end{aligned}</script><p>这样原问题就成功地被划分为两个规模减半的子问题，即对于两部分分别做奇偶系数的n/2次单位根求点值，于是可以递归求解。</p>\n<p>接下来考虑如何求解逆过程，如果我们把之前求出的点值表示当成一个线性方程组的形式，考虑如下矩阵：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{bmatrix}\n    (w_n^{-0})^0 & (w_n^{-0})^1 & \\cdots & (w_n^{-0})^{n-1} \\\\\n    (w_n^{-1})^0 & (w_n^{-1})^1 & \\cdots & (w_n^{-1})^{n-1} \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    (w_n^{-(n-1)})^0 & (w_n^{-(n-1)})^1 & \\cdots & (w_n^{-(n-1)})^{n-1} \\\\\n\\end{bmatrix}</script><p>发现这个矩阵与原矩阵的乘积恰好为$nI$, 所以这个矩阵乘以$\\frac{1}{n}$的矩阵与原矩阵互逆</p>\n<p>所以求逆的过程可以把所有单位复数根的指数取反，执行相同的操作然后将所得到的值除以n即可。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; x[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; l[n &gt;&gt; <span class=\"number\">1</span>], r[n &gt;&gt; <span class=\"number\">1</span>];</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i += <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\tl[i &gt;&gt; <span class=\"number\">1</span>] = x[i];</div><div class=\"line\">\t\tr[i &gt;&gt; <span class=\"number\">1</span>] = x[i + <span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tFFT(l, n &gt;&gt; <span class=\"number\">1</span>, type);</div><div class=\"line\">\tFFT(r, n &gt;&gt; <span class=\"number\">1</span>, type);</div><div class=\"line\">\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; wn(<span class=\"built_in\">cos</span>(type*<span class=\"number\">2</span>*PI/n), <span class=\"built_in\">sin</span>(type*<span class=\"number\">2</span>*PI/n)), w(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (n &gt;&gt; <span class=\"number\">1</span>); w *= wn, i++) &#123;</div><div class=\"line\">\t\tx[i] = l[i] + w * r[i];</div><div class=\"line\"> \t\tx[i + (n &gt;&gt; <span class=\"number\">1</span>)] = l[i] - w * r[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于函数传参数组，常数很大，下面介绍一种迭代实现的版本，常数更小。</p>\n<h3 id=\"Some-details\"><a href=\"#Some-details\" class=\"headerlink\" title=\"Some details\"></a>Some details</h3><p>通过观察我们发现对于一个系数$a_i$，它最后一层到达的位置和i的二进制为有关，我们从上往下观察，对于i，如果在第一层它被选到左边，则说明它二进制的最末位是0，否则是1。然后考虑第二层，与第一层类似，考虑i的二进制倒数第二位即可。</p>\n<p>不难发现假定i最终到达的位置为Rev[i]，则i与Rev[i]的二进制是互逆的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> dis = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(base = <span class=\"number\">1</span>; base &lt;= n + m; base &lt;&lt;= <span class=\"number\">1</span>) ++dis;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;=base; i++) </div><div class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i &amp; <span class=\"number\">1</span>) &lt;&lt; (dis - <span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么这样有什么好处呢？</p>\n<p>于是我们可以直接算出最后一层每一个系数所在的位置，然后往回迭代计算，之后的计算过程与递归版本类似，将系数序列分段计算即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; x[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; ++i) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> s=<span class=\"number\">1</span>; <span class=\"number\">1</span> &lt;&lt; s &lt;= n; ++s) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = <span class=\"number\">1</span> &lt;&lt; s;</div><div class=\"line\">        <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; wm(<span class=\"built_in\">cos</span>(type*<span class=\"number\">2</span>*PI/m), <span class=\"built_in\">sin</span>(type*<span class=\"number\">2</span>*PI/m));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>; k &lt; n; k += m) &#123;</div><div class=\"line\">            <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; w(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j &lt; m &gt;&gt; <span class=\"number\">1</span>; ++j) &#123;</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; u = x[k + j];</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; t = x[k + j + m / <span class=\"number\">2</span>] * w;</div><div class=\"line\">                x[k + j] = u + t;</div><div class=\"line\">                x[k + j + m / <span class=\"number\">2</span>] = u - t;</div><div class=\"line\">                w *= wm;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>在计算生成函数等多项式的乘积或者进行大整数乘法时，计算答案的过程常常成为算法时间的瓶颈，然而接下来介绍的快速傅里叶变换(Fast Fourier Transformation, FFT)可以在$O(nlogn)$的时间内处理出问题的答案。</p>\n<h3 id=\"Preparatory-knowledge\"><a href=\"#Preparatory-knowledge\" class=\"headerlink\" title=\"Preparatory knowledge\"></a>Preparatory knowledge</h3><ol>\n<li><p>多项式的两种表示:系数表示法和点值表示法，这个不多说…</p>\n</li>\n<li><p>一些简单的复数姿势:</p>\n</li>\n</ol>\n<p>主要是单位复数根，定义复平面上满足$w^n = 1$的复数$w$为n次单位复数根，<br>根据复数乘法模长相乘，幅角相加的特点，不难发现一些性质：</p>\n<p>a) n次单位复数根在复平面上是对称分布的，且在单位圆上构成一个正n边形。</p>\n<p>b) 次单位复数根构成一个乘法群，且生成元的个数为$\\phi(n)$。</p>\n<p>c) 这样复平面上的单位复数根也可以用更一般的形式来表示了:</p>\n<script type=\"math/tex; mode=display\">w_n^k = e^{\\frac{2ki\\pi}{n}}， k = 0, 1, 2 … n-1</script><p>欧拉公式 $e^{ki} = sin(k) + icos(k)$, 利用这个可以证明许多结论。</p>","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>将待乘的两个多项式用$O(nlogn)$时间转成点值形式，将点值相乘得到新多项式的点值，然后$O(nlogn)$时间转换成系数表示即可。</p>\n<p>考虑如何快速将系数表示转化成点值表示及其逆过程,这时候刚才提到的复数知识就变得很有用了。</p>\n<p>因为</p>\n<pre><code>$$ w_n^{2k} = e^{\\frac{2ki\\pi}{n}} = e^{\\frac{ki\\pi}{\\frac{n}{2}}} = w_{\\frac{n}{2}} ^ k $$\n$$ w_n^{k + \\frac{n}{2}} = w_n^k w_n^{\\frac{n}{2}} = -w_n^k $$\n</code></pre><p>所以对于$(k &lt; \\frac{n}{2})$:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nA(w_n^k) & = \\sum_{i=0}^{n-1} a_i w_n^{ki} \\\\\n         & = \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_n^{2ki} +            w_n^k \\sum_{i=0} ^{\\frac{n}{2}-1} a_{2i+1} w_n^{2ki} \\\\\n         & = \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} + w_n^k \\sum_{i=0} ^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki}\n\\end{aligned}</script><script type=\"math/tex; mode=display\">\n\\begin{aligned}\nA(w_n^{k+\\frac{n}{2}}) &= \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} + w_n^{k+\\frac{n}{2}} \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki} \\\\\n                       &= \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i} w_{\\frac{n}{2}}^{ki} - w_n^k               \\sum_{i=0}^{\\frac{n}{2}-1} a_{2i+1} w_{\\frac{n}{2}}^{ki}\n\\end{aligned}</script><p>这样原问题就成功地被划分为两个规模减半的子问题，即对于两部分分别做奇偶系数的n/2次单位根求点值，于是可以递归求解。</p>\n<p>接下来考虑如何求解逆过程，如果我们把之前求出的点值表示当成一个线性方程组的形式，考虑如下矩阵：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{bmatrix}\n    (w_n^{-0})^0 & (w_n^{-0})^1 & \\cdots & (w_n^{-0})^{n-1} \\\\\n    (w_n^{-1})^0 & (w_n^{-1})^1 & \\cdots & (w_n^{-1})^{n-1} \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    (w_n^{-(n-1)})^0 & (w_n^{-(n-1)})^1 & \\cdots & (w_n^{-(n-1)})^{n-1} \\\\\n\\end{bmatrix}</script><p>发现这个矩阵与原矩阵的乘积恰好为$nI$, 所以这个矩阵乘以$\\frac{1}{n}$的矩阵与原矩阵互逆</p>\n<p>所以求逆的过程可以把所有单位复数根的指数取反，执行相同的操作然后将所得到的值除以n即可。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; x[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; l[n &gt;&gt; <span class=\"number\">1</span>], r[n &gt;&gt; <span class=\"number\">1</span>];</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i += <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\tl[i &gt;&gt; <span class=\"number\">1</span>] = x[i];</div><div class=\"line\">\t\tr[i &gt;&gt; <span class=\"number\">1</span>] = x[i + <span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tFFT(l, n &gt;&gt; <span class=\"number\">1</span>, type);</div><div class=\"line\">\tFFT(r, n &gt;&gt; <span class=\"number\">1</span>, type);</div><div class=\"line\">\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; wn(<span class=\"built_in\">cos</span>(type*<span class=\"number\">2</span>*PI/n), <span class=\"built_in\">sin</span>(type*<span class=\"number\">2</span>*PI/n)), w(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (n &gt;&gt; <span class=\"number\">1</span>); w *= wn, i++) &#123;</div><div class=\"line\">\t\tx[i] = l[i] + w * r[i];</div><div class=\"line\"> \t\tx[i + (n &gt;&gt; <span class=\"number\">1</span>)] = l[i] - w * r[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于函数传参数组，常数很大，下面介绍一种迭代实现的版本，常数更小。</p>\n<h3 id=\"Some-details\"><a href=\"#Some-details\" class=\"headerlink\" title=\"Some details\"></a>Some details</h3><p>通过观察我们发现对于一个系数$a_i$，它最后一层到达的位置和i的二进制为有关，我们从上往下观察，对于i，如果在第一层它被选到左边，则说明它二进制的最末位是0，否则是1。然后考虑第二层，与第一层类似，考虑i的二进制倒数第二位即可。</p>\n<p>不难发现假定i最终到达的位置为Rev[i]，则i与Rev[i]的二进制是互逆的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> dis = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(base = <span class=\"number\">1</span>; base &lt;= n + m; base &lt;&lt;= <span class=\"number\">1</span>) ++dis;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;=base; i++) </div><div class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i &amp; <span class=\"number\">1</span>) &lt;&lt; (dis - <span class=\"number\">1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么这样有什么好处呢？</p>\n<p>于是我们可以直接算出最后一层每一个系数所在的位置，然后往回迭代计算，之后的计算过程与递归版本类似，将系数序列分段计算即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; x[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n; ++i) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> s=<span class=\"number\">1</span>; <span class=\"number\">1</span> &lt;&lt; s &lt;= n; ++s) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = <span class=\"number\">1</span> &lt;&lt; s;</div><div class=\"line\">        <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; wm(<span class=\"built_in\">cos</span>(type*<span class=\"number\">2</span>*PI/m), <span class=\"built_in\">sin</span>(type*<span class=\"number\">2</span>*PI/m));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>; k &lt; n; k += m) &#123;</div><div class=\"line\">            <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; w(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j &lt; m &gt;&gt; <span class=\"number\">1</span>; ++j) &#123;</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; u = x[k + j];</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; t = x[k + j + m / <span class=\"number\">2</span>] * w;</div><div class=\"line\">                x[k + j] = u + t;</div><div class=\"line\">                x[k + j + m / <span class=\"number\">2</span>] = u - t;</div><div class=\"line\">                w *= wm;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"HNOI2017 Day1 Solution","date":"2017-04-23T03:36:09.000Z","_content":"\n### T1 Splay\n\n#### Analysis:\n&emsp;&emsp;由于这题具有良好的性质 -- (只旋转最大或者最小值)，所以我们可以手动模拟一下观察它的性质，不难发现，在我们旋转最小或者最大值到根节点的过程中,最终树的形态发生的变化是很少的:\n&emsp;&emsp;最后我们只是将最大或者最小值所在位置的另一个方向的儿子接到它的父亲下面，然后将原树的根节点接在这个点上,那么这样的话，我们就可以用一棵LCT实时地维护这个过程。对于要求的答案，就相当于求这个点到根节点的距离，在维护LCT的同时就能实现。\n\n<!--more-->\n\n#### Code: \n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\n#define fst first\n#define snd second\n\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 200000 + 10;\n\ntemplate<typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\n\nint read() {\n    int n = 0, f = 1;\n    char ch = getchar();\n    for(;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for(; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\nnamespace LCT {\n#define rt(u) (!u || (c[fa[u]][0] != u && c[fa[u]][1] != u))\n\n    int sz[maxn];\n    int fa[maxn], c[maxn][2];\n    \n    void push_up(int u) {\n        sz[u] = 1;\n        if(c[u][0]) sz[u] += sz[c[u][0]];\n        if(c[u][1]) sz[u] += sz[c[u][1]];\n    }\n    void rotate(int u) {\n        int v = fa[u], w = fa[v];\n        bool t = (c[v][1] == u);\n\n        if(!rt(v)) c[w][c[w][1] == v] = u;\n        c[v][t] = c[u][t^1], fa[c[u][t^1]] = v;\n        c[u][t^1] = v, fa[v] = u, fa[u] = w;\n\n        push_up(v); \n    }\n    void splay(int u) {\n        while(!rt(u)) {\n            int v = fa[u], w = fa[v];\n            if(!rt(v)) \n                rotate((c[v][1] == u) == (c[w][1] == v) ? v : u);\n            rotate(u);\n        }push_up(u);\n    }\n    int access(int u) {\n        int v = 0;\n        while(u) {\n            splay(u);\n            c[u][1] = v;\n            push_up(u);\n            u = fa[v = u];\n        }return v;\n    }\n    void link(int u, int v) { fa[u] = v; }\n    int Grt(int u) {\n        access(u); splay(u);\n        while(c[u][0]) u = c[u][0];\n        splay(u);\n        return u;\n    }\n    int remove(int u, int ch) {\n        if(ch) {\n            access(ch);\n\n            fa[ch] = 0;\n            if(c[u][0]) {\n                fa[c[u][0]] = ch;\n                c[ch][0] = c[u][0];\n            }else c[ch][0] = 0;\n\n            c[u][0] = c[u][1] = fa[u] = 0;\n\n            return ch;\n        }else {\n            int t = c[u][0];\n            c[u][0] = fa[c[u][0]] = 0;\n            c[u][0] = c[u][1] = fa[u] = 0;\n\n            return t;\n        }\n    }\n    int query(int u) {\n        access(u), splay(u);\n        return sz[u];\n    }\n}\n\nint tot;\nset <pii> S;\nset <pii> :: iterator it1, it2;\nint c[maxn][2], fa[maxn];\n\nvoid insert(int x) {\n    ++tot;\n\n    it1 = S.lower_bound(pii(x, tot));\n    it2 = S.upper_bound(pii(x, tot));\n\n    if(it1 != S.begin()) {\n        --it1;\n        if(!c[(*it1).snd][1]) { \n            fa[tot] = (*it1).snd;\n            c[(*it1).snd][1] = tot;\n            LCT :: link(tot, (*it1).snd);\n        } \n    }\n    if(it2 != S.end()) {\n        if(!c[(*it2).snd][0]) { \n            fa[tot] = (*it2).snd;\n            c[(*it2).snd][0] = tot;\n            LCT :: link(tot, (*it2).snd);\n        } \n    }\n    S.insert(pii(x, tot));\n    printf(\"%d\\n\", LCT::query(tot));\n}\n\nint u, rt;\nvoid splmin(bool t) {\n    it1 = S.begin(); u = (*it1).snd;\n    printf(\"%d\\n\", LCT::query(u));\n\n    rt = LCT::Grt(LCT::remove(u, c[u][1]));\n\n    if(c[u][1]) {\n        fa[c[u][1]] = fa[u];\n        c[fa[u]][0] = c[u][1];\n    }else c[fa[u]][0] = 0;\n\n    fa[u] = 0;\n    if(!t) {\n        c[u][0] = 0;\n        if(rt) {\n            fa[rt] = u;\n            c[u][1] = rt;\n            LCT::fa[rt] = u;\n        }\n    }else S.erase(it1);\n}\nvoid splmax(bool t) {\n    it1 = S.end(); --it1; u = (*it1).snd;\n    printf(\"%d\\n\", LCT::query(u));\n\n    rt = LCT::Grt(LCT::remove(u, c[u][0]));\n\n    if(c[u][0]) {\n        fa[c[u][0]] = fa[u];\n        c[fa[u]][1] = c[u][0];\n    }else c[fa[u]][1] = 0;\n\n    fa[u] = 0;\n    if(!t) {\n        c[u][1] = 0;\n        if(rt) {\n            fa[rt] = u;\n            c[u][0] = rt;\n            LCT::fa[rt] = u;\n        }\n    }else S.erase(it1);\n}\n\nint main() {\n    freopen(\"splay.in\", \"r\", stdin);\n    freopen(\"splay.out\", \"w\", stdout);\n    \n    int m = read();\n    while(m--) {\n        static int op;\n        op = read();\n        if(op == 1) insert(read());\n        if(op == 2) splmin(0);\n        if(op == 3) splmax(0);\n        if(op == 4) splmin(1);\n        if(op == 5) splmax(1);\n    }\n    return 0;\n}\n```\n\n### T2 Sf\n\n#### Analysis:\n&emsp;&emsp;我们可以首先利用单调栈在$O(n)$时间内求出每个$a[i]$之前值大于的第一个点$L[i]$和之后的第一个点$R[i]$,然后对每一个$a[i]$做最大值时分别统计对答案的贡献，考虑它产生q1的贡献时, 当且仅当选择的区间为$ (L[i], R[i]) $; 当它产生q2的贡献时，选择的区间为 $(j, R[i]) | j \\in (L[i], i)$ 或者 $(L[i], j) | j \\in (i, R[i])$。\n&emsp;&emsp;那么这样之后问题就转化为一个二位数点的经典问题:如果我们将所有的区间$(l, r)$都抽象成点$(l, r)$,满足条件的点对就在询问点对的右下角，稍微麻烦的的是产生q2贡献的是一条线段，从下到上从右到左分别用主席树或者扫描线+线段树都可做。\n\n#### Code:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst int maxn = 200000 + 10;\n\nint read() {\n    int n = 0, f = 1;\n    char ch = getchar();\n    for(;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for(; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\n#define fst first\n#define snd second\n#define pb push_back\n#define SZ(a) int((a).size())\n\nnamespace Seg_T {\n \n    LL val[maxn << 2], add[maxn << 2];\n    \n#define lc (u << 1)\n#define rc (lc | 1)\n#define mid ((l + r) >> 1)\n\n    void init() {\n        memset(val, 0, sizeof val);\n        memset(add, 0, sizeof add);\n    }\n\n    void push_down(int u, int l, int r) {\n        if(add[u]) {\n            add[lc] += add[u]; val[lc] += LL(mid-l+1) * add[u];\n            add[rc] += add[u]; val[rc] += LL(r-mid) * add[u];\n            add[u] = 0;\n        }\n    }\n    void update(int u, int l, int r, int x, int y, int v) {\n        if(x > y) return;\n        if(x <= l && r <= y) {\n            add[u] += v;\n            val[u] += LL(r-l+1) * v;\n            return;\n        }\n        push_down(u, l, r);\n        if(x <= mid) \n            update(lc, l, mid, x, y, v);\n        if(y > mid) \n            update(rc, mid+1, r, x, y, v);\n\n        val[u] = val[lc] + val[rc];\n    }\n    LL query(int u, int l, int r, int x, int y) {\n        if(x > y) return 0;\n        if(x <= l && r <= y) return val[u];\n        push_down(u, l, r);\n\n        LL ans = 0;\n        if(x <= mid) \n            ans += query(lc, l, mid, x, y);\n        if(y > mid) \n            ans += query(rc, mid+1, r, x, y);\n        return ans;\n    }\n}\n\nint n, q, p1, p2;\nint a[maxn], L[maxn], R[maxn];\n\nvector<int> A[maxn];\nvector<pii> Q1[maxn], Q2[maxn], A1[maxn], A2[maxn];\n\nvoid init() {\n    static int top; \n    static int stk[maxn];\n\n    top = 0;\n    stk[top++] = 0;\n    for(int i = 1; i <= n; i++) {\n        while(top > 1 && a[stk[top-1]] < a[i]) --top;\n        L[i] = stk[top-1]; stk[top++] = i;\n    }\n\n    top = 0;\n    stk[top++] = n+1;\n    for(int i = n; i >= 1; i--) {\n        while(top > 1 && a[stk[top-1]] < a[i]) --top;\n        R[i] = stk[top-1]; stk[top++] = i;\n    }\n\n    for(int i = 1; i <= n; i++) {\n        if(L[i] > 0 && R[i] <= n) A[L[i]].pb(R[i]);\n        if(L[i] > 0) A1[L[i]].pb(pii(i+1, R[i]-1)); \n        if(R[i]<= n) A2[R[i]].pb(pii(L[i]+1, i-1));\n    }\n\n}\n\nLL ans[maxn];\nint main() {\n    freopen(\"sf.in\", \"r\", stdin);\n    freopen(\"sf.out\", \"w\", stdout);\n\n    n = read(); q = read(); p1 = read(); p2 = read();\n    for(int i = 1; i <= n; i++) a[i] = read();\n\n    init();\n    for(int i = 0; i < q; i++) {\n        static int x, y;\n        x = read(), y = read();\n        ans[i] += (y-x) * p1;\n        Q1[x].pb(pii(y, i));\n        Q2[y].pb(pii(x, i));\n    }\n\n    Seg_T :: init();\n    for(int i = n; i >= 1; i--) {\n        for(int j = 0; j < SZ(A1[i]); j++) \n            Seg_T :: update(1, 1, n, A1[i][j].fst, A1[i][j].snd, p2);\n        for(int j = 0; j < SZ(A[i]); j++)\n            Seg_T :: update(1, 1, n, A[i][j], A[i][j], p1);\n        for(int j = 0; j < SZ(Q1[i]); j++) \n            ans[Q1[i][j].snd] += Seg_T :: query(1, 1, n, 1, Q1[i][j].fst);\n    }\n\n    Seg_T :: init();\n    for(int i = 1; i <= n; i++) {\n        for(int j = 0; j < SZ(A2[i]); j++) \n            Seg_T :: update(1, 1, n, A2[i][j].fst, A2[i][j].snd, p2);\n        for(int j = 0; j < SZ(Q2[i]); j++) \n            ans[Q2[i][j].snd] += Seg_T :: query(1, 1, n, Q2[i][j].fst, n);\n    }\n\n    for(int i = 0; i < q; i++) printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```\n\n### T3 Gift\n\n#### Analysis:\n&emsp;&emsp;本质是求一个旋转方式，最小化：\n\n$$ \n\\begin{align} \n\\sum_{i=1}^{n} (x_i-y_i+c) ^ {2} &= \\sum_{i=1}^{n} (x_i-y_i)^{2} + 2c\\sum_{i=1}^{n} (x_i-y_i) + nc^2 \\\\\n&= \\sum_{i=1}^{n} x_i^2 + \\sum_{i=1}^{n} y_i^2 - 2\\sum_{i=1}^{n} x_iy_i + 2c\\sum_{i=1}^{n} (x_i - y_i) + nc^2 \n\\end{align}\n$$\n\n&emsp;&emsp;后面与c相关的部分就是一个二次函数，前面的两项是常数，那么我们的目标就变成了最大化:\n$$ k \\in [0, n)\\ \\ \\  \\sum_{i=1}^{n} x_iy_{i+k} | y_i = y_{i\\ mod\\ n} $$\n\n&emsp;&emsp; 我们将x对应的数列翻转,则原式变为：\n$$ \\sum_{i=1}^{n} x_{n-i+1}\\ y_{i+k} $$\n&emsp;&emsp; 不难发现对于一个给定的k，其中每一项x与y的下标之和模n同余，循环卷积即可。\n\n#### Code:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int oo = INT_MAX;\nconst int maxn = 200000 + 10;\nconst double PI = acos(-1.0);\n\nint base, dis;\nint rev[maxn];\n\nint read() {\n    int n = 0, f = 1;\n    char ch = getchar();\n    for(;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for(; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\nvoid init(int N) {\n    for(base = 1; base <= N; base <<= 1) ++dis;\n    for(int i = 0; i < base; i++) \n        rev[i] = (rev[i>>1] >> 1) | ((i&1) << (dis-1));\n}\n\nvoid DFT(complex<double> x[], int N, int type) {\n    for(int i = 0; i < N; i++) \n        if(i < rev[i]) swap(x[i], x[rev[i]]);\n\n    for(int l = 2; l <= N; l <<= 1) {\n        complex<double> wn(cos(2*PI/l), sin(2*PI*type/l));\n        for(int i = 0; i < N; i += l) {\n            complex<double> w(1, 0);\n            for(int j = 0; j < (l >> 1); j++, w *= wn) {\n                complex<double> L = x[i + j];\n                complex<double> R = x[i + j + (l >> 1)] * w;\n                x[i + j] = L + R;\n                x[i + j + (l >> 1)] = L - R;\n            }\n        }\n    }\n}\n\nint n;\nint a[maxn], b[maxn];\ncomplex<double> da[maxn], db[maxn];\n\nint main() {\n    freopen(\"gift.in\", \"r\", stdin);\n    freopen(\"gift.out\", \"w\", stdout);\n\n    n = read(); read();\n    init(2 * n);\n     \n    long long ans = 0, B = 0;\n    for(int i = 0; i < n; i++) a[i] = read(), ans += 1LL*a[i]*a[i], B += a[i];\n    for(int i = 0; i < n; i++) b[i] = read(), ans += 1LL*b[i]*b[i], B -= b[i];\n\n    B *= 2;\n    long long k = (long long) floor(double(-B)/(2*n) + 0.5);\n\n    ans += (n * k * k + k * B);\n\n    reverse(b, b + n);\n    for(int i = 0; i < n; i++) da[i] = a[i], db[i] = b[i];\n\n    DFT(da, base, 1);\n    DFT(db, base, 1);\n\n    for(int i = 0; i < base; i++) da[i] *= db[i];\n    DFT(da, base, -1);\n    \n    int tmp = -oo;\n    for(int i = 0; i < n; i++) da[i] += da[i+n];\n    for(int i = 0; i < n; i++) tmp = max(tmp, int((da[i].real()/base) + 0.5));\n\n    ans -= tmp * 2;\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```\n","source":"_drafts/HNOI2017_day1.md","raw":"---\ntitle: HNOI2017 Day1 Solution\ndate: 2017-04-23 11:36:09\ntags: \n    - Solution\n    - Datastructure\n---\n\n### T1 Splay\n\n#### Analysis:\n&emsp;&emsp;由于这题具有良好的性质 -- (只旋转最大或者最小值)，所以我们可以手动模拟一下观察它的性质，不难发现，在我们旋转最小或者最大值到根节点的过程中,最终树的形态发生的变化是很少的:\n&emsp;&emsp;最后我们只是将最大或者最小值所在位置的另一个方向的儿子接到它的父亲下面，然后将原树的根节点接在这个点上,那么这样的话，我们就可以用一棵LCT实时地维护这个过程。对于要求的答案，就相当于求这个点到根节点的距离，在维护LCT的同时就能实现。\n\n<!--more-->\n\n#### Code: \n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\n#define fst first\n#define snd second\n\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 200000 + 10;\n\ntemplate<typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\n\nint read() {\n    int n = 0, f = 1;\n    char ch = getchar();\n    for(;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for(; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\nnamespace LCT {\n#define rt(u) (!u || (c[fa[u]][0] != u && c[fa[u]][1] != u))\n\n    int sz[maxn];\n    int fa[maxn], c[maxn][2];\n    \n    void push_up(int u) {\n        sz[u] = 1;\n        if(c[u][0]) sz[u] += sz[c[u][0]];\n        if(c[u][1]) sz[u] += sz[c[u][1]];\n    }\n    void rotate(int u) {\n        int v = fa[u], w = fa[v];\n        bool t = (c[v][1] == u);\n\n        if(!rt(v)) c[w][c[w][1] == v] = u;\n        c[v][t] = c[u][t^1], fa[c[u][t^1]] = v;\n        c[u][t^1] = v, fa[v] = u, fa[u] = w;\n\n        push_up(v); \n    }\n    void splay(int u) {\n        while(!rt(u)) {\n            int v = fa[u], w = fa[v];\n            if(!rt(v)) \n                rotate((c[v][1] == u) == (c[w][1] == v) ? v : u);\n            rotate(u);\n        }push_up(u);\n    }\n    int access(int u) {\n        int v = 0;\n        while(u) {\n            splay(u);\n            c[u][1] = v;\n            push_up(u);\n            u = fa[v = u];\n        }return v;\n    }\n    void link(int u, int v) { fa[u] = v; }\n    int Grt(int u) {\n        access(u); splay(u);\n        while(c[u][0]) u = c[u][0];\n        splay(u);\n        return u;\n    }\n    int remove(int u, int ch) {\n        if(ch) {\n            access(ch);\n\n            fa[ch] = 0;\n            if(c[u][0]) {\n                fa[c[u][0]] = ch;\n                c[ch][0] = c[u][0];\n            }else c[ch][0] = 0;\n\n            c[u][0] = c[u][1] = fa[u] = 0;\n\n            return ch;\n        }else {\n            int t = c[u][0];\n            c[u][0] = fa[c[u][0]] = 0;\n            c[u][0] = c[u][1] = fa[u] = 0;\n\n            return t;\n        }\n    }\n    int query(int u) {\n        access(u), splay(u);\n        return sz[u];\n    }\n}\n\nint tot;\nset <pii> S;\nset <pii> :: iterator it1, it2;\nint c[maxn][2], fa[maxn];\n\nvoid insert(int x) {\n    ++tot;\n\n    it1 = S.lower_bound(pii(x, tot));\n    it2 = S.upper_bound(pii(x, tot));\n\n    if(it1 != S.begin()) {\n        --it1;\n        if(!c[(*it1).snd][1]) { \n            fa[tot] = (*it1).snd;\n            c[(*it1).snd][1] = tot;\n            LCT :: link(tot, (*it1).snd);\n        } \n    }\n    if(it2 != S.end()) {\n        if(!c[(*it2).snd][0]) { \n            fa[tot] = (*it2).snd;\n            c[(*it2).snd][0] = tot;\n            LCT :: link(tot, (*it2).snd);\n        } \n    }\n    S.insert(pii(x, tot));\n    printf(\"%d\\n\", LCT::query(tot));\n}\n\nint u, rt;\nvoid splmin(bool t) {\n    it1 = S.begin(); u = (*it1).snd;\n    printf(\"%d\\n\", LCT::query(u));\n\n    rt = LCT::Grt(LCT::remove(u, c[u][1]));\n\n    if(c[u][1]) {\n        fa[c[u][1]] = fa[u];\n        c[fa[u]][0] = c[u][1];\n    }else c[fa[u]][0] = 0;\n\n    fa[u] = 0;\n    if(!t) {\n        c[u][0] = 0;\n        if(rt) {\n            fa[rt] = u;\n            c[u][1] = rt;\n            LCT::fa[rt] = u;\n        }\n    }else S.erase(it1);\n}\nvoid splmax(bool t) {\n    it1 = S.end(); --it1; u = (*it1).snd;\n    printf(\"%d\\n\", LCT::query(u));\n\n    rt = LCT::Grt(LCT::remove(u, c[u][0]));\n\n    if(c[u][0]) {\n        fa[c[u][0]] = fa[u];\n        c[fa[u]][1] = c[u][0];\n    }else c[fa[u]][1] = 0;\n\n    fa[u] = 0;\n    if(!t) {\n        c[u][1] = 0;\n        if(rt) {\n            fa[rt] = u;\n            c[u][0] = rt;\n            LCT::fa[rt] = u;\n        }\n    }else S.erase(it1);\n}\n\nint main() {\n    freopen(\"splay.in\", \"r\", stdin);\n    freopen(\"splay.out\", \"w\", stdout);\n    \n    int m = read();\n    while(m--) {\n        static int op;\n        op = read();\n        if(op == 1) insert(read());\n        if(op == 2) splmin(0);\n        if(op == 3) splmax(0);\n        if(op == 4) splmin(1);\n        if(op == 5) splmax(1);\n    }\n    return 0;\n}\n```\n\n### T2 Sf\n\n#### Analysis:\n&emsp;&emsp;我们可以首先利用单调栈在$O(n)$时间内求出每个$a[i]$之前值大于的第一个点$L[i]$和之后的第一个点$R[i]$,然后对每一个$a[i]$做最大值时分别统计对答案的贡献，考虑它产生q1的贡献时, 当且仅当选择的区间为$ (L[i], R[i]) $; 当它产生q2的贡献时，选择的区间为 $(j, R[i]) | j \\in (L[i], i)$ 或者 $(L[i], j) | j \\in (i, R[i])$。\n&emsp;&emsp;那么这样之后问题就转化为一个二位数点的经典问题:如果我们将所有的区间$(l, r)$都抽象成点$(l, r)$,满足条件的点对就在询问点对的右下角，稍微麻烦的的是产生q2贡献的是一条线段，从下到上从右到左分别用主席树或者扫描线+线段树都可做。\n\n#### Code:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst int maxn = 200000 + 10;\n\nint read() {\n    int n = 0, f = 1;\n    char ch = getchar();\n    for(;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for(; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\n#define fst first\n#define snd second\n#define pb push_back\n#define SZ(a) int((a).size())\n\nnamespace Seg_T {\n \n    LL val[maxn << 2], add[maxn << 2];\n    \n#define lc (u << 1)\n#define rc (lc | 1)\n#define mid ((l + r) >> 1)\n\n    void init() {\n        memset(val, 0, sizeof val);\n        memset(add, 0, sizeof add);\n    }\n\n    void push_down(int u, int l, int r) {\n        if(add[u]) {\n            add[lc] += add[u]; val[lc] += LL(mid-l+1) * add[u];\n            add[rc] += add[u]; val[rc] += LL(r-mid) * add[u];\n            add[u] = 0;\n        }\n    }\n    void update(int u, int l, int r, int x, int y, int v) {\n        if(x > y) return;\n        if(x <= l && r <= y) {\n            add[u] += v;\n            val[u] += LL(r-l+1) * v;\n            return;\n        }\n        push_down(u, l, r);\n        if(x <= mid) \n            update(lc, l, mid, x, y, v);\n        if(y > mid) \n            update(rc, mid+1, r, x, y, v);\n\n        val[u] = val[lc] + val[rc];\n    }\n    LL query(int u, int l, int r, int x, int y) {\n        if(x > y) return 0;\n        if(x <= l && r <= y) return val[u];\n        push_down(u, l, r);\n\n        LL ans = 0;\n        if(x <= mid) \n            ans += query(lc, l, mid, x, y);\n        if(y > mid) \n            ans += query(rc, mid+1, r, x, y);\n        return ans;\n    }\n}\n\nint n, q, p1, p2;\nint a[maxn], L[maxn], R[maxn];\n\nvector<int> A[maxn];\nvector<pii> Q1[maxn], Q2[maxn], A1[maxn], A2[maxn];\n\nvoid init() {\n    static int top; \n    static int stk[maxn];\n\n    top = 0;\n    stk[top++] = 0;\n    for(int i = 1; i <= n; i++) {\n        while(top > 1 && a[stk[top-1]] < a[i]) --top;\n        L[i] = stk[top-1]; stk[top++] = i;\n    }\n\n    top = 0;\n    stk[top++] = n+1;\n    for(int i = n; i >= 1; i--) {\n        while(top > 1 && a[stk[top-1]] < a[i]) --top;\n        R[i] = stk[top-1]; stk[top++] = i;\n    }\n\n    for(int i = 1; i <= n; i++) {\n        if(L[i] > 0 && R[i] <= n) A[L[i]].pb(R[i]);\n        if(L[i] > 0) A1[L[i]].pb(pii(i+1, R[i]-1)); \n        if(R[i]<= n) A2[R[i]].pb(pii(L[i]+1, i-1));\n    }\n\n}\n\nLL ans[maxn];\nint main() {\n    freopen(\"sf.in\", \"r\", stdin);\n    freopen(\"sf.out\", \"w\", stdout);\n\n    n = read(); q = read(); p1 = read(); p2 = read();\n    for(int i = 1; i <= n; i++) a[i] = read();\n\n    init();\n    for(int i = 0; i < q; i++) {\n        static int x, y;\n        x = read(), y = read();\n        ans[i] += (y-x) * p1;\n        Q1[x].pb(pii(y, i));\n        Q2[y].pb(pii(x, i));\n    }\n\n    Seg_T :: init();\n    for(int i = n; i >= 1; i--) {\n        for(int j = 0; j < SZ(A1[i]); j++) \n            Seg_T :: update(1, 1, n, A1[i][j].fst, A1[i][j].snd, p2);\n        for(int j = 0; j < SZ(A[i]); j++)\n            Seg_T :: update(1, 1, n, A[i][j], A[i][j], p1);\n        for(int j = 0; j < SZ(Q1[i]); j++) \n            ans[Q1[i][j].snd] += Seg_T :: query(1, 1, n, 1, Q1[i][j].fst);\n    }\n\n    Seg_T :: init();\n    for(int i = 1; i <= n; i++) {\n        for(int j = 0; j < SZ(A2[i]); j++) \n            Seg_T :: update(1, 1, n, A2[i][j].fst, A2[i][j].snd, p2);\n        for(int j = 0; j < SZ(Q2[i]); j++) \n            ans[Q2[i][j].snd] += Seg_T :: query(1, 1, n, Q2[i][j].fst, n);\n    }\n\n    for(int i = 0; i < q; i++) printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```\n\n### T3 Gift\n\n#### Analysis:\n&emsp;&emsp;本质是求一个旋转方式，最小化：\n\n$$ \n\\begin{align} \n\\sum_{i=1}^{n} (x_i-y_i+c) ^ {2} &= \\sum_{i=1}^{n} (x_i-y_i)^{2} + 2c\\sum_{i=1}^{n} (x_i-y_i) + nc^2 \\\\\n&= \\sum_{i=1}^{n} x_i^2 + \\sum_{i=1}^{n} y_i^2 - 2\\sum_{i=1}^{n} x_iy_i + 2c\\sum_{i=1}^{n} (x_i - y_i) + nc^2 \n\\end{align}\n$$\n\n&emsp;&emsp;后面与c相关的部分就是一个二次函数，前面的两项是常数，那么我们的目标就变成了最大化:\n$$ k \\in [0, n)\\ \\ \\  \\sum_{i=1}^{n} x_iy_{i+k} | y_i = y_{i\\ mod\\ n} $$\n\n&emsp;&emsp; 我们将x对应的数列翻转,则原式变为：\n$$ \\sum_{i=1}^{n} x_{n-i+1}\\ y_{i+k} $$\n&emsp;&emsp; 不难发现对于一个给定的k，其中每一项x与y的下标之和模n同余，循环卷积即可。\n\n#### Code:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int oo = INT_MAX;\nconst int maxn = 200000 + 10;\nconst double PI = acos(-1.0);\n\nint base, dis;\nint rev[maxn];\n\nint read() {\n    int n = 0, f = 1;\n    char ch = getchar();\n    for(;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for(; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\nvoid init(int N) {\n    for(base = 1; base <= N; base <<= 1) ++dis;\n    for(int i = 0; i < base; i++) \n        rev[i] = (rev[i>>1] >> 1) | ((i&1) << (dis-1));\n}\n\nvoid DFT(complex<double> x[], int N, int type) {\n    for(int i = 0; i < N; i++) \n        if(i < rev[i]) swap(x[i], x[rev[i]]);\n\n    for(int l = 2; l <= N; l <<= 1) {\n        complex<double> wn(cos(2*PI/l), sin(2*PI*type/l));\n        for(int i = 0; i < N; i += l) {\n            complex<double> w(1, 0);\n            for(int j = 0; j < (l >> 1); j++, w *= wn) {\n                complex<double> L = x[i + j];\n                complex<double> R = x[i + j + (l >> 1)] * w;\n                x[i + j] = L + R;\n                x[i + j + (l >> 1)] = L - R;\n            }\n        }\n    }\n}\n\nint n;\nint a[maxn], b[maxn];\ncomplex<double> da[maxn], db[maxn];\n\nint main() {\n    freopen(\"gift.in\", \"r\", stdin);\n    freopen(\"gift.out\", \"w\", stdout);\n\n    n = read(); read();\n    init(2 * n);\n     \n    long long ans = 0, B = 0;\n    for(int i = 0; i < n; i++) a[i] = read(), ans += 1LL*a[i]*a[i], B += a[i];\n    for(int i = 0; i < n; i++) b[i] = read(), ans += 1LL*b[i]*b[i], B -= b[i];\n\n    B *= 2;\n    long long k = (long long) floor(double(-B)/(2*n) + 0.5);\n\n    ans += (n * k * k + k * B);\n\n    reverse(b, b + n);\n    for(int i = 0; i < n; i++) da[i] = a[i], db[i] = b[i];\n\n    DFT(da, base, 1);\n    DFT(db, base, 1);\n\n    for(int i = 0; i < base; i++) da[i] *= db[i];\n    DFT(da, base, -1);\n    \n    int tmp = -oo;\n    for(int i = 0; i < n; i++) da[i] += da[i+n];\n    for(int i = 0; i < n; i++) tmp = max(tmp, int((da[i].real()/base) + 0.5));\n\n    ans -= tmp * 2;\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```\n","slug":"HNOI2017_day1","published":0,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cks0003onisqudmx0nh","content":"<h3 id=\"T1-Splay\"><a href=\"#T1-Splay\" class=\"headerlink\" title=\"T1 Splay\"></a>T1 Splay</h3><h4 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>&emsp;&emsp;由于这题具有良好的性质 — (只旋转最大或者最小值)，所以我们可以手动模拟一下观察它的性质，不难发现，在我们旋转最小或者最大值到根节点的过程中,最终树的形态发生的变化是很少的:<br>&emsp;&emsp;最后我们只是将最大或者最小值所在位置的另一个方向的儿子接到它的父亲下面，然后将原树的根节点接在这个点上,那么这样的话，我们就可以用一棵LCT实时地维护这个过程。对于要求的答案，就相当于求这个点到根节点的距离，在维护LCT的同时就能实现。</p>\n<a id=\"more\"></a>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> LCT &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rt(u) (!u || (c[fa[u]][0] != u &amp;&amp; c[fa[u]][1] != u))</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> sz[maxn];</div><div class=\"line\">    <span class=\"keyword\">int</span> fa[maxn], c[maxn][<span class=\"number\">2</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        sz[u] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(c[u][<span class=\"number\">0</span>]) sz[u] += sz[c[u][<span class=\"number\">0</span>]];</div><div class=\"line\">        <span class=\"keyword\">if</span>(c[u][<span class=\"number\">1</span>]) sz[u] += sz[c[u][<span class=\"number\">1</span>]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = fa[u], w = fa[v];</div><div class=\"line\">        <span class=\"keyword\">bool</span> t = (c[v][<span class=\"number\">1</span>] == u);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(!rt(v)) c[w][c[w][<span class=\"number\">1</span>] == v] = u;</div><div class=\"line\">        c[v][t] = c[u][t^<span class=\"number\">1</span>], fa[c[u][t^<span class=\"number\">1</span>]] = v;</div><div class=\"line\">        c[u][t^<span class=\"number\">1</span>] = v, fa[v] = u, fa[u] = w;</div><div class=\"line\"></div><div class=\"line\">        push_up(v); </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(!rt(u)) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = fa[u], w = fa[v];</div><div class=\"line\">            <span class=\"keyword\">if</span>(!rt(v)) </div><div class=\"line\">                rotate((c[v][<span class=\"number\">1</span>] == u) == (c[w][<span class=\"number\">1</span>] == v) ? v : u);</div><div class=\"line\">            rotate(u);</div><div class=\"line\">        &#125;push_up(u);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(u) &#123;</div><div class=\"line\">            splay(u);</div><div class=\"line\">            c[u][<span class=\"number\">1</span>] = v;</div><div class=\"line\">            push_up(u);</div><div class=\"line\">            u = fa[v = u];</div><div class=\"line\">        &#125;<span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123; fa[u] = v; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Grt</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        access(u); splay(u);</div><div class=\"line\">        <span class=\"keyword\">while</span>(c[u][<span class=\"number\">0</span>]) u = c[u][<span class=\"number\">0</span>];</div><div class=\"line\">        splay(u);</div><div class=\"line\">        <span class=\"keyword\">return</span> u;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> ch)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(ch) &#123;</div><div class=\"line\">            access(ch);</div><div class=\"line\"></div><div class=\"line\">            fa[ch] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c[u][<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">                fa[c[u][<span class=\"number\">0</span>]] = ch;</div><div class=\"line\">                c[ch][<span class=\"number\">0</span>] = c[u][<span class=\"number\">0</span>];</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> c[ch][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            c[u][<span class=\"number\">0</span>] = c[u][<span class=\"number\">1</span>] = fa[u] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> ch;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> t = c[u][<span class=\"number\">0</span>];</div><div class=\"line\">            c[u][<span class=\"number\">0</span>] = fa[c[u][<span class=\"number\">0</span>]] = <span class=\"number\">0</span>;</div><div class=\"line\">            c[u][<span class=\"number\">0</span>] = c[u][<span class=\"number\">1</span>] = fa[u] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> t;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        access(u), splay(u);</div><div class=\"line\">        <span class=\"keyword\">return</span> sz[u];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> tot;</div><div class=\"line\"><span class=\"built_in\">set</span> &lt;pii&gt; S;</div><div class=\"line\"><span class=\"built_in\">set</span> &lt;pii&gt; :: iterator it1, it2;</div><div class=\"line\"><span class=\"keyword\">int</span> c[maxn][<span class=\"number\">2</span>], fa[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    ++tot;</div><div class=\"line\"></div><div class=\"line\">    it1 = S.lower_bound(pii(x, tot));</div><div class=\"line\">    it2 = S.upper_bound(pii(x, tot));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(it1 != S.begin()) &#123;</div><div class=\"line\">        --it1;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!c[(*it1).snd][<span class=\"number\">1</span>]) &#123; </div><div class=\"line\">            fa[tot] = (*it1).snd;</div><div class=\"line\">            c[(*it1).snd][<span class=\"number\">1</span>] = tot;</div><div class=\"line\">            LCT :: link(tot, (*it1).snd);</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(it2 != S.end()) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!c[(*it2).snd][<span class=\"number\">0</span>]) &#123; </div><div class=\"line\">            fa[tot] = (*it2).snd;</div><div class=\"line\">            c[(*it2).snd][<span class=\"number\">0</span>] = tot;</div><div class=\"line\">            LCT :: link(tot, (*it2).snd);</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125;</div><div class=\"line\">    S.insert(pii(x, tot));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, LCT::query(tot));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> u, rt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splmin</span><span class=\"params\">(<span class=\"keyword\">bool</span> t)</span> </span>&#123;</div><div class=\"line\">    it1 = S.begin(); u = (*it1).snd;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, LCT::query(u));</div><div class=\"line\"></div><div class=\"line\">    rt = LCT::Grt(LCT::remove(u, c[u][<span class=\"number\">1</span>]));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(c[u][<span class=\"number\">1</span>]) &#123;</div><div class=\"line\">        fa[c[u][<span class=\"number\">1</span>]] = fa[u];</div><div class=\"line\">        c[fa[u]][<span class=\"number\">0</span>] = c[u][<span class=\"number\">1</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> c[fa[u]][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    fa[u] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!t) &#123;</div><div class=\"line\">        c[u][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(rt) &#123;</div><div class=\"line\">            fa[rt] = u;</div><div class=\"line\">            c[u][<span class=\"number\">1</span>] = rt;</div><div class=\"line\">            LCT::fa[rt] = u;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> S.erase(it1);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splmax</span><span class=\"params\">(<span class=\"keyword\">bool</span> t)</span> </span>&#123;</div><div class=\"line\">    it1 = S.end(); --it1; u = (*it1).snd;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, LCT::query(u));</div><div class=\"line\"></div><div class=\"line\">    rt = LCT::Grt(LCT::remove(u, c[u][<span class=\"number\">0</span>]));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(c[u][<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">        fa[c[u][<span class=\"number\">0</span>]] = fa[u];</div><div class=\"line\">        c[fa[u]][<span class=\"number\">1</span>] = c[u][<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> c[fa[u]][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    fa[u] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!t) &#123;</div><div class=\"line\">        c[u][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(rt) &#123;</div><div class=\"line\">            fa[rt] = u;</div><div class=\"line\">            c[u][<span class=\"number\">0</span>] = rt;</div><div class=\"line\">            LCT::fa[rt] = u;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> S.erase(it1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    freopen(<span class=\"string\">\"splay.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"splay.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> m = read();</div><div class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> op;</div><div class=\"line\">        op = read();</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) insert(read());</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) splmin(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) splmax(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">4</span>) splmin(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">5</span>) splmax(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"T2-Sf\"><a href=\"#T2-Sf\" class=\"headerlink\" title=\"T2 Sf\"></a>T2 Sf</h3><h4 id=\"Analysis-1\"><a href=\"#Analysis-1\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>&emsp;&emsp;我们可以首先利用单调栈在$O(n)$时间内求出每个$a[i]$之前值大于的第一个点$L[i]$和之后的第一个点$R[i]$,然后对每一个$a[i]$做最大值时分别统计对答案的贡献，考虑它产生q1的贡献时, 当且仅当选择的区间为$ (L[i], R[i]) $; 当它产生q2的贡献时，选择的区间为 $(j, R[i]) | j \\in (L[i], i)$ 或者 $(L[i], j) | j \\in (i, R[i])$。<br>&emsp;&emsp;那么这样之后问题就转化为一个二位数点的经典问题:如果我们将所有的区间$(l, r)$都抽象成点$(l, r)$,满足条件的点对就在询问点对的右下角，稍微麻烦的的是产生q2贡献的是一条线段，从下到上从右到左分别用主席树或者扫描线+线段树都可做。</p>\n<h4 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code:\"></a>Code:</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(a) int((a).size())</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Seg_T &#123;</div><div class=\"line\"> </div><div class=\"line\">    LL val[maxn &lt;&lt; <span class=\"number\">2</span>], add[maxn &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc (u &lt;&lt; 1)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc (lc | 1)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(val, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> val);</div><div class=\"line\">        <span class=\"built_in\">memset</span>(add, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> add);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(add[u]) &#123;</div><div class=\"line\">            add[lc] += add[u]; val[lc] += LL(mid-l+<span class=\"number\">1</span>) * add[u];</div><div class=\"line\">            add[rc] += add[u]; val[rc] += LL(r-mid) * add[u];</div><div class=\"line\">            add[u] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &gt; y) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= l &amp;&amp; r &lt;= y) &#123;</div><div class=\"line\">            add[u] += v;</div><div class=\"line\">            val[u] += LL(r-l+<span class=\"number\">1</span>) * v;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        push_down(u, l, r);</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) </div><div class=\"line\">            update(lc, l, mid, x, y, v);</div><div class=\"line\">        <span class=\"keyword\">if</span>(y &gt; mid) </div><div class=\"line\">            update(rc, mid+<span class=\"number\">1</span>, r, x, y, v);</div><div class=\"line\"></div><div class=\"line\">        val[u] = val[lc] + val[rc];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &gt; y) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class=\"keyword\">return</span> val[u];</div><div class=\"line\">        push_down(u, l, r);</div><div class=\"line\"></div><div class=\"line\">        LL ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) </div><div class=\"line\">            ans += query(lc, l, mid, x, y);</div><div class=\"line\">        <span class=\"keyword\">if</span>(y &gt; mid) </div><div class=\"line\">            ans += query(rc, mid+<span class=\"number\">1</span>, r, x, y);</div><div class=\"line\">        <span class=\"keyword\">return</span> ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, q, p1, p2;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxn], L[maxn], R[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; A[maxn];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;pii&gt; Q1[maxn], Q2[maxn], A1[maxn], A2[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> top; </div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[maxn];</div><div class=\"line\"></div><div class=\"line\">    top = <span class=\"number\">0</span>;</div><div class=\"line\">    stk[top++] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(top &gt; <span class=\"number\">1</span> &amp;&amp; a[stk[top<span class=\"number\">-1</span>]] &lt; a[i]) --top;</div><div class=\"line\">        L[i] = stk[top<span class=\"number\">-1</span>]; stk[top++] = i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    top = <span class=\"number\">0</span>;</div><div class=\"line\">    stk[top++] = n+<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(top &gt; <span class=\"number\">1</span> &amp;&amp; a[stk[top<span class=\"number\">-1</span>]] &lt; a[i]) --top;</div><div class=\"line\">        R[i] = stk[top<span class=\"number\">-1</span>]; stk[top++] = i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(L[i] &gt; <span class=\"number\">0</span> &amp;&amp; R[i] &lt;= n) A[L[i]].pb(R[i]);</div><div class=\"line\">        <span class=\"keyword\">if</span>(L[i] &gt; <span class=\"number\">0</span>) A1[L[i]].pb(pii(i+<span class=\"number\">1</span>, R[i]<span class=\"number\">-1</span>)); </div><div class=\"line\">        <span class=\"keyword\">if</span>(R[i]&lt;= n) A2[R[i]].pb(pii(L[i]+<span class=\"number\">1</span>, i<span class=\"number\">-1</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LL ans[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    freopen(<span class=\"string\">\"sf.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"sf.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"></div><div class=\"line\">    n = read(); q = read(); p1 = read(); p2 = read();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) a[i] = read();</div><div class=\"line\"></div><div class=\"line\">    init();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">        x = read(), y = read();</div><div class=\"line\">        ans[i] += (y-x) * p1;</div><div class=\"line\">        Q1[x].pb(pii(y, i));</div><div class=\"line\">        Q2[y].pb(pii(x, i));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Seg_T :: init();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(A1[i]); j++) </div><div class=\"line\">            Seg_T :: update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, A1[i][j].fst, A1[i][j].snd, p2);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(A[i]); j++)</div><div class=\"line\">            Seg_T :: update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, A[i][j], A[i][j], p1);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(Q1[i]); j++) </div><div class=\"line\">            ans[Q1[i][j].snd] += Seg_T :: query(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>, Q1[i][j].fst);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Seg_T :: init();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(A2[i]); j++) </div><div class=\"line\">            Seg_T :: update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, A2[i][j].fst, A2[i][j].snd, p2);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(Q2[i]); j++) </div><div class=\"line\">            ans[Q2[i][j].snd] += Seg_T :: query(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, Q2[i][j].fst, n);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans[i]);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"T3-Gift\"><a href=\"#T3-Gift\" class=\"headerlink\" title=\"T3 Gift\"></a>T3 Gift</h3><h4 id=\"Analysis-2\"><a href=\"#Analysis-2\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>&emsp;&emsp;本质是求一个旋转方式，最小化：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align} \n\\sum_{i=1}^{n} (x_i-y_i+c) ^ {2} &= \\sum_{i=1}^{n} (x_i-y_i)^{2} + 2c\\sum_{i=1}^{n} (x_i-y_i) + nc^2 \\\\\n&= \\sum_{i=1}^{n} x_i^2 + \\sum_{i=1}^{n} y_i^2 - 2\\sum_{i=1}^{n} x_iy_i + 2c\\sum_{i=1}^{n} (x_i - y_i) + nc^2 \n\\end{align}</script><p>&emsp;&emsp;后面与c相关的部分就是一个二次函数，前面的两项是常数，那么我们的目标就变成了最大化:</p>\n<script type=\"math/tex; mode=display\">k \\in [0, n)\\ \\ \\  \\sum_{i=1}^{n} x_iy_{i+k} | y_i = y_{i\\ mod\\ n}</script><p>&emsp;&emsp; 我们将x对应的数列翻转,则原式变为：</p>\n<script type=\"math/tex; mode=display\">\\sum_{i=1}^{n} x_{n-i+1}\\ y_{i+k}</script><p>&emsp;&emsp; 不难发现对于一个给定的k，其中每一项x与y的下标之和模n同余，循环卷积即可。</p>\n<h4 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code:\"></a>Code:</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = INT_MAX;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> base, dis;</div><div class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(base = <span class=\"number\">1</span>; base &lt;= N; base &lt;&lt;= <span class=\"number\">1</span>) ++dis;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) </div><div class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (dis<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; x[], <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= N; l &lt;&lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; wn(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*PI/l), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*PI*type/l));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i += l) &#123;</div><div class=\"line\">            <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; w(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (l &gt;&gt; <span class=\"number\">1</span>); j++, w *= wn) &#123;</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; L = x[i + j];</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; R = x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] * w;</div><div class=\"line\">                x[i + j] = L + R;</div><div class=\"line\">                x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] = L - R;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxn], b[maxn];</div><div class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; da[maxn], db[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    freopen(<span class=\"string\">\"gift.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"gift.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"></div><div class=\"line\">    n = read(); read();</div><div class=\"line\">    init(<span class=\"number\">2</span> * n);</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>, B = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) a[i] = read(), ans += <span class=\"number\">1L</span>L*a[i]*a[i], B += a[i];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) b[i] = read(), ans += <span class=\"number\">1L</span>L*b[i]*b[i], B -= b[i];</div><div class=\"line\"></div><div class=\"line\">    B *= <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k = (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>) <span class=\"built_in\">floor</span>(<span class=\"keyword\">double</span>(-B)/(<span class=\"number\">2</span>*n) + <span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\">    ans += (n * k * k + k * B);</div><div class=\"line\"></div><div class=\"line\">    reverse(b, b + n);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) da[i] = a[i], db[i] = b[i];</div><div class=\"line\"></div><div class=\"line\">    DFT(da, base, <span class=\"number\">1</span>);</div><div class=\"line\">    DFT(db, base, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) da[i] *= db[i];</div><div class=\"line\">    DFT(da, base, <span class=\"number\">-1</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = -oo;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) da[i] += da[i+n];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) tmp = max(tmp, <span class=\"keyword\">int</span>((da[i].real()/base) + <span class=\"number\">0.5</span>));</div><div class=\"line\"></div><div class=\"line\">    ans -= tmp * <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"T1-Splay\"><a href=\"#T1-Splay\" class=\"headerlink\" title=\"T1 Splay\"></a>T1 Splay</h3><h4 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>&emsp;&emsp;由于这题具有良好的性质 — (只旋转最大或者最小值)，所以我们可以手动模拟一下观察它的性质，不难发现，在我们旋转最小或者最大值到根节点的过程中,最终树的形态发生的变化是很少的:<br>&emsp;&emsp;最后我们只是将最大或者最小值所在位置的另一个方向的儿子接到它的父亲下面，然后将原树的根节点接在这个点上,那么这样的话，我们就可以用一棵LCT实时地维护这个过程。对于要求的答案，就相当于求这个点到根节点的距离，在维护LCT的同时就能实现。</p>","more":"<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> LCT &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rt(u) (!u || (c[fa[u]][0] != u &amp;&amp; c[fa[u]][1] != u))</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> sz[maxn];</div><div class=\"line\">    <span class=\"keyword\">int</span> fa[maxn], c[maxn][<span class=\"number\">2</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        sz[u] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(c[u][<span class=\"number\">0</span>]) sz[u] += sz[c[u][<span class=\"number\">0</span>]];</div><div class=\"line\">        <span class=\"keyword\">if</span>(c[u][<span class=\"number\">1</span>]) sz[u] += sz[c[u][<span class=\"number\">1</span>]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = fa[u], w = fa[v];</div><div class=\"line\">        <span class=\"keyword\">bool</span> t = (c[v][<span class=\"number\">1</span>] == u);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(!rt(v)) c[w][c[w][<span class=\"number\">1</span>] == v] = u;</div><div class=\"line\">        c[v][t] = c[u][t^<span class=\"number\">1</span>], fa[c[u][t^<span class=\"number\">1</span>]] = v;</div><div class=\"line\">        c[u][t^<span class=\"number\">1</span>] = v, fa[v] = u, fa[u] = w;</div><div class=\"line\"></div><div class=\"line\">        push_up(v); </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(!rt(u)) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = fa[u], w = fa[v];</div><div class=\"line\">            <span class=\"keyword\">if</span>(!rt(v)) </div><div class=\"line\">                rotate((c[v][<span class=\"number\">1</span>] == u) == (c[w][<span class=\"number\">1</span>] == v) ? v : u);</div><div class=\"line\">            rotate(u);</div><div class=\"line\">        &#125;push_up(u);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(u) &#123;</div><div class=\"line\">            splay(u);</div><div class=\"line\">            c[u][<span class=\"number\">1</span>] = v;</div><div class=\"line\">            push_up(u);</div><div class=\"line\">            u = fa[v = u];</div><div class=\"line\">        &#125;<span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123; fa[u] = v; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Grt</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        access(u); splay(u);</div><div class=\"line\">        <span class=\"keyword\">while</span>(c[u][<span class=\"number\">0</span>]) u = c[u][<span class=\"number\">0</span>];</div><div class=\"line\">        splay(u);</div><div class=\"line\">        <span class=\"keyword\">return</span> u;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> ch)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(ch) &#123;</div><div class=\"line\">            access(ch);</div><div class=\"line\"></div><div class=\"line\">            fa[ch] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c[u][<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">                fa[c[u][<span class=\"number\">0</span>]] = ch;</div><div class=\"line\">                c[ch][<span class=\"number\">0</span>] = c[u][<span class=\"number\">0</span>];</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> c[ch][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            c[u][<span class=\"number\">0</span>] = c[u][<span class=\"number\">1</span>] = fa[u] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> ch;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> t = c[u][<span class=\"number\">0</span>];</div><div class=\"line\">            c[u][<span class=\"number\">0</span>] = fa[c[u][<span class=\"number\">0</span>]] = <span class=\"number\">0</span>;</div><div class=\"line\">            c[u][<span class=\"number\">0</span>] = c[u][<span class=\"number\">1</span>] = fa[u] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> t;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">        access(u), splay(u);</div><div class=\"line\">        <span class=\"keyword\">return</span> sz[u];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> tot;</div><div class=\"line\"><span class=\"built_in\">set</span> &lt;pii&gt; S;</div><div class=\"line\"><span class=\"built_in\">set</span> &lt;pii&gt; :: iterator it1, it2;</div><div class=\"line\"><span class=\"keyword\">int</span> c[maxn][<span class=\"number\">2</span>], fa[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">    ++tot;</div><div class=\"line\"></div><div class=\"line\">    it1 = S.lower_bound(pii(x, tot));</div><div class=\"line\">    it2 = S.upper_bound(pii(x, tot));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(it1 != S.begin()) &#123;</div><div class=\"line\">        --it1;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!c[(*it1).snd][<span class=\"number\">1</span>]) &#123; </div><div class=\"line\">            fa[tot] = (*it1).snd;</div><div class=\"line\">            c[(*it1).snd][<span class=\"number\">1</span>] = tot;</div><div class=\"line\">            LCT :: link(tot, (*it1).snd);</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(it2 != S.end()) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!c[(*it2).snd][<span class=\"number\">0</span>]) &#123; </div><div class=\"line\">            fa[tot] = (*it2).snd;</div><div class=\"line\">            c[(*it2).snd][<span class=\"number\">0</span>] = tot;</div><div class=\"line\">            LCT :: link(tot, (*it2).snd);</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125;</div><div class=\"line\">    S.insert(pii(x, tot));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, LCT::query(tot));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> u, rt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splmin</span><span class=\"params\">(<span class=\"keyword\">bool</span> t)</span> </span>&#123;</div><div class=\"line\">    it1 = S.begin(); u = (*it1).snd;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, LCT::query(u));</div><div class=\"line\"></div><div class=\"line\">    rt = LCT::Grt(LCT::remove(u, c[u][<span class=\"number\">1</span>]));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(c[u][<span class=\"number\">1</span>]) &#123;</div><div class=\"line\">        fa[c[u][<span class=\"number\">1</span>]] = fa[u];</div><div class=\"line\">        c[fa[u]][<span class=\"number\">0</span>] = c[u][<span class=\"number\">1</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> c[fa[u]][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    fa[u] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!t) &#123;</div><div class=\"line\">        c[u][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(rt) &#123;</div><div class=\"line\">            fa[rt] = u;</div><div class=\"line\">            c[u][<span class=\"number\">1</span>] = rt;</div><div class=\"line\">            LCT::fa[rt] = u;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> S.erase(it1);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splmax</span><span class=\"params\">(<span class=\"keyword\">bool</span> t)</span> </span>&#123;</div><div class=\"line\">    it1 = S.end(); --it1; u = (*it1).snd;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, LCT::query(u));</div><div class=\"line\"></div><div class=\"line\">    rt = LCT::Grt(LCT::remove(u, c[u][<span class=\"number\">0</span>]));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(c[u][<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">        fa[c[u][<span class=\"number\">0</span>]] = fa[u];</div><div class=\"line\">        c[fa[u]][<span class=\"number\">1</span>] = c[u][<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> c[fa[u]][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    fa[u] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!t) &#123;</div><div class=\"line\">        c[u][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(rt) &#123;</div><div class=\"line\">            fa[rt] = u;</div><div class=\"line\">            c[u][<span class=\"number\">0</span>] = rt;</div><div class=\"line\">            LCT::fa[rt] = u;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> S.erase(it1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    freopen(<span class=\"string\">\"splay.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"splay.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> m = read();</div><div class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> op;</div><div class=\"line\">        op = read();</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) insert(read());</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) splmin(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) splmax(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">4</span>) splmin(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">5</span>) splmax(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"T2-Sf\"><a href=\"#T2-Sf\" class=\"headerlink\" title=\"T2 Sf\"></a>T2 Sf</h3><h4 id=\"Analysis-1\"><a href=\"#Analysis-1\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>&emsp;&emsp;我们可以首先利用单调栈在$O(n)$时间内求出每个$a[i]$之前值大于的第一个点$L[i]$和之后的第一个点$R[i]$,然后对每一个$a[i]$做最大值时分别统计对答案的贡献，考虑它产生q1的贡献时, 当且仅当选择的区间为$ (L[i], R[i]) $; 当它产生q2的贡献时，选择的区间为 $(j, R[i]) | j \\in (L[i], i)$ 或者 $(L[i], j) | j \\in (i, R[i])$。<br>&emsp;&emsp;那么这样之后问题就转化为一个二位数点的经典问题:如果我们将所有的区间$(l, r)$都抽象成点$(l, r)$,满足条件的点对就在询问点对的右下角，稍微麻烦的的是产生q2贡献的是一条线段，从下到上从右到左分别用主席树或者扫描线+线段树都可做。</p>\n<h4 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code:\"></a>Code:</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(a) int((a).size())</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Seg_T &#123;</div><div class=\"line\"> </div><div class=\"line\">    LL val[maxn &lt;&lt; <span class=\"number\">2</span>], add[maxn &lt;&lt; <span class=\"number\">2</span>];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc (u &lt;&lt; 1)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc (lc | 1)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) &gt;&gt; 1)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(val, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> val);</div><div class=\"line\">        <span class=\"built_in\">memset</span>(add, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> add);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(add[u]) &#123;</div><div class=\"line\">            add[lc] += add[u]; val[lc] += LL(mid-l+<span class=\"number\">1</span>) * add[u];</div><div class=\"line\">            add[rc] += add[u]; val[rc] += LL(r-mid) * add[u];</div><div class=\"line\">            add[u] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &gt; y) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= l &amp;&amp; r &lt;= y) &#123;</div><div class=\"line\">            add[u] += v;</div><div class=\"line\">            val[u] += LL(r-l+<span class=\"number\">1</span>) * v;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        push_down(u, l, r);</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) </div><div class=\"line\">            update(lc, l, mid, x, y, v);</div><div class=\"line\">        <span class=\"keyword\">if</span>(y &gt; mid) </div><div class=\"line\">            update(rc, mid+<span class=\"number\">1</span>, r, x, y, v);</div><div class=\"line\"></div><div class=\"line\">        val[u] = val[lc] + val[rc];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &gt; y) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= l &amp;&amp; r &lt;= y) <span class=\"keyword\">return</span> val[u];</div><div class=\"line\">        push_down(u, l, r);</div><div class=\"line\"></div><div class=\"line\">        LL ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) </div><div class=\"line\">            ans += query(lc, l, mid, x, y);</div><div class=\"line\">        <span class=\"keyword\">if</span>(y &gt; mid) </div><div class=\"line\">            ans += query(rc, mid+<span class=\"number\">1</span>, r, x, y);</div><div class=\"line\">        <span class=\"keyword\">return</span> ans;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, q, p1, p2;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxn], L[maxn], R[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; A[maxn];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;pii&gt; Q1[maxn], Q2[maxn], A1[maxn], A2[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> top; </div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[maxn];</div><div class=\"line\"></div><div class=\"line\">    top = <span class=\"number\">0</span>;</div><div class=\"line\">    stk[top++] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(top &gt; <span class=\"number\">1</span> &amp;&amp; a[stk[top<span class=\"number\">-1</span>]] &lt; a[i]) --top;</div><div class=\"line\">        L[i] = stk[top<span class=\"number\">-1</span>]; stk[top++] = i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    top = <span class=\"number\">0</span>;</div><div class=\"line\">    stk[top++] = n+<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(top &gt; <span class=\"number\">1</span> &amp;&amp; a[stk[top<span class=\"number\">-1</span>]] &lt; a[i]) --top;</div><div class=\"line\">        R[i] = stk[top<span class=\"number\">-1</span>]; stk[top++] = i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(L[i] &gt; <span class=\"number\">0</span> &amp;&amp; R[i] &lt;= n) A[L[i]].pb(R[i]);</div><div class=\"line\">        <span class=\"keyword\">if</span>(L[i] &gt; <span class=\"number\">0</span>) A1[L[i]].pb(pii(i+<span class=\"number\">1</span>, R[i]<span class=\"number\">-1</span>)); </div><div class=\"line\">        <span class=\"keyword\">if</span>(R[i]&lt;= n) A2[R[i]].pb(pii(L[i]+<span class=\"number\">1</span>, i<span class=\"number\">-1</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LL ans[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    freopen(<span class=\"string\">\"sf.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"sf.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"></div><div class=\"line\">    n = read(); q = read(); p1 = read(); p2 = read();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) a[i] = read();</div><div class=\"line\"></div><div class=\"line\">    init();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">        x = read(), y = read();</div><div class=\"line\">        ans[i] += (y-x) * p1;</div><div class=\"line\">        Q1[x].pb(pii(y, i));</div><div class=\"line\">        Q2[y].pb(pii(x, i));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Seg_T :: init();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(A1[i]); j++) </div><div class=\"line\">            Seg_T :: update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, A1[i][j].fst, A1[i][j].snd, p2);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(A[i]); j++)</div><div class=\"line\">            Seg_T :: update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, A[i][j], A[i][j], p1);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(Q1[i]); j++) </div><div class=\"line\">            ans[Q1[i][j].snd] += Seg_T :: query(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>, Q1[i][j].fst);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Seg_T :: init();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(A2[i]); j++) </div><div class=\"line\">            Seg_T :: update(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, A2[i][j].fst, A2[i][j].snd, p2);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; SZ(Q2[i]); j++) </div><div class=\"line\">            ans[Q2[i][j].snd] += Seg_T :: query(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, Q2[i][j].fst, n);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans[i]);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"T3-Gift\"><a href=\"#T3-Gift\" class=\"headerlink\" title=\"T3 Gift\"></a>T3 Gift</h3><h4 id=\"Analysis-2\"><a href=\"#Analysis-2\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>&emsp;&emsp;本质是求一个旋转方式，最小化：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align} \n\\sum_{i=1}^{n} (x_i-y_i+c) ^ {2} &= \\sum_{i=1}^{n} (x_i-y_i)^{2} + 2c\\sum_{i=1}^{n} (x_i-y_i) + nc^2 \\\\\n&= \\sum_{i=1}^{n} x_i^2 + \\sum_{i=1}^{n} y_i^2 - 2\\sum_{i=1}^{n} x_iy_i + 2c\\sum_{i=1}^{n} (x_i - y_i) + nc^2 \n\\end{align}</script><p>&emsp;&emsp;后面与c相关的部分就是一个二次函数，前面的两项是常数，那么我们的目标就变成了最大化:</p>\n<script type=\"math/tex; mode=display\">k \\in [0, n)\\ \\ \\  \\sum_{i=1}^{n} x_iy_{i+k} | y_i = y_{i\\ mod\\ n}</script><p>&emsp;&emsp; 我们将x对应的数列翻转,则原式变为：</p>\n<script type=\"math/tex; mode=display\">\\sum_{i=1}^{n} x_{n-i+1}\\ y_{i+k}</script><p>&emsp;&emsp; 不难发现对于一个给定的k，其中每一项x与y的下标之和模n同余，循环卷积即可。</p>\n<h4 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code:\"></a>Code:</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = INT_MAX;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> base, dis;</div><div class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(base = <span class=\"number\">1</span>; base &lt;= N; base &lt;&lt;= <span class=\"number\">1</span>) ++dis;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) </div><div class=\"line\">        rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (dis<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; x[], <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= N; l &lt;&lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; wn(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*PI/l), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*PI*type/l));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i += l) &#123;</div><div class=\"line\">            <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; w(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (l &gt;&gt; <span class=\"number\">1</span>); j++, w *= wn) &#123;</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; L = x[i + j];</div><div class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; R = x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] * w;</div><div class=\"line\">                x[i + j] = L + R;</div><div class=\"line\">                x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] = L - R;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n;</div><div class=\"line\"><span class=\"keyword\">int</span> a[maxn], b[maxn];</div><div class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; da[maxn], db[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    freopen(<span class=\"string\">\"gift.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"gift.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"></div><div class=\"line\">    n = read(); read();</div><div class=\"line\">    init(<span class=\"number\">2</span> * n);</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>, B = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) a[i] = read(), ans += <span class=\"number\">1L</span>L*a[i]*a[i], B += a[i];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) b[i] = read(), ans += <span class=\"number\">1L</span>L*b[i]*b[i], B -= b[i];</div><div class=\"line\"></div><div class=\"line\">    B *= <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k = (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>) <span class=\"built_in\">floor</span>(<span class=\"keyword\">double</span>(-B)/(<span class=\"number\">2</span>*n) + <span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\">    ans += (n * k * k + k * B);</div><div class=\"line\"></div><div class=\"line\">    reverse(b, b + n);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) da[i] = a[i], db[i] = b[i];</div><div class=\"line\"></div><div class=\"line\">    DFT(da, base, <span class=\"number\">1</span>);</div><div class=\"line\">    DFT(db, base, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) da[i] *= db[i];</div><div class=\"line\">    DFT(da, base, <span class=\"number\">-1</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = -oo;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) da[i] += da[i+n];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) tmp = max(tmp, <span class=\"keyword\">int</span>((da[i].real()/base) + <span class=\"number\">0.5</span>));</div><div class=\"line\"></div><div class=\"line\">    ans -= tmp * <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"NOI2016 网格","_content":"\n### Problem\n\n&emsp;&emsp;给出一个 $ N \\times M $ 的网格图和图上的 $ C $ 个障碍物，求最少删去多少个点可使得原图空格不四连通。\n\n$ N, M <= 1e9, C <= 1e5 $\n\n<!--more-->\n\n### Analysis\n\n&emsp;&emsp;通过简单的分析我们可以发现，对于要求的答案，可能的结果只有 $ \\{ -1, 0, 1, 2 \\} $ 几种。\n&emsp;&emsp;那么可以先考虑一些简单的情况，比如等于 $-1, 0$ 时候的可能的情形。\n\n&emsp;&emsp;首先，当答案等于 $ -1 $ 时，显然要么原来的矩阵中不存在两个以上的点，要么恰好有两个点并且这两个点是相邻的。\n&emsp;&emsp;那么这个情况我们直接考虑 $ n * m $ 与 $ c $ 之间的关系，然后若恰有两个点是空格，则判断他们是否联通。\n\n&emsp;&emsp;然后讨论答案为 $ 0 $ 时的情况。\n&emsp;&emsp;显然这时候原图不连通......\n\n&emsp;&emsp;那么接下来就只需要知道答案是否为 $ 1 $ 就可以了。\n&emsp;&emsp;发现答案等于$ 1 $当且仅当原图在四联通的意义下存在割点，如果是暴力的话不难做到 $ n * m $,。\n\n&emsp;&emsp;然而只是这样还不够，我们发现找割点的过程中存在大量无意义的空格，那么如何避免这样的情况呢？\n&emsp;&emsp;我们可以将每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来，然后在这些点中找出一个到最近的障碍曼哈顿距离不超过 $1$ 的割点。 这样的点就一定是原图中的割点，注意特判一些情况。\n\n### Code\n\n写了一些很丑的东西，我也不知道代码怎么这么长的... :(\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\n#define fst first\n#define snd second\n#define pb push_back\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\nconst int maxn = 2.5e6 + 10;\nconst int oo = 0x3f3f3f3f;\n\ntemplate<typename T> T read() {\n\tT n = 0, f = 1;\n\tchar ch = getchar();\n\tfor( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n\treturn n * f;\n}\n\nstruct Hash_Map {\n    static const int mod = 1666667;\n\n    int cnt = 0;\n    int st[mod], nxt[maxn], X[maxn], Y[maxn];\n\n    inline void clear() {\n        cnt = 0;\n        memset(st, 0, sizeof st);\n    }\n    inline int idx(int x, int y) {\n        return ((233LL*x + (y^888))%mod + mod)%mod;\n    }\n    int find(int x, int y) {\n        int u = idx(x, y);\n        for(int i = st[u]; i; i = nxt[i]) \n            if(X[i] == x && Y[i] == y) \n                return i;\n        return -1;\n    }\n    int insert(int x, int y) {\n        int u = idx(x, y);\n\n        for(int i = st[u]; i; i = nxt[i]) \n            if(X[i] == x && Y[i] == y) \n                return i;\n\n        ++ cnt;\n        X[cnt] = x, Y[cnt] = y;\n        nxt[cnt] = st[u]; st[u] = cnt;\n        return cnt;\n    }\n}HM;\n\nLL n, m, c;\nconst int dx[] = { 0, 1, 0, -1, 1, -1, 1, -1 };\nconst int dy[] = { 1, 0, -1, 0, 1, -1, -1, 1 };\n\nint st[maxn], nxt[maxn << 3], to[maxn << 3], ecnt = 1;\nvoid addedge(int x, int y) { \n    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;\n    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;\n}\n\nint vis[maxn];\nint mark[maxn], now = 0;\n\nvoid init() {\n    ecnt = 1;\n    HM.clear();\n    memset(st, 0, sizeof st);\n}\n\nint flood_fill(int u) {\n    int res = 1;\n    mark[u] = now;\n    for(int i = st[u], v; i; i = nxt[i]) if(mark[v = to[i]] != now) \n        res += flood_fill(v);\n    return res;\n}\n\nint area_count(int s) { return ++ now, flood_fill(s); }\n\nint chk() {\n    if(n*m-c < 2) return -1;\n    int res = area_count(c + 1);\n    if(n*m == 2 || (res == 2 && n*m-c == 2)) return -1;\n    return -2;\n}\n\nbool flag;\nint dfn[maxn], low[maxn], dfs_clock = 0;\nbool dfs(int u, int fa, bool f = false) {\n    low[u] = dfn[u] = ++dfs_clock;\n\n    for(int i = st[u], v; i; i = nxt[i]) if((v = to[i]) ^ fa) {\n        if(!dfn[v]) {\n            if(dfs(v, u)) return true;\n\n            if(vis[u] == 1 && (low[v] > dfn[u] || (!f && low[v] == dfn[u]))) {\n                return true;\n            }\n            chkmin(low[u], low[v]);\n        }else chkmin(low[u], dfn[v]);\n    }\n}\n\nbool chk1() {\n    flag = 0;\n    memset(dfn, dfs_clock = 0, sizeof dfn);\n\n    for(int i = c+1; i <= HM.cnt; i++) if(!dfn[i]) {\n        if(dfs(i, 0, 1)) return 1;\n    }\n    return 0;\n}\n\n#define x(i) HM.X[i]\n#define y(i) HM.Y[i]\n\n//char ch[1000][1000];\nint X[maxn], Y[maxn], idx[maxn];\nbool chk0() {\n    memset(idx, 0, sizeof idx);\n    memset(vis, 0, sizeof vis);\n\n    for(int i = 1; i <= c; i++) HM.insert(X[i], Y[i]);\n    for(int v = 1; v <= c; v++) if(!vis[v]) {\n        vector<int> V;\n        static int q[maxn];\n        int head = 0, tail = 0;\n\n        ecnt = 1;\n        vis[q[tail++] = v] = 3;\n        while(head < tail) {\n            int h = q[head++];\n            for(int i = 0; i < 8; i++) {\n                int nx = x(h) + dx[i];\n                int ny = y(h) + dy[i];\n\n                if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                    int Nxt = HM.insert(nx, ny);\n\n                    st[Nxt] = 0;\n                    if(Nxt <= c) {\n                        if(!vis[Nxt]) {\n                            vis[Nxt] = 3;\n                            q[tail++] = Nxt;\n                        }\n                    }else if(idx[Nxt] != v) {\n                        idx[Nxt] = v, V.pb(Nxt);\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < int(V.size()); i++) {\n            int u = V[i];\n            for(int j = 0; j < 2; j++) {\n                int nx = x(u) + dx[j];\n                int ny = y(u) + dy[j];\n\n                if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                    int Nxt = HM.find(nx, ny);\n                    if(idx[Nxt] == v) addedge(u, Nxt);\n                }\n            }\n        }\n\n        if(V.size() && area_count(V[0]) != int(V.size()))\n            return true;\n    }\n    return false;\n}\n\n\nvoid build() {\n    memset(vis, 0, sizeof vis);\n\n    int tail = 0;\n    static int q[maxn];\n\n    for(int i = 1; i <= c; i++) \n        HM.insert(X[i], Y[i]), vis[i] = 3;\n\n    for(int i = 1; i <= c; i++)\n        for(int j = 0; j < 8; j++) {\n            int nx = X[i] + dx[j];\n            int ny = Y[i] + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.insert(nx, ny);\n\n                if(!vis[Nxt]) {\n                    vis[Nxt] = 1;\n                    q[tail++] = Nxt;\n                }\n            }\n        }\n\n    int lim = tail;\n    for(int i = 0; i < lim; i++) {\n        for(int j = 0; j < 8; j++) {\n            int nx = x(q[i]) + dx[j];\n            int ny = y(q[i]) + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.insert(nx, ny);\n                if(!vis[Nxt]) {\n                    vis[Nxt] = 2;\n                    q[tail++] = Nxt;\n                }\n            }\n        }\n    }\n\n    for(int i = 0; i < tail; i++) {\n        for(int j = 0; j < 2; j++) {\n            int nx = x(q[i]) + dx[j];\n            int ny = y(q[i]) + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.find(nx, ny);\n                if(Nxt > c) addedge(q[i], Nxt);\n            }\n        }\n    }\n}\n\nint spe() {\n\n    int res = 0;\n    if(n == 1) {\n        Y[++c] = 0; Y[++c] = m+1; sort(Y+1, Y+c+1);\n        for(int i = 2; i <= c; i++) if(Y[i] - Y[i-1] > 1) ++ res;\n    }else {\n        X[++c] = 0; X[++c] = n+1; sort(X+1, X+c+1);\n        for(int i = 2; i <= c; i++) if(X[i] - X[i-1] > 1) ++ res;\n    }\n    return res >= 2 ? 0 : 1;\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    for(int T = read<int>(); T--; ) {\n\n        init();\n\n        n = read<int>();\n        m = read<int>();\n        c = read<int>();\n\n        for(int i = 1; i <= c; i++) {\n            X[i] = read<int>();\n            Y[i] = read<int>();\n        }\n\n        if(chk0()) {\n            puts(\"0\");\n            continue;\n        }\n\n        init();\n        build();\n\n        static int ans;\n        if((ans = chk()) != -2) { }\n        else if(min(n, m) == 1) { ans = spe(); }\n        else {\n            ans = chk1() ? 1 : 2;\n            if(c == 0) ans = min(n, m) == 1 ? 1 : 2;\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n\n```\n","source":"_drafts/NOI2016-d1t2.md","raw":"---\ntitle: NOI2016 网格\ntags:\n    - Graph Theory\n---\n\n### Problem\n\n&emsp;&emsp;给出一个 $ N \\times M $ 的网格图和图上的 $ C $ 个障碍物，求最少删去多少个点可使得原图空格不四连通。\n\n$ N, M <= 1e9, C <= 1e5 $\n\n<!--more-->\n\n### Analysis\n\n&emsp;&emsp;通过简单的分析我们可以发现，对于要求的答案，可能的结果只有 $ \\{ -1, 0, 1, 2 \\} $ 几种。\n&emsp;&emsp;那么可以先考虑一些简单的情况，比如等于 $-1, 0$ 时候的可能的情形。\n\n&emsp;&emsp;首先，当答案等于 $ -1 $ 时，显然要么原来的矩阵中不存在两个以上的点，要么恰好有两个点并且这两个点是相邻的。\n&emsp;&emsp;那么这个情况我们直接考虑 $ n * m $ 与 $ c $ 之间的关系，然后若恰有两个点是空格，则判断他们是否联通。\n\n&emsp;&emsp;然后讨论答案为 $ 0 $ 时的情况。\n&emsp;&emsp;显然这时候原图不连通......\n\n&emsp;&emsp;那么接下来就只需要知道答案是否为 $ 1 $ 就可以了。\n&emsp;&emsp;发现答案等于$ 1 $当且仅当原图在四联通的意义下存在割点，如果是暴力的话不难做到 $ n * m $,。\n\n&emsp;&emsp;然而只是这样还不够，我们发现找割点的过程中存在大量无意义的空格，那么如何避免这样的情况呢？\n&emsp;&emsp;我们可以将每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来，然后在这些点中找出一个到最近的障碍曼哈顿距离不超过 $1$ 的割点。 这样的点就一定是原图中的割点，注意特判一些情况。\n\n### Code\n\n写了一些很丑的东西，我也不知道代码怎么这么长的... :(\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\n#define fst first\n#define snd second\n#define pb push_back\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\nconst int maxn = 2.5e6 + 10;\nconst int oo = 0x3f3f3f3f;\n\ntemplate<typename T> T read() {\n\tT n = 0, f = 1;\n\tchar ch = getchar();\n\tfor( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n\treturn n * f;\n}\n\nstruct Hash_Map {\n    static const int mod = 1666667;\n\n    int cnt = 0;\n    int st[mod], nxt[maxn], X[maxn], Y[maxn];\n\n    inline void clear() {\n        cnt = 0;\n        memset(st, 0, sizeof st);\n    }\n    inline int idx(int x, int y) {\n        return ((233LL*x + (y^888))%mod + mod)%mod;\n    }\n    int find(int x, int y) {\n        int u = idx(x, y);\n        for(int i = st[u]; i; i = nxt[i]) \n            if(X[i] == x && Y[i] == y) \n                return i;\n        return -1;\n    }\n    int insert(int x, int y) {\n        int u = idx(x, y);\n\n        for(int i = st[u]; i; i = nxt[i]) \n            if(X[i] == x && Y[i] == y) \n                return i;\n\n        ++ cnt;\n        X[cnt] = x, Y[cnt] = y;\n        nxt[cnt] = st[u]; st[u] = cnt;\n        return cnt;\n    }\n}HM;\n\nLL n, m, c;\nconst int dx[] = { 0, 1, 0, -1, 1, -1, 1, -1 };\nconst int dy[] = { 1, 0, -1, 0, 1, -1, -1, 1 };\n\nint st[maxn], nxt[maxn << 3], to[maxn << 3], ecnt = 1;\nvoid addedge(int x, int y) { \n    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;\n    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;\n}\n\nint vis[maxn];\nint mark[maxn], now = 0;\n\nvoid init() {\n    ecnt = 1;\n    HM.clear();\n    memset(st, 0, sizeof st);\n}\n\nint flood_fill(int u) {\n    int res = 1;\n    mark[u] = now;\n    for(int i = st[u], v; i; i = nxt[i]) if(mark[v = to[i]] != now) \n        res += flood_fill(v);\n    return res;\n}\n\nint area_count(int s) { return ++ now, flood_fill(s); }\n\nint chk() {\n    if(n*m-c < 2) return -1;\n    int res = area_count(c + 1);\n    if(n*m == 2 || (res == 2 && n*m-c == 2)) return -1;\n    return -2;\n}\n\nbool flag;\nint dfn[maxn], low[maxn], dfs_clock = 0;\nbool dfs(int u, int fa, bool f = false) {\n    low[u] = dfn[u] = ++dfs_clock;\n\n    for(int i = st[u], v; i; i = nxt[i]) if((v = to[i]) ^ fa) {\n        if(!dfn[v]) {\n            if(dfs(v, u)) return true;\n\n            if(vis[u] == 1 && (low[v] > dfn[u] || (!f && low[v] == dfn[u]))) {\n                return true;\n            }\n            chkmin(low[u], low[v]);\n        }else chkmin(low[u], dfn[v]);\n    }\n}\n\nbool chk1() {\n    flag = 0;\n    memset(dfn, dfs_clock = 0, sizeof dfn);\n\n    for(int i = c+1; i <= HM.cnt; i++) if(!dfn[i]) {\n        if(dfs(i, 0, 1)) return 1;\n    }\n    return 0;\n}\n\n#define x(i) HM.X[i]\n#define y(i) HM.Y[i]\n\n//char ch[1000][1000];\nint X[maxn], Y[maxn], idx[maxn];\nbool chk0() {\n    memset(idx, 0, sizeof idx);\n    memset(vis, 0, sizeof vis);\n\n    for(int i = 1; i <= c; i++) HM.insert(X[i], Y[i]);\n    for(int v = 1; v <= c; v++) if(!vis[v]) {\n        vector<int> V;\n        static int q[maxn];\n        int head = 0, tail = 0;\n\n        ecnt = 1;\n        vis[q[tail++] = v] = 3;\n        while(head < tail) {\n            int h = q[head++];\n            for(int i = 0; i < 8; i++) {\n                int nx = x(h) + dx[i];\n                int ny = y(h) + dy[i];\n\n                if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                    int Nxt = HM.insert(nx, ny);\n\n                    st[Nxt] = 0;\n                    if(Nxt <= c) {\n                        if(!vis[Nxt]) {\n                            vis[Nxt] = 3;\n                            q[tail++] = Nxt;\n                        }\n                    }else if(idx[Nxt] != v) {\n                        idx[Nxt] = v, V.pb(Nxt);\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < int(V.size()); i++) {\n            int u = V[i];\n            for(int j = 0; j < 2; j++) {\n                int nx = x(u) + dx[j];\n                int ny = y(u) + dy[j];\n\n                if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                    int Nxt = HM.find(nx, ny);\n                    if(idx[Nxt] == v) addedge(u, Nxt);\n                }\n            }\n        }\n\n        if(V.size() && area_count(V[0]) != int(V.size()))\n            return true;\n    }\n    return false;\n}\n\n\nvoid build() {\n    memset(vis, 0, sizeof vis);\n\n    int tail = 0;\n    static int q[maxn];\n\n    for(int i = 1; i <= c; i++) \n        HM.insert(X[i], Y[i]), vis[i] = 3;\n\n    for(int i = 1; i <= c; i++)\n        for(int j = 0; j < 8; j++) {\n            int nx = X[i] + dx[j];\n            int ny = Y[i] + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.insert(nx, ny);\n\n                if(!vis[Nxt]) {\n                    vis[Nxt] = 1;\n                    q[tail++] = Nxt;\n                }\n            }\n        }\n\n    int lim = tail;\n    for(int i = 0; i < lim; i++) {\n        for(int j = 0; j < 8; j++) {\n            int nx = x(q[i]) + dx[j];\n            int ny = y(q[i]) + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.insert(nx, ny);\n                if(!vis[Nxt]) {\n                    vis[Nxt] = 2;\n                    q[tail++] = Nxt;\n                }\n            }\n        }\n    }\n\n    for(int i = 0; i < tail; i++) {\n        for(int j = 0; j < 2; j++) {\n            int nx = x(q[i]) + dx[j];\n            int ny = y(q[i]) + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.find(nx, ny);\n                if(Nxt > c) addedge(q[i], Nxt);\n            }\n        }\n    }\n}\n\nint spe() {\n\n    int res = 0;\n    if(n == 1) {\n        Y[++c] = 0; Y[++c] = m+1; sort(Y+1, Y+c+1);\n        for(int i = 2; i <= c; i++) if(Y[i] - Y[i-1] > 1) ++ res;\n    }else {\n        X[++c] = 0; X[++c] = n+1; sort(X+1, X+c+1);\n        for(int i = 2; i <= c; i++) if(X[i] - X[i-1] > 1) ++ res;\n    }\n    return res >= 2 ? 0 : 1;\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    for(int T = read<int>(); T--; ) {\n\n        init();\n\n        n = read<int>();\n        m = read<int>();\n        c = read<int>();\n\n        for(int i = 1; i <= c; i++) {\n            X[i] = read<int>();\n            Y[i] = read<int>();\n        }\n\n        if(chk0()) {\n            puts(\"0\");\n            continue;\n        }\n\n        init();\n        build();\n\n        static int ans;\n        if((ans = chk()) != -2) { }\n        else if(min(n, m) == 1) { ans = spe(); }\n        else {\n            ans = chk1() ? 1 : 2;\n            if(c == 0) ans = min(n, m) == 1 ? 1 : 2;\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n\n```\n","slug":"NOI2016-d1t2","published":0,"date":"2017-12-06T14:02:45.527Z","updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5ckv0004onisnff50lx7","content":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h3><p>&emsp;&emsp;给出一个 $ N \\times M $ 的网格图和图上的 $ C $ 个障碍物，求最少删去多少个点可使得原图空格不四连通。</p>\n<p>$ N, M &lt;= 1e9, C &lt;= 1e5 $</p>\n<a id=\"more\"></a>\n<h3 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h3><p>&emsp;&emsp;通过简单的分析我们可以发现，对于要求的答案，可能的结果只有 $ \\{ -1, 0, 1, 2 \\} $ 几种。<br>&emsp;&emsp;那么可以先考虑一些简单的情况，比如等于 $-1, 0$ 时候的可能的情形。</p>\n<p>&emsp;&emsp;首先，当答案等于 $ -1 $ 时，显然要么原来的矩阵中不存在两个以上的点，要么恰好有两个点并且这两个点是相邻的。<br>&emsp;&emsp;那么这个情况我们直接考虑 $ n * m $ 与 $ c $ 之间的关系，然后若恰有两个点是空格，则判断他们是否联通。</p>\n<p>&emsp;&emsp;然后讨论答案为 $ 0 $ 时的情况。<br>&emsp;&emsp;显然这时候原图不连通……</p>\n<p>&emsp;&emsp;那么接下来就只需要知道答案是否为 $ 1 $ 就可以了。<br>&emsp;&emsp;发现答案等于$ 1 $当且仅当原图在四联通的意义下存在割点，如果是暴力的话不难做到 $ n * m $,。</p>\n<p>&emsp;&emsp;然而只是这样还不够，我们发现找割点的过程中存在大量无意义的空格，那么如何避免这样的情况呢？<br>&emsp;&emsp;我们可以将每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来，然后在这些点中找出一个到最近的障碍曼哈顿距离不超过 $1$ 的割点。 这样的点就一定是原图中的割点，注意特判一些情况。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>写了一些很丑的东西，我也不知道代码怎么这么长的… :(</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2.5e6</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tT n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Hash_Map</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1666667</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> st[mod], nxt[maxn], X[maxn], Y[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> st);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">idx</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((<span class=\"number\">233L</span>L*x + (y^<span class=\"number\">888</span>))%mod + mod)%mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = idx(x, y);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = idx(x, y);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\"></div><div class=\"line\">        ++ cnt;</div><div class=\"line\">        X[cnt] = x, Y[cnt] = y;</div><div class=\"line\">        nxt[cnt] = st[u]; st[u] = cnt;</div><div class=\"line\">        <span class=\"keyword\">return</span> cnt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;HM;</div><div class=\"line\"></div><div class=\"line\">LL n, m, c;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dy[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> st[maxn], nxt[maxn &lt;&lt; <span class=\"number\">3</span>], to[maxn &lt;&lt; <span class=\"number\">3</span>], ecnt = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; </div><div class=\"line\">    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;</div><div class=\"line\">    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</div><div class=\"line\"><span class=\"keyword\">int</span> mark[maxn], now = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ecnt = <span class=\"number\">1</span>;</div><div class=\"line\">    HM.clear();</div><div class=\"line\">    <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> st);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">flood_fill</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</div><div class=\"line\">    mark[u] = now;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u], v; i; i = nxt[i]) <span class=\"keyword\">if</span>(mark[v = to[i]] != now) </div><div class=\"line\">        res += flood_fill(v);</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">area_count</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123; <span class=\"keyword\">return</span> ++ now, flood_fill(s); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n*m-c &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = area_count(c + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(n*m == <span class=\"number\">2</span> || (res == <span class=\"number\">2</span> &amp;&amp; n*m-c == <span class=\"number\">2</span>)) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> flag;</div><div class=\"line\"><span class=\"keyword\">int</span> dfn[maxn], low[maxn], dfs_clock = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa, <span class=\"keyword\">bool</span> f = <span class=\"literal\">false</span>)</span> </span>&#123;</div><div class=\"line\">    low[u] = dfn[u] = ++dfs_clock;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u], v; i; i = nxt[i]) <span class=\"keyword\">if</span>((v = to[i]) ^ fa) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!dfn[v]) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(dfs(v, u)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(vis[u] == <span class=\"number\">1</span> &amp;&amp; (low[v] &gt; dfn[u] || (!f &amp;&amp; low[v] == dfn[u]))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chkmin(low[u], low[v]);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> chkmin(low[u], dfn[v]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chk1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(dfn, dfs_clock = <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> dfn);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c+<span class=\"number\">1</span>; i &lt;= HM.cnt; i++) <span class=\"keyword\">if</span>(!dfn[i]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(dfs(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x(i) HM.X[i]</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y(i) HM.Y[i]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//char ch[1000][1000];</span></div><div class=\"line\"><span class=\"keyword\">int</span> X[maxn], Y[maxn], idx[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chk0</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(idx, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> idx);</div><div class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) HM.insert(X[i], Y[i]);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt;= c; v++) <span class=\"keyword\">if</span>(!vis[v]) &#123;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</div><div class=\"line\">        <span class=\"keyword\">int</span> head = <span class=\"number\">0</span>, tail = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        ecnt = <span class=\"number\">1</span>;</div><div class=\"line\">        vis[q[tail++] = v] = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(head &lt; tail) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> h = q[head++];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nx = x(h) + dx[i];</div><div class=\"line\">                <span class=\"keyword\">int</span> ny = y(h) + dy[i];</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\"></div><div class=\"line\">                    st[Nxt] = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(Nxt &lt;= c) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                            vis[Nxt] = <span class=\"number\">3</span>;</div><div class=\"line\">                            q[tail++] = Nxt;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(idx[Nxt] != v) &#123;</div><div class=\"line\">                        idx[Nxt] = v, V.pb(Nxt);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(V.size()); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> u = V[i];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nx = x(u) + dx[j];</div><div class=\"line\">                <span class=\"keyword\">int</span> ny = y(u) + dy[j];</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> Nxt = HM.find(nx, ny);</div><div class=\"line\">                    <span class=\"keyword\">if</span>(idx[Nxt] == v) addedge(u, Nxt);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(V.size() &amp;&amp; area_count(V[<span class=\"number\">0</span>]) != <span class=\"keyword\">int</span>(V.size()))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> tail = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) </div><div class=\"line\">        HM.insert(X[i], Y[i]), vis[i] = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = X[i] + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = Y[i] + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                    vis[Nxt] = <span class=\"number\">1</span>;</div><div class=\"line\">                    q[tail++] = Nxt;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> lim = tail;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lim; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = x(q[i]) + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = y(q[i]) + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\">                <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                    vis[Nxt] = <span class=\"number\">2</span>;</div><div class=\"line\">                    q[tail++] = Nxt;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tail; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = x(q[i]) + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = y(q[i]) + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.find(nx, ny);</div><div class=\"line\">                <span class=\"keyword\">if</span>(Nxt &gt; c) addedge(q[i], Nxt);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        Y[++c] = <span class=\"number\">0</span>; Y[++c] = m+<span class=\"number\">1</span>; sort(Y+<span class=\"number\">1</span>, Y+c+<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= c; i++) <span class=\"keyword\">if</span>(Y[i] - Y[i<span class=\"number\">-1</span>] &gt; <span class=\"number\">1</span>) ++ res;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        X[++c] = <span class=\"number\">0</span>; X[++c] = n+<span class=\"number\">1</span>; sort(X+<span class=\"number\">1</span>, X+c+<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= c; i++) <span class=\"keyword\">if</span>(X[i] - X[i<span class=\"number\">-1</span>] &gt; <span class=\"number\">1</span>) ++ res;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res &gt;= <span class=\"number\">2</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = read&lt;<span class=\"keyword\">int</span>&gt;(); T--; ) &#123;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\"></div><div class=\"line\">        n = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        m = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        c = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) &#123;</div><div class=\"line\">            X[i] = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">            Y[i] = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(chk0()) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\">        build();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans;</div><div class=\"line\">        <span class=\"keyword\">if</span>((ans = chk()) != <span class=\"number\">-2</span>) &#123; &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(min(n, m) == <span class=\"number\">1</span>) &#123; ans = spe(); &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ans = chk1() ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"number\">0</span>) ans = min(n, m) == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h3><p>&emsp;&emsp;给出一个 $ N \\times M $ 的网格图和图上的 $ C $ 个障碍物，求最少删去多少个点可使得原图空格不四连通。</p>\n<p>$ N, M &lt;= 1e9, C &lt;= 1e5 $</p>","more":"<h3 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h3><p>&emsp;&emsp;通过简单的分析我们可以发现，对于要求的答案，可能的结果只有 $ \\{ -1, 0, 1, 2 \\} $ 几种。<br>&emsp;&emsp;那么可以先考虑一些简单的情况，比如等于 $-1, 0$ 时候的可能的情形。</p>\n<p>&emsp;&emsp;首先，当答案等于 $ -1 $ 时，显然要么原来的矩阵中不存在两个以上的点，要么恰好有两个点并且这两个点是相邻的。<br>&emsp;&emsp;那么这个情况我们直接考虑 $ n * m $ 与 $ c $ 之间的关系，然后若恰有两个点是空格，则判断他们是否联通。</p>\n<p>&emsp;&emsp;然后讨论答案为 $ 0 $ 时的情况。<br>&emsp;&emsp;显然这时候原图不连通……</p>\n<p>&emsp;&emsp;那么接下来就只需要知道答案是否为 $ 1 $ 就可以了。<br>&emsp;&emsp;发现答案等于$ 1 $当且仅当原图在四联通的意义下存在割点，如果是暴力的话不难做到 $ n * m $,。</p>\n<p>&emsp;&emsp;然而只是这样还不够，我们发现找割点的过程中存在大量无意义的空格，那么如何避免这样的情况呢？<br>&emsp;&emsp;我们可以将每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来，然后在这些点中找出一个到最近的障碍曼哈顿距离不超过 $1$ 的割点。 这样的点就一定是原图中的割点，注意特判一些情况。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>写了一些很丑的东西，我也不知道代码怎么这么长的… :(</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2.5e6</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tT n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Hash_Map</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1666667</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> st[mod], nxt[maxn], X[maxn], Y[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> st);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">idx</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((<span class=\"number\">233L</span>L*x + (y^<span class=\"number\">888</span>))%mod + mod)%mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = idx(x, y);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = idx(x, y);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\"></div><div class=\"line\">        ++ cnt;</div><div class=\"line\">        X[cnt] = x, Y[cnt] = y;</div><div class=\"line\">        nxt[cnt] = st[u]; st[u] = cnt;</div><div class=\"line\">        <span class=\"keyword\">return</span> cnt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;HM;</div><div class=\"line\"></div><div class=\"line\">LL n, m, c;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dy[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> st[maxn], nxt[maxn &lt;&lt; <span class=\"number\">3</span>], to[maxn &lt;&lt; <span class=\"number\">3</span>], ecnt = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; </div><div class=\"line\">    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;</div><div class=\"line\">    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</div><div class=\"line\"><span class=\"keyword\">int</span> mark[maxn], now = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ecnt = <span class=\"number\">1</span>;</div><div class=\"line\">    HM.clear();</div><div class=\"line\">    <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> st);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">flood_fill</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</div><div class=\"line\">    mark[u] = now;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u], v; i; i = nxt[i]) <span class=\"keyword\">if</span>(mark[v = to[i]] != now) </div><div class=\"line\">        res += flood_fill(v);</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">area_count</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123; <span class=\"keyword\">return</span> ++ now, flood_fill(s); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n*m-c &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = area_count(c + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(n*m == <span class=\"number\">2</span> || (res == <span class=\"number\">2</span> &amp;&amp; n*m-c == <span class=\"number\">2</span>)) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> flag;</div><div class=\"line\"><span class=\"keyword\">int</span> dfn[maxn], low[maxn], dfs_clock = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa, <span class=\"keyword\">bool</span> f = <span class=\"literal\">false</span>)</span> </span>&#123;</div><div class=\"line\">    low[u] = dfn[u] = ++dfs_clock;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u], v; i; i = nxt[i]) <span class=\"keyword\">if</span>((v = to[i]) ^ fa) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!dfn[v]) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(dfs(v, u)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(vis[u] == <span class=\"number\">1</span> &amp;&amp; (low[v] &gt; dfn[u] || (!f &amp;&amp; low[v] == dfn[u]))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chkmin(low[u], low[v]);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> chkmin(low[u], dfn[v]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chk1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(dfn, dfs_clock = <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> dfn);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c+<span class=\"number\">1</span>; i &lt;= HM.cnt; i++) <span class=\"keyword\">if</span>(!dfn[i]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(dfs(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x(i) HM.X[i]</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y(i) HM.Y[i]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//char ch[1000][1000];</span></div><div class=\"line\"><span class=\"keyword\">int</span> X[maxn], Y[maxn], idx[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chk0</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(idx, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> idx);</div><div class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) HM.insert(X[i], Y[i]);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt;= c; v++) <span class=\"keyword\">if</span>(!vis[v]) &#123;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</div><div class=\"line\">        <span class=\"keyword\">int</span> head = <span class=\"number\">0</span>, tail = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        ecnt = <span class=\"number\">1</span>;</div><div class=\"line\">        vis[q[tail++] = v] = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(head &lt; tail) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> h = q[head++];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nx = x(h) + dx[i];</div><div class=\"line\">                <span class=\"keyword\">int</span> ny = y(h) + dy[i];</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\"></div><div class=\"line\">                    st[Nxt] = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(Nxt &lt;= c) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                            vis[Nxt] = <span class=\"number\">3</span>;</div><div class=\"line\">                            q[tail++] = Nxt;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(idx[Nxt] != v) &#123;</div><div class=\"line\">                        idx[Nxt] = v, V.pb(Nxt);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(V.size()); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> u = V[i];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nx = x(u) + dx[j];</div><div class=\"line\">                <span class=\"keyword\">int</span> ny = y(u) + dy[j];</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> Nxt = HM.find(nx, ny);</div><div class=\"line\">                    <span class=\"keyword\">if</span>(idx[Nxt] == v) addedge(u, Nxt);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(V.size() &amp;&amp; area_count(V[<span class=\"number\">0</span>]) != <span class=\"keyword\">int</span>(V.size()))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> tail = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) </div><div class=\"line\">        HM.insert(X[i], Y[i]), vis[i] = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = X[i] + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = Y[i] + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                    vis[Nxt] = <span class=\"number\">1</span>;</div><div class=\"line\">                    q[tail++] = Nxt;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> lim = tail;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lim; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = x(q[i]) + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = y(q[i]) + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\">                <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                    vis[Nxt] = <span class=\"number\">2</span>;</div><div class=\"line\">                    q[tail++] = Nxt;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tail; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = x(q[i]) + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = y(q[i]) + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.find(nx, ny);</div><div class=\"line\">                <span class=\"keyword\">if</span>(Nxt &gt; c) addedge(q[i], Nxt);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        Y[++c] = <span class=\"number\">0</span>; Y[++c] = m+<span class=\"number\">1</span>; sort(Y+<span class=\"number\">1</span>, Y+c+<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= c; i++) <span class=\"keyword\">if</span>(Y[i] - Y[i<span class=\"number\">-1</span>] &gt; <span class=\"number\">1</span>) ++ res;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        X[++c] = <span class=\"number\">0</span>; X[++c] = n+<span class=\"number\">1</span>; sort(X+<span class=\"number\">1</span>, X+c+<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= c; i++) <span class=\"keyword\">if</span>(X[i] - X[i<span class=\"number\">-1</span>] &gt; <span class=\"number\">1</span>) ++ res;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res &gt;= <span class=\"number\">2</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = read&lt;<span class=\"keyword\">int</span>&gt;(); T--; ) &#123;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\"></div><div class=\"line\">        n = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        m = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        c = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) &#123;</div><div class=\"line\">            X[i] = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">            Y[i] = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(chk0()) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\">        build();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans;</div><div class=\"line\">        <span class=\"keyword\">if</span>((ans = chk()) != <span class=\"number\">-2</span>) &#123; &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(min(n, m) == <span class=\"number\">1</span>) &#123; ans = spe(); &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ans = chk1() ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"number\">0</span>) ans = min(n, m) == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"NOI2016 循环之美","date":"2017-05-21T11:29:17.000Z","_content":"\n### Problem\n&emsp;&emsp;求:\n    $$ \\sum_{i=1}^{n} \\sum_{j=1}^{m} [\\frac{i}{j} 是k进制纯循环小数] $$\n\n### Analysis\n&emsp;&emsp;$ \\frac{x}{y} $ 是k进制纯循环小数当且仅当：\n    $$ \\exists \\; l : \\frac{x \\times (k^l - 1)}{y} \\in Z \\; | \\; (x, y) = 1 \\\\ \n       x \\times k^l \\equiv x (mod \\; y) $$\n&emsp;&emsp;由于$(x, y) = 1$, 所以$ k^l \\equiv 1 (mod \\; y) $, 则必有$(y, k) = 1$\n\n<!--more-->\n&emsp;&emsp;问题转化为求:\n    $$ \n    \\begin{align} \n        & \\sum_{i=1}^{n}\\sum_{j=1}^{m} [(i, j)=1][(j, k)=1] \\\\\n        &= \\sum_{i=1}^{n} \\sum_{j=1}^{m} [(j,k) = 1] \\sum_{d | i \\; d | j} \\mu(d) \\\\\n        &= \\sum_{d=1}^{n} [(d, k)=1] \\mu(d) \\lfloor \\frac{n}{d} \\rfloor \\sum_{j=1}^{\\lfloor \\frac{m}{d} \\rfloor} [(j, d) = 1]\n    \\end{align}\n    $$\n&emsp;&emsp;首先观察式子的后部分，考虑如何求:\n    $$ f(n) = \\sum_{i=1}^{n} [(i, k) = 1] $$\n&emsp;&emsp;根据 $ gcd(a+b, b) = gcd(a, b) $, $ f(n) = \\lfloor \\frac{n}{k} \\rfloor f(k) + f(n \\; mod \\; k) $\n\n&emsp;&emsp;然后要计算的是:\n    $$ \n    \\begin{align} \n        s(n, k) &= \\sum_{d=1}^{n} [(d, k)=1] \\mu(d) \\\\\n                &= \\sum_{d=1}^{n} \\mu(d) \\sum_{x|d \\; x|k} \\mu(x) \\\\\n                &= \\sum_{x|k} \\mu(x) \\sum_{d=1}^{\\lfloor \\frac{n}{x} \\rfloor} \\mu(d \\cdot x) \\\\\n                &= \\sum_{x|k} {\\mu}^2 (x) \\sum_{d=1 \\; (d,x)=1}^{\\lfloor \\frac{n}{x} \\rfloor} \\mu(d) \\\\\n                &= \\sum_{x|k} {\\mu}^2 (x) \\; s(\\lfloor \\frac{n}{x} \\rfloor, x)\n    \\end{align}\n    $$ \n&emsp;&emsp;那么$s(n, k)$就可以递归计算了, 边界条件是$k = 1$.\n&emsp;&emsp;当$k=1$的时候，这东西就叫做杜教筛。我们有：\n    $$ \\sum_{d|n} \\mu(d) = [n=1] $$\n&emsp;&emsp;那么就不难得到:\n    $$ \n    \\begin{align} \n        & \\sum_{i=1}^{n} \\mu(i) \\\\\n        &= 1 + \\sum_{i=2}^{n} \\mu(i) \\\\\n        &= 1 - \\sum_{i=2}^{n} \\sum_{d|i \\; d \\neq i} \\mu(d) \\\\\n        &= 1 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\mu(d)\n    \\end{align}\n    $$\n&emsp;&emsp;至此，原式转化为一个可以递归求解的式子，顺便贴一个[杜教筛教程](http://blog.csdn.net/skywalkert/article/details/50500009)。\n\n### Code \n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 1e6 + 10;\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\n#define fst first\n#define snd second\n#define debug(x) cerr << #x <<\":\" << (x) << endl\n#define REP(i, a, b) for(int i = (a), i##end = (b); i < i##end; ++i)\n#define DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i >= i##bgn; --i)\n\ntemplate<typename T> T read() {\n\tT n = 0, f = 1;\n\tchar ch = getchar();\n\tfor( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n\treturn n * f;\n}\n\nbool isprime[maxn];\nLL prime[maxn], mu[maxn], smu[maxn], pcnt;\n\nvoid sieve() {\n    memset(isprime, 1, sizeof isprime);\n\n    mu[1] = 1;\n    for(LL i = 2; i < maxn; i++) {\n        if(isprime[i]) {\n            mu[i] = -1;\n            prime[pcnt++] = i;\n        }\n        static LL d;\n        for(LL j = 0; j < pcnt && (d = i * prime[j]) < maxn; j++) {\n            isprime[d] = 0;\n            if(i % prime[j] == 0) break;\n            mu[d] = -mu[i];\n        }\n    }for(int i = 1; i < maxn; i++) smu[i] = smu[i-1] + mu[i];\n}\n\n\nnamespace Hash_Map {\n    static const int mod = 1000007;\n    static const int maxnode = 8000000 + 10;\n\n    int cnt = 0;\n    LL f[maxnode], to[maxnode];\n    int st[mod + 5], nxt[maxnode];\n\n    LL find(LL state) {\n        int x = state % mod;\n        for(int i = st[x]; i; i = nxt[i]) \n            if(to[i] == state) return i;\n        return -1;\n    }\n    void insert(LL state, LL v) {\n        int x = state % mod;\n\n        to[++cnt] = state;\n        nxt[cnt] = st[x];\n        st[x] = cnt; f[cnt] = v;\n    }\n}\n\nLL calc(int n, int k) {\n    if(n == 0 || (k == 1 && n < maxn)) \n        return smu[n];\n\n    LL val = 1LL*n*2005 + k;\n    LL cur = Hash_Map::find(val);\n    if(cur >= 0) return Hash_Map::f[cur];\n\n    LL ans = 0;\n    if(k == 1) {\n        ans = 1;\n\n        int j;\n        for(int i = 2; i <= n; i = j+1) {\n            j = n / (n/i);\n            ans -= (j-i+1) * calc(n/i, k);\n        }\n    }else {\n        for(int i = 1; i*i <= k; i++) if(k % i == 0) {\n            if(mu[i]) ans += calc(n/i, i);\n\n            if(k != i*i && mu[k/i]) \n                ans += calc(n/(k/i), k/i); \n        }\n    }\n    Hash_Map::insert(val, ans);\n    return ans;\n}\n\nint n, m, k;\nint cnt[10000 + 10];\n\nLL f(int a) {\n    return a / k * cnt[k] + cnt[a % k];\n}\nLL solve() {\n    for(int i = 1; i <= k; i++) \n        cnt[i] = cnt[i-1] + (__gcd(i, k) == 1);\n\n    LL j = 0, now = 0, lst = 0, ans = 0;\n    for(int i = 1; i <= min(n, m); i = j + 1) {\n        j = min(n/(n/i), m/(m/i));\n\n        now = calc(j, k);\n        ans += (now - lst) * (n/i) * f(m/i);\n        lst = now;\n    }\n    return ans;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\",\"r\", stdin);\n    freopen(\"ans.txt\",\"w\", stdout);\n#endif\n    sieve();\n\n    n = read<int>();\n    m = read<int>();\n    k = read<int>();\n\n    printf(\"%lld\\n\", solve());\n    return 0;\n}\n```\n","source":"_drafts/NOI2016_d1t3.md","raw":"---\ntitle: NOI2016 循环之美\ndate: 2017-05-21 19:29:17\ntags:\n    - Number Theory\n---\n\n### Problem\n&emsp;&emsp;求:\n    $$ \\sum_{i=1}^{n} \\sum_{j=1}^{m} [\\frac{i}{j} 是k进制纯循环小数] $$\n\n### Analysis\n&emsp;&emsp;$ \\frac{x}{y} $ 是k进制纯循环小数当且仅当：\n    $$ \\exists \\; l : \\frac{x \\times (k^l - 1)}{y} \\in Z \\; | \\; (x, y) = 1 \\\\ \n       x \\times k^l \\equiv x (mod \\; y) $$\n&emsp;&emsp;由于$(x, y) = 1$, 所以$ k^l \\equiv 1 (mod \\; y) $, 则必有$(y, k) = 1$\n\n<!--more-->\n&emsp;&emsp;问题转化为求:\n    $$ \n    \\begin{align} \n        & \\sum_{i=1}^{n}\\sum_{j=1}^{m} [(i, j)=1][(j, k)=1] \\\\\n        &= \\sum_{i=1}^{n} \\sum_{j=1}^{m} [(j,k) = 1] \\sum_{d | i \\; d | j} \\mu(d) \\\\\n        &= \\sum_{d=1}^{n} [(d, k)=1] \\mu(d) \\lfloor \\frac{n}{d} \\rfloor \\sum_{j=1}^{\\lfloor \\frac{m}{d} \\rfloor} [(j, d) = 1]\n    \\end{align}\n    $$\n&emsp;&emsp;首先观察式子的后部分，考虑如何求:\n    $$ f(n) = \\sum_{i=1}^{n} [(i, k) = 1] $$\n&emsp;&emsp;根据 $ gcd(a+b, b) = gcd(a, b) $, $ f(n) = \\lfloor \\frac{n}{k} \\rfloor f(k) + f(n \\; mod \\; k) $\n\n&emsp;&emsp;然后要计算的是:\n    $$ \n    \\begin{align} \n        s(n, k) &= \\sum_{d=1}^{n} [(d, k)=1] \\mu(d) \\\\\n                &= \\sum_{d=1}^{n} \\mu(d) \\sum_{x|d \\; x|k} \\mu(x) \\\\\n                &= \\sum_{x|k} \\mu(x) \\sum_{d=1}^{\\lfloor \\frac{n}{x} \\rfloor} \\mu(d \\cdot x) \\\\\n                &= \\sum_{x|k} {\\mu}^2 (x) \\sum_{d=1 \\; (d,x)=1}^{\\lfloor \\frac{n}{x} \\rfloor} \\mu(d) \\\\\n                &= \\sum_{x|k} {\\mu}^2 (x) \\; s(\\lfloor \\frac{n}{x} \\rfloor, x)\n    \\end{align}\n    $$ \n&emsp;&emsp;那么$s(n, k)$就可以递归计算了, 边界条件是$k = 1$.\n&emsp;&emsp;当$k=1$的时候，这东西就叫做杜教筛。我们有：\n    $$ \\sum_{d|n} \\mu(d) = [n=1] $$\n&emsp;&emsp;那么就不难得到:\n    $$ \n    \\begin{align} \n        & \\sum_{i=1}^{n} \\mu(i) \\\\\n        &= 1 + \\sum_{i=2}^{n} \\mu(i) \\\\\n        &= 1 - \\sum_{i=2}^{n} \\sum_{d|i \\; d \\neq i} \\mu(d) \\\\\n        &= 1 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\mu(d)\n    \\end{align}\n    $$\n&emsp;&emsp;至此，原式转化为一个可以递归求解的式子，顺便贴一个[杜教筛教程](http://blog.csdn.net/skywalkert/article/details/50500009)。\n\n### Code \n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 1e6 + 10;\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\n#define fst first\n#define snd second\n#define debug(x) cerr << #x <<\":\" << (x) << endl\n#define REP(i, a, b) for(int i = (a), i##end = (b); i < i##end; ++i)\n#define DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i >= i##bgn; --i)\n\ntemplate<typename T> T read() {\n\tT n = 0, f = 1;\n\tchar ch = getchar();\n\tfor( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n\treturn n * f;\n}\n\nbool isprime[maxn];\nLL prime[maxn], mu[maxn], smu[maxn], pcnt;\n\nvoid sieve() {\n    memset(isprime, 1, sizeof isprime);\n\n    mu[1] = 1;\n    for(LL i = 2; i < maxn; i++) {\n        if(isprime[i]) {\n            mu[i] = -1;\n            prime[pcnt++] = i;\n        }\n        static LL d;\n        for(LL j = 0; j < pcnt && (d = i * prime[j]) < maxn; j++) {\n            isprime[d] = 0;\n            if(i % prime[j] == 0) break;\n            mu[d] = -mu[i];\n        }\n    }for(int i = 1; i < maxn; i++) smu[i] = smu[i-1] + mu[i];\n}\n\n\nnamespace Hash_Map {\n    static const int mod = 1000007;\n    static const int maxnode = 8000000 + 10;\n\n    int cnt = 0;\n    LL f[maxnode], to[maxnode];\n    int st[mod + 5], nxt[maxnode];\n\n    LL find(LL state) {\n        int x = state % mod;\n        for(int i = st[x]; i; i = nxt[i]) \n            if(to[i] == state) return i;\n        return -1;\n    }\n    void insert(LL state, LL v) {\n        int x = state % mod;\n\n        to[++cnt] = state;\n        nxt[cnt] = st[x];\n        st[x] = cnt; f[cnt] = v;\n    }\n}\n\nLL calc(int n, int k) {\n    if(n == 0 || (k == 1 && n < maxn)) \n        return smu[n];\n\n    LL val = 1LL*n*2005 + k;\n    LL cur = Hash_Map::find(val);\n    if(cur >= 0) return Hash_Map::f[cur];\n\n    LL ans = 0;\n    if(k == 1) {\n        ans = 1;\n\n        int j;\n        for(int i = 2; i <= n; i = j+1) {\n            j = n / (n/i);\n            ans -= (j-i+1) * calc(n/i, k);\n        }\n    }else {\n        for(int i = 1; i*i <= k; i++) if(k % i == 0) {\n            if(mu[i]) ans += calc(n/i, i);\n\n            if(k != i*i && mu[k/i]) \n                ans += calc(n/(k/i), k/i); \n        }\n    }\n    Hash_Map::insert(val, ans);\n    return ans;\n}\n\nint n, m, k;\nint cnt[10000 + 10];\n\nLL f(int a) {\n    return a / k * cnt[k] + cnt[a % k];\n}\nLL solve() {\n    for(int i = 1; i <= k; i++) \n        cnt[i] = cnt[i-1] + (__gcd(i, k) == 1);\n\n    LL j = 0, now = 0, lst = 0, ans = 0;\n    for(int i = 1; i <= min(n, m); i = j + 1) {\n        j = min(n/(n/i), m/(m/i));\n\n        now = calc(j, k);\n        ans += (now - lst) * (n/i) * f(m/i);\n        lst = now;\n    }\n    return ans;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\",\"r\", stdin);\n    freopen(\"ans.txt\",\"w\", stdout);\n#endif\n    sieve();\n\n    n = read<int>();\n    m = read<int>();\n    k = read<int>();\n\n    printf(\"%lld\\n\", solve());\n    return 0;\n}\n```\n","slug":"NOI2016_d1t3","published":0,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cm6000gonisk64jwwph","content":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h3><p>&emsp;&emsp;求:</p>\n<pre><code>$$ \\sum_{i=1}^{n} \\sum_{j=1}^{m} [\\frac{i}{j} 是k进制纯循环小数] $$\n</code></pre><h3 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h3><p>&emsp;&emsp;$ \\frac{x}{y} $ 是k进制纯循环小数当且仅当：</p>\n<pre><code>$$ \\exists \\; l : \\frac{x \\times (k^l - 1)}{y} \\in Z \\; | \\; (x, y) = 1 \\\\ \n   x \\times k^l \\equiv x (mod \\; y) $$\n</code></pre><p>&emsp;&emsp;由于$(x, y) = 1$, 所以$ k^l \\equiv 1 (mod \\; y) $, 则必有$(y, k) = 1$</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;问题转化为求:</p>\n<pre><code>$$ \n\\begin{align} \n    &amp; \\sum_{i=1}^{n}\\sum_{j=1}^{m} [(i, j)=1][(j, k)=1] \\\\\n    &amp;= \\sum_{i=1}^{n} \\sum_{j=1}^{m} [(j,k) = 1] \\sum_{d | i \\; d | j} \\mu(d) \\\\\n    &amp;= \\sum_{d=1}^{n} [(d, k)=1] \\mu(d) \\lfloor \\frac{n}{d} \\rfloor \\sum_{j=1}^{\\lfloor \\frac{m}{d} \\rfloor} [(j, d) = 1]\n\\end{align}\n$$\n</code></pre><p>&emsp;&emsp;首先观察式子的后部分，考虑如何求:</p>\n<pre><code>$$ f(n) = \\sum_{i=1}^{n} [(i, k) = 1] $$\n</code></pre><p>&emsp;&emsp;根据 $ gcd(a+b, b) = gcd(a, b) $, $ f(n) = \\lfloor \\frac{n}{k} \\rfloor f(k) + f(n \\; mod \\; k) $</p>\n<p>&emsp;&emsp;然后要计算的是:</p>\n<pre><code>$$ \n\\begin{align} \n    s(n, k) &amp;= \\sum_{d=1}^{n} [(d, k)=1] \\mu(d) \\\\\n            &amp;= \\sum_{d=1}^{n} \\mu(d) \\sum_{x|d \\; x|k} \\mu(x) \\\\\n            &amp;= \\sum_{x|k} \\mu(x) \\sum_{d=1}^{\\lfloor \\frac{n}{x} \\rfloor} \\mu(d \\cdot x) \\\\\n            &amp;= \\sum_{x|k} {\\mu}^2 (x) \\sum_{d=1 \\; (d,x)=1}^{\\lfloor \\frac{n}{x} \\rfloor} \\mu(d) \\\\\n            &amp;= \\sum_{x|k} {\\mu}^2 (x) \\; s(\\lfloor \\frac{n}{x} \\rfloor, x)\n\\end{align}\n$$ \n</code></pre><p>&emsp;&emsp;那么$s(n, k)$就可以递归计算了, 边界条件是$k = 1$.<br>&emsp;&emsp;当$k=1$的时候，这东西就叫做杜教筛。我们有：</p>\n<pre><code>$$ \\sum_{d|n} \\mu(d) = [n=1] $$\n</code></pre><p>&emsp;&emsp;那么就不难得到:</p>\n<pre><code>$$ \n\\begin{align} \n    &amp; \\sum_{i=1}^{n} \\mu(i) \\\\\n    &amp;= 1 + \\sum_{i=2}^{n} \\mu(i) \\\\\n    &amp;= 1 - \\sum_{i=2}^{n} \\sum_{d|i \\; d \\neq i} \\mu(d) \\\\\n    &amp;= 1 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\mu(d)\n\\end{align}\n$$\n</code></pre><p>&emsp;&emsp;至此，原式转化为一个可以递归求解的式子，顺便贴一个<a href=\"http://blog.csdn.net/skywalkert/article/details/50500009\" target=\"_blank\" rel=\"external\">杜教筛教程</a>。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt;<span class=\"meta-string\">\":\"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tT n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> isprime[maxn];</div><div class=\"line\">LL prime[maxn], mu[maxn], smu[maxn], pcnt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sieve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(isprime, <span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span> isprime);</div><div class=\"line\"></div><div class=\"line\">    mu[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(LL i = <span class=\"number\">2</span>; i &lt; maxn; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(isprime[i]) &#123;</div><div class=\"line\">            mu[i] = <span class=\"number\">-1</span>;</div><div class=\"line\">            prime[pcnt++] = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">static</span> LL d;</div><div class=\"line\">        <span class=\"keyword\">for</span>(LL j = <span class=\"number\">0</span>; j &lt; pcnt &amp;&amp; (d = i * prime[j]) &lt; maxn; j++) &#123;</div><div class=\"line\">            isprime[d] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i % prime[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">            mu[d] = -mu[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; maxn; i++) smu[i] = smu[i<span class=\"number\">-1</span>] + mu[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Hash_Map &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1000007</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxnode = <span class=\"number\">8000000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">    LL f[maxnode], to[maxnode];</div><div class=\"line\">    <span class=\"keyword\">int</span> st[mod + <span class=\"number\">5</span>], nxt[maxnode];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">LL <span class=\"title\">find</span><span class=\"params\">(LL state)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = state % mod;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[x]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(to[i] == state) <span class=\"keyword\">return</span> i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(LL state, LL v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = state % mod;</div><div class=\"line\"></div><div class=\"line\">        to[++cnt] = state;</div><div class=\"line\">        nxt[cnt] = st[x];</div><div class=\"line\">        st[x] = cnt; f[cnt] = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span> || (k == <span class=\"number\">1</span> &amp;&amp; n &lt; maxn)) </div><div class=\"line\">        <span class=\"keyword\">return</span> smu[n];</div><div class=\"line\"></div><div class=\"line\">    LL val = <span class=\"number\">1L</span>L*n*<span class=\"number\">2005</span> + k;</div><div class=\"line\">    LL cur = Hash_Map::find(val);</div><div class=\"line\">    <span class=\"keyword\">if</span>(cur &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> Hash_Map::f[cur];</div><div class=\"line\"></div><div class=\"line\">    LL ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(k == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        ans = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> j;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i = j+<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            j = n / (n/i);</div><div class=\"line\">            ans -= (j-i+<span class=\"number\">1</span>) * calc(n/i, k);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i*i &lt;= k; i++) <span class=\"keyword\">if</span>(k % i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(mu[i]) ans += calc(n/i, i);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(k != i*i &amp;&amp; mu[k/i]) </div><div class=\"line\">                ans += calc(n/(k/i), k/i); </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Hash_Map::insert(val, ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m, k;</div><div class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">10000</span> + <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a / k * cnt[k] + cnt[a % k];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) </div><div class=\"line\">        cnt[i] = cnt[i<span class=\"number\">-1</span>] + (__gcd(i, k) == <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    LL j = <span class=\"number\">0</span>, now = <span class=\"number\">0</span>, lst = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= min(n, m); i = j + <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        j = min(n/(n/i), m/(m/i));</div><div class=\"line\"></div><div class=\"line\">        now = calc(j, k);</div><div class=\"line\">        ans += (now - lst) * (n/i) * f(m/i);</div><div class=\"line\">        lst = now;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>,<span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>,<span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">    sieve();</div><div class=\"line\"></div><div class=\"line\">    n = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">    m = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">    k = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, solve());</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h3><p>&emsp;&emsp;求:</p>\n<pre><code>$$ \\sum_{i=1}^{n} \\sum_{j=1}^{m} [\\frac{i}{j} 是k进制纯循环小数] $$\n</code></pre><h3 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h3><p>&emsp;&emsp;$ \\frac{x}{y} $ 是k进制纯循环小数当且仅当：</p>\n<pre><code>$$ \\exists \\; l : \\frac{x \\times (k^l - 1)}{y} \\in Z \\; | \\; (x, y) = 1 \\\\ \n   x \\times k^l \\equiv x (mod \\; y) $$\n</code></pre><p>&emsp;&emsp;由于$(x, y) = 1$, 所以$ k^l \\equiv 1 (mod \\; y) $, 则必有$(y, k) = 1$</p>","more":"<p>&emsp;&emsp;问题转化为求:</p>\n<pre><code>$$ \n\\begin{align} \n    &amp; \\sum_{i=1}^{n}\\sum_{j=1}^{m} [(i, j)=1][(j, k)=1] \\\\\n    &amp;= \\sum_{i=1}^{n} \\sum_{j=1}^{m} [(j,k) = 1] \\sum_{d | i \\; d | j} \\mu(d) \\\\\n    &amp;= \\sum_{d=1}^{n} [(d, k)=1] \\mu(d) \\lfloor \\frac{n}{d} \\rfloor \\sum_{j=1}^{\\lfloor \\frac{m}{d} \\rfloor} [(j, d) = 1]\n\\end{align}\n$$\n</code></pre><p>&emsp;&emsp;首先观察式子的后部分，考虑如何求:</p>\n<pre><code>$$ f(n) = \\sum_{i=1}^{n} [(i, k) = 1] $$\n</code></pre><p>&emsp;&emsp;根据 $ gcd(a+b, b) = gcd(a, b) $, $ f(n) = \\lfloor \\frac{n}{k} \\rfloor f(k) + f(n \\; mod \\; k) $</p>\n<p>&emsp;&emsp;然后要计算的是:</p>\n<pre><code>$$ \n\\begin{align} \n    s(n, k) &amp;= \\sum_{d=1}^{n} [(d, k)=1] \\mu(d) \\\\\n            &amp;= \\sum_{d=1}^{n} \\mu(d) \\sum_{x|d \\; x|k} \\mu(x) \\\\\n            &amp;= \\sum_{x|k} \\mu(x) \\sum_{d=1}^{\\lfloor \\frac{n}{x} \\rfloor} \\mu(d \\cdot x) \\\\\n            &amp;= \\sum_{x|k} {\\mu}^2 (x) \\sum_{d=1 \\; (d,x)=1}^{\\lfloor \\frac{n}{x} \\rfloor} \\mu(d) \\\\\n            &amp;= \\sum_{x|k} {\\mu}^2 (x) \\; s(\\lfloor \\frac{n}{x} \\rfloor, x)\n\\end{align}\n$$ \n</code></pre><p>&emsp;&emsp;那么$s(n, k)$就可以递归计算了, 边界条件是$k = 1$.<br>&emsp;&emsp;当$k=1$的时候，这东西就叫做杜教筛。我们有：</p>\n<pre><code>$$ \\sum_{d|n} \\mu(d) = [n=1] $$\n</code></pre><p>&emsp;&emsp;那么就不难得到:</p>\n<pre><code>$$ \n\\begin{align} \n    &amp; \\sum_{i=1}^{n} \\mu(i) \\\\\n    &amp;= 1 + \\sum_{i=2}^{n} \\mu(i) \\\\\n    &amp;= 1 - \\sum_{i=2}^{n} \\sum_{d|i \\; d \\neq i} \\mu(d) \\\\\n    &amp;= 1 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\mu(d)\n\\end{align}\n$$\n</code></pre><p>&emsp;&emsp;至此，原式转化为一个可以递归求解的式子，顺便贴一个<a href=\"http://blog.csdn.net/skywalkert/article/details/50500009\">杜教筛教程</a>。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt;<span class=\"meta-string\">\":\"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tT n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> isprime[maxn];</div><div class=\"line\">LL prime[maxn], mu[maxn], smu[maxn], pcnt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sieve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(isprime, <span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span> isprime);</div><div class=\"line\"></div><div class=\"line\">    mu[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(LL i = <span class=\"number\">2</span>; i &lt; maxn; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(isprime[i]) &#123;</div><div class=\"line\">            mu[i] = <span class=\"number\">-1</span>;</div><div class=\"line\">            prime[pcnt++] = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">static</span> LL d;</div><div class=\"line\">        <span class=\"keyword\">for</span>(LL j = <span class=\"number\">0</span>; j &lt; pcnt &amp;&amp; (d = i * prime[j]) &lt; maxn; j++) &#123;</div><div class=\"line\">            isprime[d] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i % prime[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">            mu[d] = -mu[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; maxn; i++) smu[i] = smu[i<span class=\"number\">-1</span>] + mu[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Hash_Map &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1000007</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxnode = <span class=\"number\">8000000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">    LL f[maxnode], to[maxnode];</div><div class=\"line\">    <span class=\"keyword\">int</span> st[mod + <span class=\"number\">5</span>], nxt[maxnode];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">LL <span class=\"title\">find</span><span class=\"params\">(LL state)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = state % mod;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[x]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(to[i] == state) <span class=\"keyword\">return</span> i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(LL state, LL v)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = state % mod;</div><div class=\"line\"></div><div class=\"line\">        to[++cnt] = state;</div><div class=\"line\">        nxt[cnt] = st[x];</div><div class=\"line\">        st[x] = cnt; f[cnt] = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span> || (k == <span class=\"number\">1</span> &amp;&amp; n &lt; maxn)) </div><div class=\"line\">        <span class=\"keyword\">return</span> smu[n];</div><div class=\"line\"></div><div class=\"line\">    LL val = <span class=\"number\">1L</span>L*n*<span class=\"number\">2005</span> + k;</div><div class=\"line\">    LL cur = Hash_Map::find(val);</div><div class=\"line\">    <span class=\"keyword\">if</span>(cur &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> Hash_Map::f[cur];</div><div class=\"line\"></div><div class=\"line\">    LL ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(k == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        ans = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> j;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i = j+<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            j = n / (n/i);</div><div class=\"line\">            ans -= (j-i+<span class=\"number\">1</span>) * calc(n/i, k);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i*i &lt;= k; i++) <span class=\"keyword\">if</span>(k % i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(mu[i]) ans += calc(n/i, i);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(k != i*i &amp;&amp; mu[k/i]) </div><div class=\"line\">                ans += calc(n/(k/i), k/i); </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Hash_Map::insert(val, ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> n, m, k;</div><div class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">10000</span> + <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a / k * cnt[k] + cnt[a % k];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) </div><div class=\"line\">        cnt[i] = cnt[i<span class=\"number\">-1</span>] + (__gcd(i, k) == <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    LL j = <span class=\"number\">0</span>, now = <span class=\"number\">0</span>, lst = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= min(n, m); i = j + <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        j = min(n/(n/i), m/(m/i));</div><div class=\"line\"></div><div class=\"line\">        now = calc(j, k);</div><div class=\"line\">        ans += (now - lst) * (n/i) * f(m/i);</div><div class=\"line\">        lst = now;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>,<span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>,<span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">    sieve();</div><div class=\"line\"></div><div class=\"line\">    n = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">    m = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">    k = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, solve());</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Fast Number-Theoretic Transformation","date":"2017-02-25T16:00:00.000Z","_content":"\n### Preface\n&emsp;&emsp;在前面的博客[Fast Fourier Transformation](https://wearrys.github.io/2017/02/17/FFT/)中，已经简单介绍了FFT的原理及其实现，但是FFT并不是完美的，由于涉及到复数的运算，FFT在实际使用过程中存在比较大的精度误差。如果我们对整数进行运算要求取模时，就可以用FNT来进行处理。\n\n### Preparatory knowledge\n\n#### 原根\n&emsp;&emsp;在FFT的实现中，进行蝴蝶操作的关键就是利用了单位复数根的性质$w_n^{\\frac{n}{2}} = -1$以及每个单位复根的n次方为1等，那么在模意义下的乘法中，是否有类似的东西呢？\n答案是肯定的：[原根](https://zh.wikipedia.org/wiki/%E5%8E%9F%E6%A0%B9)\n&emsp;&emsp;利用原根的相关性质，我们发现可以像FFT一样的进行蝴蝶操作了，关于蝴蝶操作的具体过程请参见有关FFT的讲稿。\n\n<!--more-->\n### Algorithm\n&emsp;&emsp;说了这么多，其实大家会发现FNT的基本流程和FFT几乎是完全一样的，只是两者的适用范围有些许的差异而已。当然，如果模数不是那么的贴心比较坑的话，还需要更多的小技巧来处理。\n&emsp;&emsp;然而我不会。。。\n\n### Code\n&emsp;&emsp;同样的FNT也有递归和迭代的两种实现方式，由于在FFT中都介绍过，因此这里只给出更优的迭代版本。\n\n``` cpp\nvoid init() {\n    N = 1;\n    while(N <= 2*k) N <<= 1, ++bit;\n\n    for(int i = 0; i < N; ++i) \n        rev[i] = ((rev[i>>1]>>1) | ((i&1) << (bit-1)));\n\n    w[0] = w[N] = 1;\n    int wn = Pow(3, (mod-1)/N);\n    for(int i = 1; i < N; ++i) w[i] = 1LL*w[i-1]*wn%mod;\n}\n\nvoid DFT(int *a, int N, int type) {\n    for(int i = 0; i < N; i++) \n        if(i < rev[i]) swap(a[i], a[rev[i]]);\n\n    for(int l = 2; l <= N; l <<= 1) {\n        for(int i = 0; i < N; i += l) {\n            for(int j = 0; j < (l>>1); j++) {\n                int u = a[i+j]; \n                int v = 1LL * a[i+j+(l>>1)]*(type>0 ? w[N/l*j]:w[N-N/l*j]) % mod;\n\n                a[i + j] = (u + v) % mod;\n                a[i + j + (l>>1)] = (u - v + mod) % mod;\n            }\n        }\n    }\n    if(!~type) {\n        int invn = Pow(N, mod-2);\n        for(int i = 0; i < N; i++) a[i] = 1LL*invn*a[i] % mod;\n    }\n}\n```\n","source":"_drafts/NTT.md","raw":"---\ntitle: Fast Number-Theoretic Transformation\ndate: 2017-02-26\ntags: Mathematics\n---\n\n### Preface\n&emsp;&emsp;在前面的博客[Fast Fourier Transformation](https://wearrys.github.io/2017/02/17/FFT/)中，已经简单介绍了FFT的原理及其实现，但是FFT并不是完美的，由于涉及到复数的运算，FFT在实际使用过程中存在比较大的精度误差。如果我们对整数进行运算要求取模时，就可以用FNT来进行处理。\n\n### Preparatory knowledge\n\n#### 原根\n&emsp;&emsp;在FFT的实现中，进行蝴蝶操作的关键就是利用了单位复数根的性质$w_n^{\\frac{n}{2}} = -1$以及每个单位复根的n次方为1等，那么在模意义下的乘法中，是否有类似的东西呢？\n答案是肯定的：[原根](https://zh.wikipedia.org/wiki/%E5%8E%9F%E6%A0%B9)\n&emsp;&emsp;利用原根的相关性质，我们发现可以像FFT一样的进行蝴蝶操作了，关于蝴蝶操作的具体过程请参见有关FFT的讲稿。\n\n<!--more-->\n### Algorithm\n&emsp;&emsp;说了这么多，其实大家会发现FNT的基本流程和FFT几乎是完全一样的，只是两者的适用范围有些许的差异而已。当然，如果模数不是那么的贴心比较坑的话，还需要更多的小技巧来处理。\n&emsp;&emsp;然而我不会。。。\n\n### Code\n&emsp;&emsp;同样的FNT也有递归和迭代的两种实现方式，由于在FFT中都介绍过，因此这里只给出更优的迭代版本。\n\n``` cpp\nvoid init() {\n    N = 1;\n    while(N <= 2*k) N <<= 1, ++bit;\n\n    for(int i = 0; i < N; ++i) \n        rev[i] = ((rev[i>>1]>>1) | ((i&1) << (bit-1)));\n\n    w[0] = w[N] = 1;\n    int wn = Pow(3, (mod-1)/N);\n    for(int i = 1; i < N; ++i) w[i] = 1LL*w[i-1]*wn%mod;\n}\n\nvoid DFT(int *a, int N, int type) {\n    for(int i = 0; i < N; i++) \n        if(i < rev[i]) swap(a[i], a[rev[i]]);\n\n    for(int l = 2; l <= N; l <<= 1) {\n        for(int i = 0; i < N; i += l) {\n            for(int j = 0; j < (l>>1); j++) {\n                int u = a[i+j]; \n                int v = 1LL * a[i+j+(l>>1)]*(type>0 ? w[N/l*j]:w[N-N/l*j]) % mod;\n\n                a[i + j] = (u + v) % mod;\n                a[i + j + (l>>1)] = (u - v + mod) % mod;\n            }\n        }\n    }\n    if(!~type) {\n        int invn = Pow(N, mod-2);\n        for(int i = 0; i < N; i++) a[i] = 1LL*invn*a[i] % mod;\n    }\n}\n```\n","slug":"NTT","published":0,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cmb000ionismn6h1vub","content":"<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>&emsp;&emsp;在前面的博客<a href=\"https://wearrys.github.io/2017/02/17/FFT/\" target=\"_blank\" rel=\"external\">Fast Fourier Transformation</a>中，已经简单介绍了FFT的原理及其实现，但是FFT并不是完美的，由于涉及到复数的运算，FFT在实际使用过程中存在比较大的精度误差。如果我们对整数进行运算要求取模时，就可以用FNT来进行处理。</p>\n<h3 id=\"Preparatory-knowledge\"><a href=\"#Preparatory-knowledge\" class=\"headerlink\" title=\"Preparatory knowledge\"></a>Preparatory knowledge</h3><h4 id=\"原根\"><a href=\"#原根\" class=\"headerlink\" title=\"原根\"></a>原根</h4><p>&emsp;&emsp;在FFT的实现中，进行蝴蝶操作的关键就是利用了单位复数根的性质$w_n^{\\frac{n}{2}} = -1$以及每个单位复根的n次方为1等，那么在模意义下的乘法中，是否有类似的东西呢？<br>答案是肯定的：<a href=\"https://zh.wikipedia.org/wiki/%E5%8E%9F%E6%A0%B9\" target=\"_blank\" rel=\"external\">原根</a><br>&emsp;&emsp;利用原根的相关性质，我们发现可以像FFT一样的进行蝴蝶操作了，关于蝴蝶操作的具体过程请参见有关FFT的讲稿。</p>\n<a id=\"more\"></a>\n<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>&emsp;&emsp;说了这么多，其实大家会发现FNT的基本流程和FFT几乎是完全一样的，只是两者的适用范围有些许的差异而已。当然，如果模数不是那么的贴心比较坑的话，还需要更多的小技巧来处理。<br>&emsp;&emsp;然而我不会。。。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>&emsp;&emsp;同样的FNT也有递归和迭代的两种实现方式，由于在FFT中都介绍过，因此这里只给出更优的迭代版本。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    N = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(N &lt;= <span class=\"number\">2</span>*k) N &lt;&lt;= <span class=\"number\">1</span>, ++bit;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) </div><div class=\"line\">        rev[i] = ((rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (bit<span class=\"number\">-1</span>)));</div><div class=\"line\"></div><div class=\"line\">    w[<span class=\"number\">0</span>] = w[N] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> wn = Pow(<span class=\"number\">3</span>, (mod<span class=\"number\">-1</span>)/N);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; ++i) w[i] = <span class=\"number\">1L</span>L*w[i<span class=\"number\">-1</span>]*wn%mod;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(a[i], a[rev[i]]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= N; l &lt;&lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i += l) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (l&gt;&gt;<span class=\"number\">1</span>); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> u = a[i+j]; </div><div class=\"line\">                <span class=\"keyword\">int</span> v = <span class=\"number\">1L</span>L * a[i+j+(l&gt;&gt;<span class=\"number\">1</span>)]*(type&gt;<span class=\"number\">0</span> ? w[N/l*j]:w[N-N/l*j]) % mod;</div><div class=\"line\"></div><div class=\"line\">                a[i + j] = (u + v) % mod;</div><div class=\"line\">                a[i + j + (l&gt;&gt;<span class=\"number\">1</span>)] = (u - v + mod) % mod;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!~type) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> invn = Pow(N, mod<span class=\"number\">-2</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) a[i] = <span class=\"number\">1L</span>L*invn*a[i] % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>&emsp;&emsp;在前面的博客<a href=\"https://wearrys.github.io/2017/02/17/FFT/\">Fast Fourier Transformation</a>中，已经简单介绍了FFT的原理及其实现，但是FFT并不是完美的，由于涉及到复数的运算，FFT在实际使用过程中存在比较大的精度误差。如果我们对整数进行运算要求取模时，就可以用FNT来进行处理。</p>\n<h3 id=\"Preparatory-knowledge\"><a href=\"#Preparatory-knowledge\" class=\"headerlink\" title=\"Preparatory knowledge\"></a>Preparatory knowledge</h3><h4 id=\"原根\"><a href=\"#原根\" class=\"headerlink\" title=\"原根\"></a>原根</h4><p>&emsp;&emsp;在FFT的实现中，进行蝴蝶操作的关键就是利用了单位复数根的性质$w_n^{\\frac{n}{2}} = -1$以及每个单位复根的n次方为1等，那么在模意义下的乘法中，是否有类似的东西呢？<br>答案是肯定的：<a href=\"https://zh.wikipedia.org/wiki/%E5%8E%9F%E6%A0%B9\">原根</a><br>&emsp;&emsp;利用原根的相关性质，我们发现可以像FFT一样的进行蝴蝶操作了，关于蝴蝶操作的具体过程请参见有关FFT的讲稿。</p>","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>&emsp;&emsp;说了这么多，其实大家会发现FNT的基本流程和FFT几乎是完全一样的，只是两者的适用范围有些许的差异而已。当然，如果模数不是那么的贴心比较坑的话，还需要更多的小技巧来处理。<br>&emsp;&emsp;然而我不会。。。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>&emsp;&emsp;同样的FNT也有递归和迭代的两种实现方式，由于在FFT中都介绍过，因此这里只给出更优的迭代版本。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    N = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(N &lt;= <span class=\"number\">2</span>*k) N &lt;&lt;= <span class=\"number\">1</span>, ++bit;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) </div><div class=\"line\">        rev[i] = ((rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (bit<span class=\"number\">-1</span>)));</div><div class=\"line\"></div><div class=\"line\">    w[<span class=\"number\">0</span>] = w[N] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> wn = Pow(<span class=\"number\">3</span>, (mod<span class=\"number\">-1</span>)/N);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; ++i) w[i] = <span class=\"number\">1L</span>L*w[i<span class=\"number\">-1</span>]*wn%mod;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(a[i], a[rev[i]]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= N; l &lt;&lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i += l) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (l&gt;&gt;<span class=\"number\">1</span>); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> u = a[i+j]; </div><div class=\"line\">                <span class=\"keyword\">int</span> v = <span class=\"number\">1L</span>L * a[i+j+(l&gt;&gt;<span class=\"number\">1</span>)]*(type&gt;<span class=\"number\">0</span> ? w[N/l*j]:w[N-N/l*j]) % mod;</div><div class=\"line\"></div><div class=\"line\">                a[i + j] = (u + v) % mod;</div><div class=\"line\">                a[i + j + (l&gt;&gt;<span class=\"number\">1</span>)] = (u - v + mod) % mod;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!~type) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> invn = Pow(N, mod<span class=\"number\">-2</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) a[i] = <span class=\"number\">1L</span>L*invn*a[i] % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"初探可持久化数据结构","date":"2017-02-19T16:00:00.000Z","_content":"\n### Example:\n\n&emsp;&emsp;1.Hdu 4348 : 线段树区间修改，历史版本查询，操作回退。\n&emsp;&emsp;2.Bzoj 2653: 给定左右端点的区间范围，求最大的可行中位数。\n&emsp;&emsp;3.Spoj DQUERY: 给定区间求区间内不同数的个数。\n\n### Tricks:\n&emsp;&emsp;这两道题中的可持久化思路都非常巧妙，主要从主席树的思想延伸过来。\n&emsp;&emsp;但又和一般的主席树有不同之处。\n\n&emsp;&emsp;首先对于第一题，可以直接建一棵普通的线段树。\n&emsp;&emsp;然后对每次的修改可以在原来的树上新建节点，新节点用于维护Add标记，若进行回退操作时直接回退到特定时间的标记即可。\n&emsp;&emsp;这样相当于用一棵主席树来维护Add标记，但是不能下传标记，因为直接下传会导致主席树中新节点大量增多，浪费不必要的空间。而如果只维护Add的值，每次查询时再考虑它对答案的影响即可。这样每次添加的节点是logn级别的。\n<!--more-->\n\n&emsp;&emsp;然后对第二题，不难发现，具有单调性(可二分性),考虑如何简便地判断一个数字是否可行。\n若在一棵线段树中将比当前数小的点权当成-1，比当前数大的当成1.\n&emsp;&emsp;若存在一种方案使得合法的区间最大子段和 >= 0，那么说明中位数可以继续增大。\n&emsp;&emsp;考虑如何求这个最大字段和，不难发现对每个数都对应一个不同的序列，所以直接算比较困难。但是同时又发现，如果将序列排序后再考虑这一点，每个点的数列旨在前一个点的基础上进行了一次点修改，于是可以主席树来维护这个值的变化序列，然后考虑区间分治的方法求最大子段和即可。\n\n&emsp;&emsp;如何做第三题呢？首先如果只有这一组询问显然是很好做的，直接扫一遍即可。\n&emsp;&emsp;然后考虑多组询问的情况如果将所有左区间相同的询问，可以将从这个点开始到最右端的数列离散化到一个表里，然后每次就在这个表里根据右区间的不同来计算答案。为了方便地查询答案，我们用数字的下标作为关键字来构造，当遇到相同的数字时就将其放在最左边的出现位置然后删去其他点的影响即可，然后每次查询就等价于求一次区间和。所以可以每一次将端点往左边移一位最多只有一次修改，直接构造类主席树即可。\n","source":"_drafts/durable.md","raw":"---\ntitle: 初探可持久化数据结构\ndate: 2017-02-20\ntags: Datastructure\n---\n\n### Example:\n\n&emsp;&emsp;1.Hdu 4348 : 线段树区间修改，历史版本查询，操作回退。\n&emsp;&emsp;2.Bzoj 2653: 给定左右端点的区间范围，求最大的可行中位数。\n&emsp;&emsp;3.Spoj DQUERY: 给定区间求区间内不同数的个数。\n\n### Tricks:\n&emsp;&emsp;这两道题中的可持久化思路都非常巧妙，主要从主席树的思想延伸过来。\n&emsp;&emsp;但又和一般的主席树有不同之处。\n\n&emsp;&emsp;首先对于第一题，可以直接建一棵普通的线段树。\n&emsp;&emsp;然后对每次的修改可以在原来的树上新建节点，新节点用于维护Add标记，若进行回退操作时直接回退到特定时间的标记即可。\n&emsp;&emsp;这样相当于用一棵主席树来维护Add标记，但是不能下传标记，因为直接下传会导致主席树中新节点大量增多，浪费不必要的空间。而如果只维护Add的值，每次查询时再考虑它对答案的影响即可。这样每次添加的节点是logn级别的。\n<!--more-->\n\n&emsp;&emsp;然后对第二题，不难发现，具有单调性(可二分性),考虑如何简便地判断一个数字是否可行。\n若在一棵线段树中将比当前数小的点权当成-1，比当前数大的当成1.\n&emsp;&emsp;若存在一种方案使得合法的区间最大子段和 >= 0，那么说明中位数可以继续增大。\n&emsp;&emsp;考虑如何求这个最大字段和，不难发现对每个数都对应一个不同的序列，所以直接算比较困难。但是同时又发现，如果将序列排序后再考虑这一点，每个点的数列旨在前一个点的基础上进行了一次点修改，于是可以主席树来维护这个值的变化序列，然后考虑区间分治的方法求最大子段和即可。\n\n&emsp;&emsp;如何做第三题呢？首先如果只有这一组询问显然是很好做的，直接扫一遍即可。\n&emsp;&emsp;然后考虑多组询问的情况如果将所有左区间相同的询问，可以将从这个点开始到最右端的数列离散化到一个表里，然后每次就在这个表里根据右区间的不同来计算答案。为了方便地查询答案，我们用数字的下标作为关键字来构造，当遇到相同的数字时就将其放在最左边的出现位置然后删去其他点的影响即可，然后每次查询就等价于求一次区间和。所以可以每一次将端点往左边移一位最多只有一次修改，直接构造类主席树即可。\n","slug":"durable","published":0,"updated":"2017-12-09T07:09:35.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cmg000lonisntiyzsm0","content":"<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><p>&emsp;&emsp;1.Hdu 4348 : 线段树区间修改，历史版本查询，操作回退。<br>&emsp;&emsp;2.Bzoj 2653: 给定左右端点的区间范围，求最大的可行中位数。<br>&emsp;&emsp;3.Spoj DQUERY: 给定区间求区间内不同数的个数。</p>\n<h3 id=\"Tricks\"><a href=\"#Tricks\" class=\"headerlink\" title=\"Tricks:\"></a>Tricks:</h3><p>&emsp;&emsp;这两道题中的可持久化思路都非常巧妙，主要从主席树的思想延伸过来。<br>&emsp;&emsp;但又和一般的主席树有不同之处。</p>\n<p>&emsp;&emsp;首先对于第一题，可以直接建一棵普通的线段树。<br>&emsp;&emsp;然后对每次的修改可以在原来的树上新建节点，新节点用于维护Add标记，若进行回退操作时直接回退到特定时间的标记即可。<br>&emsp;&emsp;这样相当于用一棵主席树来维护Add标记，但是不能下传标记，因为直接下传会导致主席树中新节点大量增多，浪费不必要的空间。而如果只维护Add的值，每次查询时再考虑它对答案的影响即可。这样每次添加的节点是logn级别的。<br><a id=\"more\"></a></p>\n<p>&emsp;&emsp;然后对第二题，不难发现，具有单调性(可二分性),考虑如何简便地判断一个数字是否可行。<br>若在一棵线段树中将比当前数小的点权当成-1，比当前数大的当成1.<br>&emsp;&emsp;若存在一种方案使得合法的区间最大子段和 &gt;= 0，那么说明中位数可以继续增大。<br>&emsp;&emsp;考虑如何求这个最大字段和，不难发现对每个数都对应一个不同的序列，所以直接算比较困难。但是同时又发现，如果将序列排序后再考虑这一点，每个点的数列旨在前一个点的基础上进行了一次点修改，于是可以主席树来维护这个值的变化序列，然后考虑区间分治的方法求最大子段和即可。</p>\n<p>&emsp;&emsp;如何做第三题呢？首先如果只有这一组询问显然是很好做的，直接扫一遍即可。<br>&emsp;&emsp;然后考虑多组询问的情况如果将所有左区间相同的询问，可以将从这个点开始到最右端的数列离散化到一个表里，然后每次就在这个表里根据右区间的不同来计算答案。为了方便地查询答案，我们用数字的下标作为关键字来构造，当遇到相同的数字时就将其放在最左边的出现位置然后删去其他点的影响即可，然后每次查询就等价于求一次区间和。所以可以每一次将端点往左边移一位最多只有一次修改，直接构造类主席树即可。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><p>&emsp;&emsp;1.Hdu 4348 : 线段树区间修改，历史版本查询，操作回退。<br>&emsp;&emsp;2.Bzoj 2653: 给定左右端点的区间范围，求最大的可行中位数。<br>&emsp;&emsp;3.Spoj DQUERY: 给定区间求区间内不同数的个数。</p>\n<h3 id=\"Tricks\"><a href=\"#Tricks\" class=\"headerlink\" title=\"Tricks:\"></a>Tricks:</h3><p>&emsp;&emsp;这两道题中的可持久化思路都非常巧妙，主要从主席树的思想延伸过来。<br>&emsp;&emsp;但又和一般的主席树有不同之处。</p>\n<p>&emsp;&emsp;首先对于第一题，可以直接建一棵普通的线段树。<br>&emsp;&emsp;然后对每次的修改可以在原来的树上新建节点，新节点用于维护Add标记，若进行回退操作时直接回退到特定时间的标记即可。<br>&emsp;&emsp;这样相当于用一棵主席树来维护Add标记，但是不能下传标记，因为直接下传会导致主席树中新节点大量增多，浪费不必要的空间。而如果只维护Add的值，每次查询时再考虑它对答案的影响即可。这样每次添加的节点是logn级别的。<br>","more":"</p>\n<p>&emsp;&emsp;然后对第二题，不难发现，具有单调性(可二分性),考虑如何简便地判断一个数字是否可行。<br>若在一棵线段树中将比当前数小的点权当成-1，比当前数大的当成1.<br>&emsp;&emsp;若存在一种方案使得合法的区间最大子段和 &gt;= 0，那么说明中位数可以继续增大。<br>&emsp;&emsp;考虑如何求这个最大字段和，不难发现对每个数都对应一个不同的序列，所以直接算比较困难。但是同时又发现，如果将序列排序后再考虑这一点，每个点的数列旨在前一个点的基础上进行了一次点修改，于是可以主席树来维护这个值的变化序列，然后考虑区间分治的方法求最大子段和即可。</p>\n<p>&emsp;&emsp;如何做第三题呢？首先如果只有这一组询问显然是很好做的，直接扫一遍即可。<br>&emsp;&emsp;然后考虑多组询问的情况如果将所有左区间相同的询问，可以将从这个点开始到最右端的数列离散化到一个表里，然后每次就在这个表里根据右区间的不同来计算答案。为了方便地查询答案，我们用数字的下标作为关键字来构造，当遇到相同的数字时就将其放在最左边的出现位置然后删去其他点的影响即可，然后每次查询就等价于求一次区间和。所以可以每一次将端点往左边移一位最多只有一次修改，直接构造类主席树即可。</p>"},{"title":"Some Summaries","date":"2017-06-28T10:40:36.000Z","_content":"\n### 瞎扯\n&emsp;&emsp;NOI集训就这么飞快的结束了, 期末考试也即将到来, 感觉最近事情挺多的, 也有一些事情感觉不能安排的很好,  在这里随便吐槽几句, 顺便对接下来的一些主要计划做一些安排.\n\n<!--more-->\n\n### 一. 集训总结\n&emsp;&emsp;整体上来说集训期间的表现还算中规中矩, 没什么特别大的失误, 该拿到的分也都拿到了, 但是对于一些相对较难的题目也还存在很大的问题, 而且回想起来也不主要是知识点的漏洞, 还有很多思维的局限性和过于复杂地考虑问题的因素在其中.\n\n&emsp;&emsp;比较典型的失误有: 某天的一道简单地环套树Dp题, 想出正解之后写了一个很长的方程, 使得问题极大地复杂化了, 还有一个计数题, 写出 $ O(n^2) $ 的暴力以后发现卡不过$ 10000 $ 的常数, 然后连打表这种简单思路都没有想到, 丢了很多应有的分, 还有最后一天考试的显然的树形dp题, 强行写虚树建图跑了一次网络流.\n\n&emsp;&emsp;我认为这些失误都非常可笑, 作为算法竞赛选手我要做的应该是努力简化问题, 简化代码, 遵循 $ K.I.S.S. $ 的原则. 同时虽然这些失误没有影响我最终做出某道题, 但是极大地影响了我做其他题目的时间, 这需要在考试时更多的分析和深入思考, 探究问题的本质.\n\n### 二.计划安排\n&emsp;&emsp;接下来的话主要目标放在出题和打比赛上面, 当然更重要的是不断调整自己的状态, 不管是在教室还是在机房, 都认真尽自己的全力去做到更好, 不辜负自己的期许吧.\n\n- 回到教室后尽力适应文化课的学习, 尽管不参加考试也要努力补好落下的课.\n- 尽可能打好接下来的每一场Ac, Cf(有条件的话)比赛, 并写一些比较好的题的总结.\n- 刷一些比较清流的计数和概率题.\n- 利用空闲时间研究高等数学和具体数学, 为暑假后认真学习数学相关的计划做准备.\n\n更多的事情也暂时不去想了, 毕竟贪多嚼不烂, 一步一步走好走稳才是关键.\n另外接下来希望能够少说多做, 变得更加淡定吧.\n","source":"_drafts/sm_and_pl.md","raw":"---\ntitle: Some Summaries\ndate: 2017-06-28 18:40:36\ntags:\n    - Plan or Summary\n---\n\n### 瞎扯\n&emsp;&emsp;NOI集训就这么飞快的结束了, 期末考试也即将到来, 感觉最近事情挺多的, 也有一些事情感觉不能安排的很好,  在这里随便吐槽几句, 顺便对接下来的一些主要计划做一些安排.\n\n<!--more-->\n\n### 一. 集训总结\n&emsp;&emsp;整体上来说集训期间的表现还算中规中矩, 没什么特别大的失误, 该拿到的分也都拿到了, 但是对于一些相对较难的题目也还存在很大的问题, 而且回想起来也不主要是知识点的漏洞, 还有很多思维的局限性和过于复杂地考虑问题的因素在其中.\n\n&emsp;&emsp;比较典型的失误有: 某天的一道简单地环套树Dp题, 想出正解之后写了一个很长的方程, 使得问题极大地复杂化了, 还有一个计数题, 写出 $ O(n^2) $ 的暴力以后发现卡不过$ 10000 $ 的常数, 然后连打表这种简单思路都没有想到, 丢了很多应有的分, 还有最后一天考试的显然的树形dp题, 强行写虚树建图跑了一次网络流.\n\n&emsp;&emsp;我认为这些失误都非常可笑, 作为算法竞赛选手我要做的应该是努力简化问题, 简化代码, 遵循 $ K.I.S.S. $ 的原则. 同时虽然这些失误没有影响我最终做出某道题, 但是极大地影响了我做其他题目的时间, 这需要在考试时更多的分析和深入思考, 探究问题的本质.\n\n### 二.计划安排\n&emsp;&emsp;接下来的话主要目标放在出题和打比赛上面, 当然更重要的是不断调整自己的状态, 不管是在教室还是在机房, 都认真尽自己的全力去做到更好, 不辜负自己的期许吧.\n\n- 回到教室后尽力适应文化课的学习, 尽管不参加考试也要努力补好落下的课.\n- 尽可能打好接下来的每一场Ac, Cf(有条件的话)比赛, 并写一些比较好的题的总结.\n- 刷一些比较清流的计数和概率题.\n- 利用空闲时间研究高等数学和具体数学, 为暑假后认真学习数学相关的计划做准备.\n\n更多的事情也暂时不去想了, 毕竟贪多嚼不烂, 一步一步走好走稳才是关键.\n另外接下来希望能够少说多做, 变得更加淡定吧.\n","slug":"sm_and_pl","published":0,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cmk000nonisdf09sfhz","content":"<h3 id=\"瞎扯\"><a href=\"#瞎扯\" class=\"headerlink\" title=\"瞎扯\"></a>瞎扯</h3><p>&emsp;&emsp;NOI集训就这么飞快的结束了, 期末考试也即将到来, 感觉最近事情挺多的, 也有一些事情感觉不能安排的很好,  在这里随便吐槽几句, 顺便对接下来的一些主要计划做一些安排.</p>\n<a id=\"more\"></a>\n<h3 id=\"一-集训总结\"><a href=\"#一-集训总结\" class=\"headerlink\" title=\"一. 集训总结\"></a>一. 集训总结</h3><p>&emsp;&emsp;整体上来说集训期间的表现还算中规中矩, 没什么特别大的失误, 该拿到的分也都拿到了, 但是对于一些相对较难的题目也还存在很大的问题, 而且回想起来也不主要是知识点的漏洞, 还有很多思维的局限性和过于复杂地考虑问题的因素在其中.</p>\n<p>&emsp;&emsp;比较典型的失误有: 某天的一道简单地环套树Dp题, 想出正解之后写了一个很长的方程, 使得问题极大地复杂化了, 还有一个计数题, 写出 $ O(n^2) $ 的暴力以后发现卡不过$ 10000 $ 的常数, 然后连打表这种简单思路都没有想到, 丢了很多应有的分, 还有最后一天考试的显然的树形dp题, 强行写虚树建图跑了一次网络流.</p>\n<p>&emsp;&emsp;我认为这些失误都非常可笑, 作为算法竞赛选手我要做的应该是努力简化问题, 简化代码, 遵循 $ K.I.S.S. $ 的原则. 同时虽然这些失误没有影响我最终做出某道题, 但是极大地影响了我做其他题目的时间, 这需要在考试时更多的分析和深入思考, 探究问题的本质.</p>\n<h3 id=\"二-计划安排\"><a href=\"#二-计划安排\" class=\"headerlink\" title=\"二.计划安排\"></a>二.计划安排</h3><p>&emsp;&emsp;接下来的话主要目标放在出题和打比赛上面, 当然更重要的是不断调整自己的状态, 不管是在教室还是在机房, 都认真尽自己的全力去做到更好, 不辜负自己的期许吧.</p>\n<ul>\n<li>回到教室后尽力适应文化课的学习, 尽管不参加考试也要努力补好落下的课.</li>\n<li>尽可能打好接下来的每一场Ac, Cf(有条件的话)比赛, 并写一些比较好的题的总结.</li>\n<li>刷一些比较清流的计数和概率题.</li>\n<li>利用空闲时间研究高等数学和具体数学, 为暑假后认真学习数学相关的计划做准备.</li>\n</ul>\n<p>更多的事情也暂时不去想了, 毕竟贪多嚼不烂, 一步一步走好走稳才是关键.<br>另外接下来希望能够少说多做, 变得更加淡定吧.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"瞎扯\"><a href=\"#瞎扯\" class=\"headerlink\" title=\"瞎扯\"></a>瞎扯</h3><p>&emsp;&emsp;NOI集训就这么飞快的结束了, 期末考试也即将到来, 感觉最近事情挺多的, 也有一些事情感觉不能安排的很好,  在这里随便吐槽几句, 顺便对接下来的一些主要计划做一些安排.</p>","more":"<h3 id=\"一-集训总结\"><a href=\"#一-集训总结\" class=\"headerlink\" title=\"一. 集训总结\"></a>一. 集训总结</h3><p>&emsp;&emsp;整体上来说集训期间的表现还算中规中矩, 没什么特别大的失误, 该拿到的分也都拿到了, 但是对于一些相对较难的题目也还存在很大的问题, 而且回想起来也不主要是知识点的漏洞, 还有很多思维的局限性和过于复杂地考虑问题的因素在其中.</p>\n<p>&emsp;&emsp;比较典型的失误有: 某天的一道简单地环套树Dp题, 想出正解之后写了一个很长的方程, 使得问题极大地复杂化了, 还有一个计数题, 写出 $ O(n^2) $ 的暴力以后发现卡不过$ 10000 $ 的常数, 然后连打表这种简单思路都没有想到, 丢了很多应有的分, 还有最后一天考试的显然的树形dp题, 强行写虚树建图跑了一次网络流.</p>\n<p>&emsp;&emsp;我认为这些失误都非常可笑, 作为算法竞赛选手我要做的应该是努力简化问题, 简化代码, 遵循 $ K.I.S.S. $ 的原则. 同时虽然这些失误没有影响我最终做出某道题, 但是极大地影响了我做其他题目的时间, 这需要在考试时更多的分析和深入思考, 探究问题的本质.</p>\n<h3 id=\"二-计划安排\"><a href=\"#二-计划安排\" class=\"headerlink\" title=\"二.计划安排\"></a>二.计划安排</h3><p>&emsp;&emsp;接下来的话主要目标放在出题和打比赛上面, 当然更重要的是不断调整自己的状态, 不管是在教室还是在机房, 都认真尽自己的全力去做到更好, 不辜负自己的期许吧.</p>\n<ul>\n<li>回到教室后尽力适应文化课的学习, 尽管不参加考试也要努力补好落下的课.</li>\n<li>尽可能打好接下来的每一场Ac, Cf(有条件的话)比赛, 并写一些比较好的题的总结.</li>\n<li>刷一些比较清流的计数和概率题.</li>\n<li>利用空闲时间研究高等数学和具体数学, 为暑假后认真学习数学相关的计划做准备.</li>\n</ul>\n<p>更多的事情也暂时不去想了, 毕竟贪多嚼不烂, 一步一步走好走稳才是关键.<br>另外接下来希望能够少说多做, 变得更加淡定吧.</p>"},{"title":"网络流建模技巧总结","date":"2017-02-18T16:00:00.000Z","_content":"\n### Praface\n&emsp;&emsp;求解网络流的基本方法比较简单，但是算法竞赛中网络流相关的题目往往涉及看重思路的建模技巧和方法，网络流的建模往往从几个常见思路出发，这里总结了常用的建模技巧和思路方法。\n    \n### Tricks\n\n1.最大流模型：\n&emsp;&emsp;以最大流为模型的建模比较常见也比较基础，主要用来解决一类分配（匹配）问题，但其中有一些常见技巧值得学习：\n    \n&emsp;&emsp;a)通过拆点满足结点容量限制和时间限制等条件\n&emsp;&emsp;b)在二分后利用网络流判定可行性的题目中，可以添加新边后在残量网络上继续增广\n&emsp;&emsp;c)当存在形如$\\frac{a}{2}$的容量时，不必要用double类，可以将边权都乘以2在将最大流除以2\n\n<!--more-->\n2.最小割模型：\n&emsp;&emsp;最小割的模型与最大流有较为显著的不同，主要用来解决一类取舍问题，特别地，当取舍问题满足偏序关系时，就成为了最大权闭合子图的模型。一般而言，一条S-T的路径上代表的元素中只能取一个作为一种可行方案，小技巧：\n    \n&emsp;&emsp;a)对于两条不相交的S-T路径上的限制关系或者不能出现在可行方案中的选择，用容量为$\\infty$的边来处理掉\n&emsp;&emsp;b)对于割点权的题目，可以像最大流拆点一样将点权设为边权再用最小割解决\n&emsp;&emsp;c)对于多个点之间的同种决策产生附加收益时，可以在这些点间添加新点新边，使得收益条件不满足的情况下割掉相应的新边对应的收益\n\n### Some Examples\n\n最大流：\n&emsp;&emsp;Bzoj 1189 \n&emsp;&emsp;CodeChef CALLSCHE\n&emsp;&emsp;CoGS 最长递增子序列 最小路径覆盖\n\n最小割：\n&emsp;&emsp;Bzoj 3894 2127\n&emsp;&emsp;CodeChef RIN\n&emsp;&emsp;CoGS 方格取数 骑士共存\n","source":"_drafts/网络流建模技巧总结.md","raw":"---\ntitle: 网络流建模技巧总结\ndate: 2017-02-19 00:00:00\ntags: Graph Theory\n---\n\n### Praface\n&emsp;&emsp;求解网络流的基本方法比较简单，但是算法竞赛中网络流相关的题目往往涉及看重思路的建模技巧和方法，网络流的建模往往从几个常见思路出发，这里总结了常用的建模技巧和思路方法。\n    \n### Tricks\n\n1.最大流模型：\n&emsp;&emsp;以最大流为模型的建模比较常见也比较基础，主要用来解决一类分配（匹配）问题，但其中有一些常见技巧值得学习：\n    \n&emsp;&emsp;a)通过拆点满足结点容量限制和时间限制等条件\n&emsp;&emsp;b)在二分后利用网络流判定可行性的题目中，可以添加新边后在残量网络上继续增广\n&emsp;&emsp;c)当存在形如$\\frac{a}{2}$的容量时，不必要用double类，可以将边权都乘以2在将最大流除以2\n\n<!--more-->\n2.最小割模型：\n&emsp;&emsp;最小割的模型与最大流有较为显著的不同，主要用来解决一类取舍问题，特别地，当取舍问题满足偏序关系时，就成为了最大权闭合子图的模型。一般而言，一条S-T的路径上代表的元素中只能取一个作为一种可行方案，小技巧：\n    \n&emsp;&emsp;a)对于两条不相交的S-T路径上的限制关系或者不能出现在可行方案中的选择，用容量为$\\infty$的边来处理掉\n&emsp;&emsp;b)对于割点权的题目，可以像最大流拆点一样将点权设为边权再用最小割解决\n&emsp;&emsp;c)对于多个点之间的同种决策产生附加收益时，可以在这些点间添加新点新边，使得收益条件不满足的情况下割掉相应的新边对应的收益\n\n### Some Examples\n\n最大流：\n&emsp;&emsp;Bzoj 1189 \n&emsp;&emsp;CodeChef CALLSCHE\n&emsp;&emsp;CoGS 最长递增子序列 最小路径覆盖\n\n最小割：\n&emsp;&emsp;Bzoj 3894 2127\n&emsp;&emsp;CodeChef RIN\n&emsp;&emsp;CoGS 方格取数 骑士共存\n","slug":"网络流建模技巧总结","published":0,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cmm000ponisclweq4in","content":"<h3 id=\"Praface\"><a href=\"#Praface\" class=\"headerlink\" title=\"Praface\"></a>Praface</h3><p>&emsp;&emsp;求解网络流的基本方法比较简单，但是算法竞赛中网络流相关的题目往往涉及看重思路的建模技巧和方法，网络流的建模往往从几个常见思路出发，这里总结了常用的建模技巧和思路方法。</p>\n<h3 id=\"Tricks\"><a href=\"#Tricks\" class=\"headerlink\" title=\"Tricks\"></a>Tricks</h3><p>1.最大流模型：<br>&emsp;&emsp;以最大流为模型的建模比较常见也比较基础，主要用来解决一类分配（匹配）问题，但其中有一些常见技巧值得学习：</p>\n<p>&emsp;&emsp;a)通过拆点满足结点容量限制和时间限制等条件<br>&emsp;&emsp;b)在二分后利用网络流判定可行性的题目中，可以添加新边后在残量网络上继续增广<br>&emsp;&emsp;c)当存在形如$\\frac{a}{2}$的容量时，不必要用double类，可以将边权都乘以2在将最大流除以2</p>\n<a id=\"more\"></a>\n<p>2.最小割模型：<br>&emsp;&emsp;最小割的模型与最大流有较为显著的不同，主要用来解决一类取舍问题，特别地，当取舍问题满足偏序关系时，就成为了最大权闭合子图的模型。一般而言，一条S-T的路径上代表的元素中只能取一个作为一种可行方案，小技巧：</p>\n<p>&emsp;&emsp;a)对于两条不相交的S-T路径上的限制关系或者不能出现在可行方案中的选择，用容量为$\\infty$的边来处理掉<br>&emsp;&emsp;b)对于割点权的题目，可以像最大流拆点一样将点权设为边权再用最小割解决<br>&emsp;&emsp;c)对于多个点之间的同种决策产生附加收益时，可以在这些点间添加新点新边，使得收益条件不满足的情况下割掉相应的新边对应的收益</p>\n<h3 id=\"Some-Examples\"><a href=\"#Some-Examples\" class=\"headerlink\" title=\"Some Examples\"></a>Some Examples</h3><p>最大流：<br>&emsp;&emsp;Bzoj 1189<br>&emsp;&emsp;CodeChef CALLSCHE<br>&emsp;&emsp;CoGS 最长递增子序列 最小路径覆盖</p>\n<p>最小割：<br>&emsp;&emsp;Bzoj 3894 2127<br>&emsp;&emsp;CodeChef RIN<br>&emsp;&emsp;CoGS 方格取数 骑士共存</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Praface\"><a href=\"#Praface\" class=\"headerlink\" title=\"Praface\"></a>Praface</h3><p>&emsp;&emsp;求解网络流的基本方法比较简单，但是算法竞赛中网络流相关的题目往往涉及看重思路的建模技巧和方法，网络流的建模往往从几个常见思路出发，这里总结了常用的建模技巧和思路方法。</p>\n<h3 id=\"Tricks\"><a href=\"#Tricks\" class=\"headerlink\" title=\"Tricks\"></a>Tricks</h3><p>1.最大流模型：<br>&emsp;&emsp;以最大流为模型的建模比较常见也比较基础，主要用来解决一类分配（匹配）问题，但其中有一些常见技巧值得学习：</p>\n<p>&emsp;&emsp;a)通过拆点满足结点容量限制和时间限制等条件<br>&emsp;&emsp;b)在二分后利用网络流判定可行性的题目中，可以添加新边后在残量网络上继续增广<br>&emsp;&emsp;c)当存在形如$\\frac{a}{2}$的容量时，不必要用double类，可以将边权都乘以2在将最大流除以2</p>","more":"<p>2.最小割模型：<br>&emsp;&emsp;最小割的模型与最大流有较为显著的不同，主要用来解决一类取舍问题，特别地，当取舍问题满足偏序关系时，就成为了最大权闭合子图的模型。一般而言，一条S-T的路径上代表的元素中只能取一个作为一种可行方案，小技巧：</p>\n<p>&emsp;&emsp;a)对于两条不相交的S-T路径上的限制关系或者不能出现在可行方案中的选择，用容量为$\\infty$的边来处理掉<br>&emsp;&emsp;b)对于割点权的题目，可以像最大流拆点一样将点权设为边权再用最小割解决<br>&emsp;&emsp;c)对于多个点之间的同种决策产生附加收益时，可以在这些点间添加新点新边，使得收益条件不满足的情况下割掉相应的新边对应的收益</p>\n<h3 id=\"Some-Examples\"><a href=\"#Some-Examples\" class=\"headerlink\" title=\"Some Examples\"></a>Some Examples</h3><p>最大流：<br>&emsp;&emsp;Bzoj 1189<br>&emsp;&emsp;CodeChef CALLSCHE<br>&emsp;&emsp;CoGS 最长递增子序列 最小路径覆盖</p>\n<p>最小割：<br>&emsp;&emsp;Bzoj 3894 2127<br>&emsp;&emsp;CodeChef RIN<br>&emsp;&emsp;CoGS 方格取数 骑士共存</p>"},{"title":"写在NOIP2017之后","date":"2017-11-13T00:24:59.000Z","_content":"\n### 引\n> 本来应该有另一篇博客叫做写在NOIP2017之前的, 但跑回家才意识到博客搭在机房的电脑上, 于是......\n\n<!--more-->\n\n### 比赛过程\n\n#### Day1\n\n看到这个T1不送分了, 心里还是有点虚, 认真地读完了后面两题平复了一下心态.\n想着既然是T1, 肯定不是送就是偷, 看着样例找了找规律, 推了个 $ a + b + (b \\% a) (a < b) $ 的方法, 发现过不了大样例. 于是盯着大样例发呆, 突然发现了世界的奥秘.\n然后写T2, 写完眼查了一下大样例, 正要关闭窗口的时候 Vimdiff 了一波, 发现自己大小写写错一大堆...\nT3想了想写了个不考虑零边的记忆化搜索, 发现大样例过不了 认真思考了一下发现是没有考虑到达终点又折返的情况 又想了想发现 $-1$ 挺好判的, 就加上了.\n\n#### Day2\n\n到达考场时精神状态不太好, 意识模糊地打开了题目.\n看完T2一直在想MST什么的, 感觉不太会做准备放弃时发现数据范围只有12, 于是秒懂了.\nT3没想多久推出一个平衡树的做法, 对自己代码能力过于自信没有多想就开始写, 结果调到最后一刻还是GG了.\n\n### 反思错误\n\n感觉这次虽然题目比较奇怪, 但实际难度还是合理的, 出现了一些失误恰恰暴露出身上的一些问题.\n\n- 考试的时候大部分处在一种边想边写的状态, 一边写可能还要一边完善一些细节.\n- 刷了很多Atcoder 的题目之后, 代码能力退化明显.\n- 考场的debuff比较强.\n\n可能后面两条还稍微可以接受吧, 但是第一条的确是硬伤, 这样做简单题或者在比较清醒的时候写题可能还好,  然而一旦遇到代码实现比较复杂或者条件比较多的题目, 就会挂得很惨, 这个问题模拟赛中也出现过几次.\n解决的策略其实说起来也不难, 主要就是每道题写之前把算法细节考虑基本清楚, 做到 $ Think \\,\\, twice, Code \\,\\, once $ 吧. 这样也不会出现某道题写了很久最后发现做法是错误的这种尴尬的情况也能够避免写一些特别复杂的做法.\n\n### 关于未来\n\n针对这次联赛的问题和原来的一些弱点, 对接下来的一段学习做一些规划：\n\n- 补一些数学相关的知识（不一定OI相关）\n- 提高一下代码能力, 复习一些不熟练的数据结构, 刷一些质量比较高的题目\n\n然后的话, 回去就要补文化了吧.\n","source":"_posts/after-noip-2017.md","raw":"---\ntitle: 写在NOIP2017之后\ndate: 2017-11-13 08:24:59\ntags: \n    - Summary\n---\n\n### 引\n> 本来应该有另一篇博客叫做写在NOIP2017之前的, 但跑回家才意识到博客搭在机房的电脑上, 于是......\n\n<!--more-->\n\n### 比赛过程\n\n#### Day1\n\n看到这个T1不送分了, 心里还是有点虚, 认真地读完了后面两题平复了一下心态.\n想着既然是T1, 肯定不是送就是偷, 看着样例找了找规律, 推了个 $ a + b + (b \\% a) (a < b) $ 的方法, 发现过不了大样例. 于是盯着大样例发呆, 突然发现了世界的奥秘.\n然后写T2, 写完眼查了一下大样例, 正要关闭窗口的时候 Vimdiff 了一波, 发现自己大小写写错一大堆...\nT3想了想写了个不考虑零边的记忆化搜索, 发现大样例过不了 认真思考了一下发现是没有考虑到达终点又折返的情况 又想了想发现 $-1$ 挺好判的, 就加上了.\n\n#### Day2\n\n到达考场时精神状态不太好, 意识模糊地打开了题目.\n看完T2一直在想MST什么的, 感觉不太会做准备放弃时发现数据范围只有12, 于是秒懂了.\nT3没想多久推出一个平衡树的做法, 对自己代码能力过于自信没有多想就开始写, 结果调到最后一刻还是GG了.\n\n### 反思错误\n\n感觉这次虽然题目比较奇怪, 但实际难度还是合理的, 出现了一些失误恰恰暴露出身上的一些问题.\n\n- 考试的时候大部分处在一种边想边写的状态, 一边写可能还要一边完善一些细节.\n- 刷了很多Atcoder 的题目之后, 代码能力退化明显.\n- 考场的debuff比较强.\n\n可能后面两条还稍微可以接受吧, 但是第一条的确是硬伤, 这样做简单题或者在比较清醒的时候写题可能还好,  然而一旦遇到代码实现比较复杂或者条件比较多的题目, 就会挂得很惨, 这个问题模拟赛中也出现过几次.\n解决的策略其实说起来也不难, 主要就是每道题写之前把算法细节考虑基本清楚, 做到 $ Think \\,\\, twice, Code \\,\\, once $ 吧. 这样也不会出现某道题写了很久最后发现做法是错误的这种尴尬的情况也能够避免写一些特别复杂的做法.\n\n### 关于未来\n\n针对这次联赛的问题和原来的一些弱点, 对接下来的一段学习做一些规划：\n\n- 补一些数学相关的知识（不一定OI相关）\n- 提高一下代码能力, 复习一些不熟练的数据结构, 刷一些质量比较高的题目\n\n然后的话, 回去就要补文化了吧.\n","slug":"after-noip-2017","published":1,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cmp000sonis1xnyayji","content":"<h3 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h3><blockquote>\n<p>本来应该有另一篇博客叫做写在NOIP2017之前的, 但跑回家才意识到博客搭在机房的电脑上, 于是……</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"比赛过程\"><a href=\"#比赛过程\" class=\"headerlink\" title=\"比赛过程\"></a>比赛过程</h3><h4 id=\"Day1\"><a href=\"#Day1\" class=\"headerlink\" title=\"Day1\"></a>Day1</h4><p>看到这个T1不送分了, 心里还是有点虚, 认真地读完了后面两题平复了一下心态.<br>想着既然是T1, 肯定不是送就是偷, 看着样例找了找规律, 推了个 $ a + b + (b \\% a) (a &lt; b) $ 的方法, 发现过不了大样例. 于是盯着大样例发呆, 突然发现了世界的奥秘.<br>然后写T2, 写完眼查了一下大样例, 正要关闭窗口的时候 Vimdiff 了一波, 发现自己大小写写错一大堆…<br>T3想了想写了个不考虑零边的记忆化搜索, 发现大样例过不了 认真思考了一下发现是没有考虑到达终点又折返的情况 又想了想发现 $-1$ 挺好判的, 就加上了.</p>\n<h4 id=\"Day2\"><a href=\"#Day2\" class=\"headerlink\" title=\"Day2\"></a>Day2</h4><p>到达考场时精神状态不太好, 意识模糊地打开了题目.<br>看完T2一直在想MST什么的, 感觉不太会做准备放弃时发现数据范围只有12, 于是秒懂了.<br>T3没想多久推出一个平衡树的做法, 对自己代码能力过于自信没有多想就开始写, 结果调到最后一刻还是GG了.</p>\n<h3 id=\"反思错误\"><a href=\"#反思错误\" class=\"headerlink\" title=\"反思错误\"></a>反思错误</h3><p>感觉这次虽然题目比较奇怪, 但实际难度还是合理的, 出现了一些失误恰恰暴露出身上的一些问题.</p>\n<ul>\n<li>考试的时候大部分处在一种边想边写的状态, 一边写可能还要一边完善一些细节.</li>\n<li>刷了很多Atcoder 的题目之后, 代码能力退化明显.</li>\n<li>考场的debuff比较强.</li>\n</ul>\n<p>可能后面两条还稍微可以接受吧, 但是第一条的确是硬伤, 这样做简单题或者在比较清醒的时候写题可能还好,  然而一旦遇到代码实现比较复杂或者条件比较多的题目, 就会挂得很惨, 这个问题模拟赛中也出现过几次.<br>解决的策略其实说起来也不难, 主要就是每道题写之前把算法细节考虑基本清楚, 做到 $ Think \\,\\, twice, Code \\,\\, once $ 吧. 这样也不会出现某道题写了很久最后发现做法是错误的这种尴尬的情况也能够避免写一些特别复杂的做法.</p>\n<h3 id=\"关于未来\"><a href=\"#关于未来\" class=\"headerlink\" title=\"关于未来\"></a>关于未来</h3><p>针对这次联赛的问题和原来的一些弱点, 对接下来的一段学习做一些规划：</p>\n<ul>\n<li>补一些数学相关的知识（不一定OI相关）</li>\n<li>提高一下代码能力, 复习一些不熟练的数据结构, 刷一些质量比较高的题目</li>\n</ul>\n<p>然后的话, 回去就要补文化了吧.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h3><blockquote>\n<p>本来应该有另一篇博客叫做写在NOIP2017之前的, 但跑回家才意识到博客搭在机房的电脑上, 于是……</p>\n</blockquote>","more":"<h3 id=\"比赛过程\"><a href=\"#比赛过程\" class=\"headerlink\" title=\"比赛过程\"></a>比赛过程</h3><h4 id=\"Day1\"><a href=\"#Day1\" class=\"headerlink\" title=\"Day1\"></a>Day1</h4><p>看到这个T1不送分了, 心里还是有点虚, 认真地读完了后面两题平复了一下心态.<br>想着既然是T1, 肯定不是送就是偷, 看着样例找了找规律, 推了个 $ a + b + (b \\% a) (a &lt; b) $ 的方法, 发现过不了大样例. 于是盯着大样例发呆, 突然发现了世界的奥秘.<br>然后写T2, 写完眼查了一下大样例, 正要关闭窗口的时候 Vimdiff 了一波, 发现自己大小写写错一大堆…<br>T3想了想写了个不考虑零边的记忆化搜索, 发现大样例过不了 认真思考了一下发现是没有考虑到达终点又折返的情况 又想了想发现 $-1$ 挺好判的, 就加上了.</p>\n<h4 id=\"Day2\"><a href=\"#Day2\" class=\"headerlink\" title=\"Day2\"></a>Day2</h4><p>到达考场时精神状态不太好, 意识模糊地打开了题目.<br>看完T2一直在想MST什么的, 感觉不太会做准备放弃时发现数据范围只有12, 于是秒懂了.<br>T3没想多久推出一个平衡树的做法, 对自己代码能力过于自信没有多想就开始写, 结果调到最后一刻还是GG了.</p>\n<h3 id=\"反思错误\"><a href=\"#反思错误\" class=\"headerlink\" title=\"反思错误\"></a>反思错误</h3><p>感觉这次虽然题目比较奇怪, 但实际难度还是合理的, 出现了一些失误恰恰暴露出身上的一些问题.</p>\n<ul>\n<li>考试的时候大部分处在一种边想边写的状态, 一边写可能还要一边完善一些细节.</li>\n<li>刷了很多Atcoder 的题目之后, 代码能力退化明显.</li>\n<li>考场的debuff比较强.</li>\n</ul>\n<p>可能后面两条还稍微可以接受吧, 但是第一条的确是硬伤, 这样做简单题或者在比较清醒的时候写题可能还好,  然而一旦遇到代码实现比较复杂或者条件比较多的题目, 就会挂得很惨, 这个问题模拟赛中也出现过几次.<br>解决的策略其实说起来也不难, 主要就是每道题写之前把算法细节考虑基本清楚, 做到 $ Think \\,\\, twice, Code \\,\\, once $ 吧. 这样也不会出现某道题写了很久最后发现做法是错误的这种尴尬的情况也能够避免写一些特别复杂的做法.</p>\n<h3 id=\"关于未来\"><a href=\"#关于未来\" class=\"headerlink\" title=\"关于未来\"></a>关于未来</h3><p>针对这次联赛的问题和原来的一些弱点, 对接下来的一段学习做一些规划：</p>\n<ul>\n<li>补一些数学相关的知识（不一定OI相关）</li>\n<li>提高一下代码能力, 复习一些不熟练的数据结构, 刷一些质量比较高的题目</li>\n</ul>\n<p>然后的话, 回去就要补文化了吧.</p>"},{"title":"Summary of Suffix Automaton","date":"2017-04-10T16:00:00.000Z","_content":"\n### Definition\n\n&emsp;&emsp;后缀自动机（以下简称SAM）是一个典型的有限状态自动机，定义在给定的字符集上，可识别状态为一个字符串的所有子串，可以证明这个自动机的状态数和转移数都是线性的，常用于处理子串出现次数、字典序相关的字符串问题、以及要求强制在线的字符串匹配问题。\n\n一些定义：\n\n- $link(s)$ 状态s的后缀链接状态\n- $len(s)$ 状态s的最长表示长度\n- $trans(s, c)$ 在状态s下加入字符c能到达的转移状态\n- $endpos(s)$ 状态s所对应的字符串出现在原串中的位置集合\n\n### Status in SAM\n\n&emsp;&emsp;与一般自动机不同，在SAM中，一个状态对应的是一个字符串的集合，而且这个集合是原串的一段长度连续的子串。同时后缀自动机的状态有许多性质，考虑trans边的时候它是一个DAG，而考虑link边的时候它又成了一棵树（事实上，这就是俗称的后缀树），本文接下来的部分将从这两个方面来讨论SAM的一些性质。\n\n<!--more-->\n#### &emsp; 1.Trans （DAG）\n\n&emsp;&emsp;$trans$边的定义与一般的有限状态自动机类似，表示一种合法的状态转移关系，简而言之就是在一个字符串的末尾添加一个字符，同时使得新的字符串是一个合法的串。\n\n&emsp;&emsp;在SAM中，这个性质仍然成立但是要注意的是因为一个状态对应的不只有一个字符串，所以一个状态的trans状态**不一定恰好是这个状态的转移状态，还包括其他的状态转移到的状态**。\n\n&emsp;&emsp;性质：不同状态的endpos集合必定不同。理由：如果两个状态的endpos集合是相同的，那么它们的后继状态就是相同的，那么在DAG上，这两个点就可以合并从而减少状态数。\n\n#### &emsp; 2.Link （Tree）\n\n&emsp;&emsp;前面已经提到，SAM中的一个状态的endpos集合是固定的，在这种情况下满足条件的子串就是一段长度连续的子串，$link$边的定义就是**满足表示的子串集合恰好是当前状态所有子串的后缀**的状态中，**$len$值最大**的那个。\n\n&emsp;&emsp;那么我们就不难发现，一个状态和它的$link$之间的endpos集合恰好是包含关系。事实上，因为后缀自动机的一个状态表示的所有子串endpos集合相同，所以**任意两个状态的endpos集合之间仅存在不相交关系和包含关系**。\n\n### Construction of SAM\n\n&emsp;&emsp;后缀自动机的构建采用增量法，假设当前已经处理好了原串的一个前缀的SAM，那么新加入的状态就是前缀的任意一个后缀加入当前字符所产生的新的子串。\n\n&emsp;&emsp;那么我们可以沿着$link$边不断地往回跳，顺次遍历前缀的每一个后缀，并依次考虑加入新字符后的转移，如果不存在这种转移，则说明这个子串是第一次出现，添加这个转移指向新建节点即可。如果存在这个转移而且转移得到的状态的$len$恰好在原状态的基础上加了1，那么说明这个串独立地作为一个状态**在原前缀串中出现过并且它的所有后缀都曾出现过**，直接将新点的$link$指向这个点即可。否则说明这个串**出现过但是和别的一些串合并在一起**，现在这个串的endpos集合发生了改变（加上了最后一次出现的位置），所以需要一个新的点来表示这个串，然后把原来的和这个串之前所在状态相连的转移接到这个点上，剩下的点不用管（想一想，为什么）。\n\n&emsp;&emsp;讲了这么多其实代码很好写：\n\n```cpp\nvoid extend(int c) {\n    int p = lst, cur = newnode(len[p]+1);\n\n    while(p && !trans[p][c]) trans[p][c] = cur, p = link[p];\n\n    if(!p) link[cur] = 1;\n    else {\n        int q = trans[p][c];\n        if(len[q] == len[p] + 1) link[cur] = q;\n        else {\n            int nq = newnode(len[p]+1);$\n            memcpy(trans[nq], trans[q], sizeof trans[q]);\n            link[nq] = link[q];\n            link[cur] = link[q] = nq;\n            while(p && trans[p][c] == q) trans[p][c] = nq, p = link[p];\n        }\n    }lst = cur;\n}\n```\n","source":"_drafts/SAM.md","raw":"---\ntitle: Summary of Suffix Automaton\ndate: 2017-04-11\ntags:\n    - StringMatch\n---\n\n### Definition\n\n&emsp;&emsp;后缀自动机（以下简称SAM）是一个典型的有限状态自动机，定义在给定的字符集上，可识别状态为一个字符串的所有子串，可以证明这个自动机的状态数和转移数都是线性的，常用于处理子串出现次数、字典序相关的字符串问题、以及要求强制在线的字符串匹配问题。\n\n一些定义：\n\n- $link(s)$ 状态s的后缀链接状态\n- $len(s)$ 状态s的最长表示长度\n- $trans(s, c)$ 在状态s下加入字符c能到达的转移状态\n- $endpos(s)$ 状态s所对应的字符串出现在原串中的位置集合\n\n### Status in SAM\n\n&emsp;&emsp;与一般自动机不同，在SAM中，一个状态对应的是一个字符串的集合，而且这个集合是原串的一段长度连续的子串。同时后缀自动机的状态有许多性质，考虑trans边的时候它是一个DAG，而考虑link边的时候它又成了一棵树（事实上，这就是俗称的后缀树），本文接下来的部分将从这两个方面来讨论SAM的一些性质。\n\n<!--more-->\n#### &emsp; 1.Trans （DAG）\n\n&emsp;&emsp;$trans$边的定义与一般的有限状态自动机类似，表示一种合法的状态转移关系，简而言之就是在一个字符串的末尾添加一个字符，同时使得新的字符串是一个合法的串。\n\n&emsp;&emsp;在SAM中，这个性质仍然成立但是要注意的是因为一个状态对应的不只有一个字符串，所以一个状态的trans状态**不一定恰好是这个状态的转移状态，还包括其他的状态转移到的状态**。\n\n&emsp;&emsp;性质：不同状态的endpos集合必定不同。理由：如果两个状态的endpos集合是相同的，那么它们的后继状态就是相同的，那么在DAG上，这两个点就可以合并从而减少状态数。\n\n#### &emsp; 2.Link （Tree）\n\n&emsp;&emsp;前面已经提到，SAM中的一个状态的endpos集合是固定的，在这种情况下满足条件的子串就是一段长度连续的子串，$link$边的定义就是**满足表示的子串集合恰好是当前状态所有子串的后缀**的状态中，**$len$值最大**的那个。\n\n&emsp;&emsp;那么我们就不难发现，一个状态和它的$link$之间的endpos集合恰好是包含关系。事实上，因为后缀自动机的一个状态表示的所有子串endpos集合相同，所以**任意两个状态的endpos集合之间仅存在不相交关系和包含关系**。\n\n### Construction of SAM\n\n&emsp;&emsp;后缀自动机的构建采用增量法，假设当前已经处理好了原串的一个前缀的SAM，那么新加入的状态就是前缀的任意一个后缀加入当前字符所产生的新的子串。\n\n&emsp;&emsp;那么我们可以沿着$link$边不断地往回跳，顺次遍历前缀的每一个后缀，并依次考虑加入新字符后的转移，如果不存在这种转移，则说明这个子串是第一次出现，添加这个转移指向新建节点即可。如果存在这个转移而且转移得到的状态的$len$恰好在原状态的基础上加了1，那么说明这个串独立地作为一个状态**在原前缀串中出现过并且它的所有后缀都曾出现过**，直接将新点的$link$指向这个点即可。否则说明这个串**出现过但是和别的一些串合并在一起**，现在这个串的endpos集合发生了改变（加上了最后一次出现的位置），所以需要一个新的点来表示这个串，然后把原来的和这个串之前所在状态相连的转移接到这个点上，剩下的点不用管（想一想，为什么）。\n\n&emsp;&emsp;讲了这么多其实代码很好写：\n\n```cpp\nvoid extend(int c) {\n    int p = lst, cur = newnode(len[p]+1);\n\n    while(p && !trans[p][c]) trans[p][c] = cur, p = link[p];\n\n    if(!p) link[cur] = 1;\n    else {\n        int q = trans[p][c];\n        if(len[q] == len[p] + 1) link[cur] = q;\n        else {\n            int nq = newnode(len[p]+1);$\n            memcpy(trans[nq], trans[q], sizeof trans[q]);\n            link[nq] = link[q];\n            link[cur] = link[q] = nq;\n            while(p && trans[p][c] == q) trans[p][c] = nq, p = link[p];\n        }\n    }lst = cur;\n}\n```\n","slug":"SAM","published":0,"updated":"2017-12-21T08:11:31.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cmr000uonis6qbhjwht","content":"<h3 id=\"Definition\"><a href=\"#Definition\" class=\"headerlink\" title=\"Definition\"></a>Definition</h3><p>&emsp;&emsp;后缀自动机（以下简称SAM）是一个典型的有限状态自动机，定义在给定的字符集上，可识别状态为一个字符串的所有子串，可以证明这个自动机的状态数和转移数都是线性的，常用于处理子串出现次数、字典序相关的字符串问题、以及要求强制在线的字符串匹配问题。</p>\n<p>一些定义：</p>\n<ul>\n<li>$link(s)$ 状态s的后缀链接状态</li>\n<li>$len(s)$ 状态s的最长表示长度</li>\n<li>$trans(s, c)$ 在状态s下加入字符c能到达的转移状态</li>\n<li>$endpos(s)$ 状态s所对应的字符串出现在原串中的位置集合</li>\n</ul>\n<h3 id=\"Status-in-SAM\"><a href=\"#Status-in-SAM\" class=\"headerlink\" title=\"Status in SAM\"></a>Status in SAM</h3><p>&emsp;&emsp;与一般自动机不同，在SAM中，一个状态对应的是一个字符串的集合，而且这个集合是原串的一段长度连续的子串。同时后缀自动机的状态有许多性质，考虑trans边的时候它是一个DAG，而考虑link边的时候它又成了一棵树（事实上，这就是俗称的后缀树），本文接下来的部分将从这两个方面来讨论SAM的一些性质。</p>\n<a id=\"more\"></a>\n<h4 id=\"emsp-1-Trans-（DAG）\"><a href=\"#emsp-1-Trans-（DAG）\" class=\"headerlink\" title=\"&emsp; 1.Trans （DAG）\"></a>&emsp; 1.Trans （DAG）</h4><p>&emsp;&emsp;$trans$边的定义与一般的有限状态自动机类似，表示一种合法的状态转移关系，简而言之就是在一个字符串的末尾添加一个字符，同时使得新的字符串是一个合法的串。</p>\n<p>&emsp;&emsp;在SAM中，这个性质仍然成立但是要注意的是因为一个状态对应的不只有一个字符串，所以一个状态的trans状态<strong>不一定恰好是这个状态的转移状态，还包括其他的状态转移到的状态</strong>。</p>\n<p>&emsp;&emsp;性质：不同状态的endpos集合必定不同。理由：如果两个状态的endpos集合是相同的，那么它们的后继状态就是相同的，那么在DAG上，这两个点就可以合并从而减少状态数。</p>\n<h4 id=\"emsp-2-Link-（Tree）\"><a href=\"#emsp-2-Link-（Tree）\" class=\"headerlink\" title=\"&emsp; 2.Link （Tree）\"></a>&emsp; 2.Link （Tree）</h4><p>&emsp;&emsp;前面已经提到，SAM中的一个状态的endpos集合是固定的，在这种情况下满足条件的子串就是一段长度连续的子串，$link$边的定义就是<strong>满足表示的子串集合恰好是当前状态所有子串的后缀</strong>的状态中，<strong>$len$值最大</strong>的那个。</p>\n<p>&emsp;&emsp;那么我们就不难发现，一个状态和它的$link$之间的endpos集合恰好是包含关系。事实上，因为后缀自动机的一个状态表示的所有子串endpos集合相同，所以<strong>任意两个状态的endpos集合之间仅存在不相交关系和包含关系</strong>。</p>\n<h3 id=\"Construction-of-SAM\"><a href=\"#Construction-of-SAM\" class=\"headerlink\" title=\"Construction of SAM\"></a>Construction of SAM</h3><p>&emsp;&emsp;后缀自动机的构建采用增量法，假设当前已经处理好了原串的一个前缀的SAM，那么新加入的状态就是前缀的任意一个后缀加入当前字符所产生的新的子串。</p>\n<p>&emsp;&emsp;那么我们可以沿着$link$边不断地往回跳，顺次遍历前缀的每一个后缀，并依次考虑加入新字符后的转移，如果不存在这种转移，则说明这个子串是第一次出现，添加这个转移指向新建节点即可。如果存在这个转移而且转移得到的状态的$len$恰好在原状态的基础上加了1，那么说明这个串独立地作为一个状态<strong>在原前缀串中出现过并且它的所有后缀都曾出现过</strong>，直接将新点的$link$指向这个点即可。否则说明这个串<strong>出现过但是和别的一些串合并在一起</strong>，现在这个串的endpos集合发生了改变（加上了最后一次出现的位置），所以需要一个新的点来表示这个串，然后把原来的和这个串之前所在状态相连的转移接到这个点上，剩下的点不用管（想一想，为什么）。</p>\n<p>&emsp;&emsp;讲了这么多其实代码很好写：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> p = lst, cur = newnode(len[p]+<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; !trans[p][c]) trans[p][c] = cur, p = link[p];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!p) link[cur] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> q = trans[p][c];</div><div class=\"line\">        <span class=\"keyword\">if</span>(len[q] == len[p] + <span class=\"number\">1</span>) link[cur] = q;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nq = newnode(len[p]+<span class=\"number\">1</span>);$</div><div class=\"line\">            <span class=\"built_in\">memcpy</span>(trans[nq], trans[q], <span class=\"keyword\">sizeof</span> trans[q]);</div><div class=\"line\">            link[nq] = link[q];</div><div class=\"line\">            link[cur] = link[q] = nq;</div><div class=\"line\">            <span class=\"keyword\">while</span>(p &amp;&amp; trans[p][c] == q) trans[p][c] = nq, p = link[p];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;lst = cur;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Definition\"><a href=\"#Definition\" class=\"headerlink\" title=\"Definition\"></a>Definition</h3><p>&emsp;&emsp;后缀自动机（以下简称SAM）是一个典型的有限状态自动机，定义在给定的字符集上，可识别状态为一个字符串的所有子串，可以证明这个自动机的状态数和转移数都是线性的，常用于处理子串出现次数、字典序相关的字符串问题、以及要求强制在线的字符串匹配问题。</p>\n<p>一些定义：</p>\n<ul>\n<li>$link(s)$ 状态s的后缀链接状态</li>\n<li>$len(s)$ 状态s的最长表示长度</li>\n<li>$trans(s, c)$ 在状态s下加入字符c能到达的转移状态</li>\n<li>$endpos(s)$ 状态s所对应的字符串出现在原串中的位置集合</li>\n</ul>\n<h3 id=\"Status-in-SAM\"><a href=\"#Status-in-SAM\" class=\"headerlink\" title=\"Status in SAM\"></a>Status in SAM</h3><p>&emsp;&emsp;与一般自动机不同，在SAM中，一个状态对应的是一个字符串的集合，而且这个集合是原串的一段长度连续的子串。同时后缀自动机的状态有许多性质，考虑trans边的时候它是一个DAG，而考虑link边的时候它又成了一棵树（事实上，这就是俗称的后缀树），本文接下来的部分将从这两个方面来讨论SAM的一些性质。</p>","more":"<h4 id=\"emsp-1-Trans-（DAG）\"><a href=\"#emsp-1-Trans-（DAG）\" class=\"headerlink\" title=\"&emsp; 1.Trans （DAG）\"></a>&emsp; 1.Trans （DAG）</h4><p>&emsp;&emsp;$trans$边的定义与一般的有限状态自动机类似，表示一种合法的状态转移关系，简而言之就是在一个字符串的末尾添加一个字符，同时使得新的字符串是一个合法的串。</p>\n<p>&emsp;&emsp;在SAM中，这个性质仍然成立但是要注意的是因为一个状态对应的不只有一个字符串，所以一个状态的trans状态<strong>不一定恰好是这个状态的转移状态，还包括其他的状态转移到的状态</strong>。</p>\n<p>&emsp;&emsp;性质：不同状态的endpos集合必定不同。理由：如果两个状态的endpos集合是相同的，那么它们的后继状态就是相同的，那么在DAG上，这两个点就可以合并从而减少状态数。</p>\n<h4 id=\"emsp-2-Link-（Tree）\"><a href=\"#emsp-2-Link-（Tree）\" class=\"headerlink\" title=\"&emsp; 2.Link （Tree）\"></a>&emsp; 2.Link （Tree）</h4><p>&emsp;&emsp;前面已经提到，SAM中的一个状态的endpos集合是固定的，在这种情况下满足条件的子串就是一段长度连续的子串，$link$边的定义就是<strong>满足表示的子串集合恰好是当前状态所有子串的后缀</strong>的状态中，<strong>$len$值最大</strong>的那个。</p>\n<p>&emsp;&emsp;那么我们就不难发现，一个状态和它的$link$之间的endpos集合恰好是包含关系。事实上，因为后缀自动机的一个状态表示的所有子串endpos集合相同，所以<strong>任意两个状态的endpos集合之间仅存在不相交关系和包含关系</strong>。</p>\n<h3 id=\"Construction-of-SAM\"><a href=\"#Construction-of-SAM\" class=\"headerlink\" title=\"Construction of SAM\"></a>Construction of SAM</h3><p>&emsp;&emsp;后缀自动机的构建采用增量法，假设当前已经处理好了原串的一个前缀的SAM，那么新加入的状态就是前缀的任意一个后缀加入当前字符所产生的新的子串。</p>\n<p>&emsp;&emsp;那么我们可以沿着$link$边不断地往回跳，顺次遍历前缀的每一个后缀，并依次考虑加入新字符后的转移，如果不存在这种转移，则说明这个子串是第一次出现，添加这个转移指向新建节点即可。如果存在这个转移而且转移得到的状态的$len$恰好在原状态的基础上加了1，那么说明这个串独立地作为一个状态<strong>在原前缀串中出现过并且它的所有后缀都曾出现过</strong>，直接将新点的$link$指向这个点即可。否则说明这个串<strong>出现过但是和别的一些串合并在一起</strong>，现在这个串的endpos集合发生了改变（加上了最后一次出现的位置），所以需要一个新的点来表示这个串，然后把原来的和这个串之前所在状态相连的转移接到这个点上，剩下的点不用管（想一想，为什么）。</p>\n<p>&emsp;&emsp;讲了这么多其实代码很好写：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> p = lst, cur = newnode(len[p]+<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; !trans[p][c]) trans[p][c] = cur, p = link[p];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!p) link[cur] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> q = trans[p][c];</div><div class=\"line\">        <span class=\"keyword\">if</span>(len[q] == len[p] + <span class=\"number\">1</span>) link[cur] = q;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nq = newnode(len[p]+<span class=\"number\">1</span>);$</div><div class=\"line\">            <span class=\"built_in\">memcpy</span>(trans[nq], trans[q], <span class=\"keyword\">sizeof</span> trans[q]);</div><div class=\"line\">            link[nq] = link[q];</div><div class=\"line\">            link[cur] = link[q] = nq;</div><div class=\"line\">            <span class=\"keyword\">while</span>(p &amp;&amp; trans[p][c] == q) trans[p][c] = nq, p = link[p];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;lst = cur;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Codeforces Div2 418E","date":"2017-06-12T12:56:07.000Z","_content":"\n### Description\n> 求满足如下条件的 $N$ 个点的简单无向图的个数对 $ 1e9 + 7 $ 取模的结果：\n- 每个点的度数均为 $2$ 或 $3$\n- 从一号点到任何一个点的最短路唯一并且随着点标号上升而不降. \n\n(两个图不同当且仅当边的集合不同).\n$N <= 50$ \n\n<!--more-->\n\n### Solution\n我们可以记:\n- $f_{i, j}$ 表示考虑完前 $i$ 个点, 最后一层恰好有 $j$ 个点, 且最后一层之前的点度数已经满足条件时的方案数.\n- $g_{i, j, k}$ 表示当前层有 $i$ 个点, 上一层剩下来 $j$ 个度为 $2$ 的点, $k$ 个度为 $3$ 的点时连边的方案数.\n\n那么容易得到$f_{i, j} = \\sum_{k} f_{i-j, k} \\times g_{j, c0, c1}$, 其中$c0\\,,c1$表示最后一层 $k$ 个点中度为 $2$ 的点和度为 $3$ 的点的个数.\n\n对于 $g$, 不难得到:\n\n$$ \ng_{i, j, k} = \n\\begin{cases} \n    1 & i = 0, j = 0, k = 0 \\\\\n    \\sum_{l=2}^{k-1} \\frac{l!}{2} {k-1 \\choose l} g_{i, j, k-l-1} & i = 0, j = 0, k > 0 \\\\\n    (j-1) \\cdot g_{i, j-2, k} + k \\cdot g_{i, j, k-1} & i = 0, j > 0 \\\\\n    j \\cdot g_{i-1, j-1, k} + k \\cdot g_{i-1, j+1, k-1} & i > 0\n\\end{cases}\n$$\n\n### Hint\n注意在第二个递推式中 $l$ 从 $2$ 开始枚举, 因为不能有重边, 所以不存在大小为 $2$ 的环.\n","source":"_posts/cf-418e.md","raw":"---\ntitle: Codeforces Div2 418E\ndate: 2017-06-12 20:56:07\ntags:\n    - Counting Problems\n    - Dynamic Programming\n---\n\n### Description\n> 求满足如下条件的 $N$ 个点的简单无向图的个数对 $ 1e9 + 7 $ 取模的结果：\n- 每个点的度数均为 $2$ 或 $3$\n- 从一号点到任何一个点的最短路唯一并且随着点标号上升而不降. \n\n(两个图不同当且仅当边的集合不同).\n$N <= 50$ \n\n<!--more-->\n\n### Solution\n我们可以记:\n- $f_{i, j}$ 表示考虑完前 $i$ 个点, 最后一层恰好有 $j$ 个点, 且最后一层之前的点度数已经满足条件时的方案数.\n- $g_{i, j, k}$ 表示当前层有 $i$ 个点, 上一层剩下来 $j$ 个度为 $2$ 的点, $k$ 个度为 $3$ 的点时连边的方案数.\n\n那么容易得到$f_{i, j} = \\sum_{k} f_{i-j, k} \\times g_{j, c0, c1}$, 其中$c0\\,,c1$表示最后一层 $k$ 个点中度为 $2$ 的点和度为 $3$ 的点的个数.\n\n对于 $g$, 不难得到:\n\n$$ \ng_{i, j, k} = \n\\begin{cases} \n    1 & i = 0, j = 0, k = 0 \\\\\n    \\sum_{l=2}^{k-1} \\frac{l!}{2} {k-1 \\choose l} g_{i, j, k-l-1} & i = 0, j = 0, k > 0 \\\\\n    (j-1) \\cdot g_{i, j-2, k} + k \\cdot g_{i, j, k-1} & i = 0, j > 0 \\\\\n    j \\cdot g_{i-1, j-1, k} + k \\cdot g_{i-1, j+1, k-1} & i > 0\n\\end{cases}\n$$\n\n### Hint\n注意在第二个递推式中 $l$ 从 $2$ 开始枚举, 因为不能有重边, 所以不存在大小为 $2$ 的环.\n","slug":"cf-418e","published":1,"updated":"2017-12-31T03:35:58.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cmu000vonisxh2hgpql","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>求满足如下条件的 $N$ 个点的简单无向图的个数对 $ 1e9 + 7 $ 取模的结果：</p>\n<ul>\n<li>每个点的度数均为 $2$ 或 $3$</li>\n<li>从一号点到任何一个点的最短路唯一并且随着点标号上升而不降. </li>\n</ul>\n</blockquote>\n<p>(两个图不同当且仅当边的集合不同).<br>$N &lt;= 50$ </p>\n<a id=\"more\"></a>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>我们可以记:</p>\n<ul>\n<li>$f_{i, j}$ 表示考虑完前 $i$ 个点, 最后一层恰好有 $j$ 个点, 且最后一层之前的点度数已经满足条件时的方案数.</li>\n<li>$g_{i, j, k}$ 表示当前层有 $i$ 个点, 上一层剩下来 $j$ 个度为 $2$ 的点, $k$ 个度为 $3$ 的点时连边的方案数.</li>\n</ul>\n<p>那么容易得到$f_{i, j} = \\sum_{k} f_{i-j, k} \\times g_{j, c0, c1}$, 其中$c0\\,,c1$表示最后一层 $k$ 个点中度为 $2$ 的点和度为 $3$ 的点的个数.</p>\n<p>对于 $g$, 不难得到:</p>\n<script type=\"math/tex; mode=display\">\ng_{i, j, k} = \n\\begin{cases} \n    1 & i = 0, j = 0, k = 0 \\\\\n    \\sum_{l=2}^{k-1} \\frac{l!}{2} {k-1 \\choose l} g_{i, j, k-l-1} & i = 0, j = 0, k > 0 \\\\\n    (j-1) \\cdot g_{i, j-2, k} + k \\cdot g_{i, j, k-1} & i = 0, j > 0 \\\\\n    j \\cdot g_{i-1, j-1, k} + k \\cdot g_{i-1, j+1, k-1} & i > 0\n\\end{cases}</script><h3 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h3><p>注意在第二个递推式中 $l$ 从 $2$ 开始枚举, 因为不能有重边, 所以不存在大小为 $2$ 的环.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>求满足如下条件的 $N$ 个点的简单无向图的个数对 $ 1e9 + 7 $ 取模的结果：</p>\n<ul>\n<li>每个点的度数均为 $2$ 或 $3$</li>\n<li>从一号点到任何一个点的最短路唯一并且随着点标号上升而不降. </li>\n</ul>\n</blockquote>\n<p>(两个图不同当且仅当边的集合不同).<br>$N &lt;= 50$ </p>","more":"<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>我们可以记:</p>\n<ul>\n<li>$f_{i, j}$ 表示考虑完前 $i$ 个点, 最后一层恰好有 $j$ 个点, 且最后一层之前的点度数已经满足条件时的方案数.</li>\n<li>$g_{i, j, k}$ 表示当前层有 $i$ 个点, 上一层剩下来 $j$ 个度为 $2$ 的点, $k$ 个度为 $3$ 的点时连边的方案数.</li>\n</ul>\n<p>那么容易得到$f_{i, j} = \\sum_{k} f_{i-j, k} \\times g_{j, c0, c1}$, 其中$c0\\,,c1$表示最后一层 $k$ 个点中度为 $2$ 的点和度为 $3$ 的点的个数.</p>\n<p>对于 $g$, 不难得到:</p>\n<script type=\"math/tex; mode=display\">\ng_{i, j, k} = \n\\begin{cases} \n    1 & i = 0, j = 0, k = 0 \\\\\n    \\sum_{l=2}^{k-1} \\frac{l!}{2} {k-1 \\choose l} g_{i, j, k-l-1} & i = 0, j = 0, k > 0 \\\\\n    (j-1) \\cdot g_{i, j-2, k} + k \\cdot g_{i, j, k-1} & i = 0, j > 0 \\\\\n    j \\cdot g_{i-1, j-1, k} + k \\cdot g_{i-1, j+1, k-1} & i > 0\n\\end{cases}</script><h3 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h3><p>注意在第二个递推式中 $l$ 从 $2$ 开始枚举, 因为不能有重边, 所以不存在大小为 $2$ 的环.</p>"},{"title":"Codeforces 553E Kyoya and Train","date":"2017-05-03T13:21:27.000Z","_content":"\n### Description\n> 给定 $N$ 个点, $M$ 条边的有向图.\n每条边有花费: 通过第 $i$ 条边的时间有 $ P _ {i1} $ 的概率为 $1$, $P _ {i2}$ 的概率为 $2$... \n如果总用时超过 $T$ 则会被罚钱 $X$ 元, 求从 $1$ 号点到 $n$ 号点的最小期望花费.\n$ N \\leq 50, M \\leq 100, T \\leq 100000 $\n\n### Solution\n考虑暴力DP, 记状态 $ dp _ {i, t} $ 表示到达 $i$ 号点, 且经过的时间为 $t$ 的最小期望花费, 转移十分显然.\n同时因为状态之间按照时间构成一个拓扑图, 所以转移不存在环.\n\n<!--more-->\n\n可以记 $S _ {e, t}$ 表示边 $e$ 在时刻 $t$ 之后后继状态的最小期望花费. \n\n则可以用下面这个式子计算 $dp _ {e, t}$:\n\n$$ dp _ {i, t} = min \\left\\{ S _ {e, t} + cost _ e \\right\\} $$\n\n$e$ 是 $i$ 的出边.\n\n接下来考虑如何计算 $S(e,t)$, 利用定义:\n\n$$ S _ {e, t} = \\sum _ {i = 1}^{T} dp _ {to _ e, t + i} * P _ {ei} $$\n\n这样变成卷积形式, 分治 $FFT$ 即可.\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 200000 + 10;\nconst double PI = acos(-1.0);\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\n#define fst first\n#define snd second\n#define debug(x) cerr << #x << \":\" << (x) << endl\n#define REP(i, a, b) for(int i = (a), i##end = (b); i < i##end; ++i)\n#define DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i >= i##bgn; --i)\n\ntemplate<typename T> T read() {\n    T n = 0, f = 1;\n    char ch = getchar();\n    for( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\nstruct Complex {\n    double real, imag;\n    Complex(double r = 0.0, double i = 0.0): real(r), imag(i) {}\n    Complex operator + (const Complex& rhs) const {\n        return Complex(real + rhs.real, imag + rhs.imag);\n    }\n    Complex operator - (const Complex& rhs) const {\n        return Complex(real - rhs.real, imag - rhs.imag);\n    }\n    Complex operator * (const Complex& rhs) const {\n        return Complex(real*rhs.real - imag*rhs.imag, real*rhs.imag + imag*rhs.real);\n    }\n    Complex operator / (const double& div) const {\n        return Complex(real / div, imag / div);\n    }\n};\n\nint rev[maxn];\nvoid DFT(Complex *x, int N, int t) {\n    for(int i = 0; i < N; i++) \n        if(i < rev[i]) swap(x[i], x[rev[i]]);\n\n    for(int l = 2; l <= N; l <<= 1) {\n        Complex wn = Complex(cos(2*PI*t/l), sin(2*PI*t/l));\n        for(int i = 0; i < N; i += l) {\n            Complex w = Complex(1, 0);\n            for(int j = 0; j < (l >> 1); j++, w = w * wn) {\n                Complex L = x[i + j];\n                Complex R = x[i + j + (l >> 1)] * w;\n                x[i + j] = L + R;\n                x[i + j + (l >> 1)] = L - R;\n            }\n        }\n    }\n    if(!~t) for(int i = 0; i < N; i++) x[i] = x[i] / N;\n}\n\nconst int N = 100 + 5;\nint dis[N][N];\nint n, m, t, x;\n\nstruct Edge {\n    int u, v, c;\n    double p[maxn];\n\n    void input() {\n        u = read<int>(), v = read<int>(), c = read<int>();\n\n        chkmin(dis[u][v], c);\n        for(int i = 1; i <= t; i++) p[i] = double(read<int>()) / 100000.0;\n    }\n}E[N];\n\nComplex A[maxn], B[maxn];\ndouble S[N][maxn], f[N][maxn];\n\nvoid calc(int l, int r, int mid) {\n    static int base, len;\n\n    for(int k = 0; k < m; k++) {\n        int v = E[k].v;\n\n        for(base = 1, len = 0; base <= 2*r-l-mid+1; base <<= 1) ++ len;\n\n        for(int i = 0; i < base; i++) rev[i] = (rev[i>>1] >> 1) | ((i&1) << (len-1));\n        for(int i = 0; i < base; i++) A[i] = B[i] = Complex(0, 0);\n        for(int i = 0; i < r-mid; i++) A[i] = Complex(f[v][r-i], 0);\n        for(int i = 1; i <= r-l; i++) B[i-1] = Complex(E[k].p[i], 0);\n\n        DFT(A, base, 1); DFT(B, base, 1);\n        for(int i = 0; i < base; i++) A[i] = A[i] * B[i];\n        DFT(A, base, -1);\n\n        for(int i = l; i <= mid; i++) S[k][i] += A[r-i-1].real;\n    }\n}\nvoid cdq_solve(int l, int r) {\n    if(l == r) {\n        for(int i = 0; i < m; i++) \n            chkmin(f[E[i].u][l], S[i][l] + E[i].c);\n        return;\n    }\n\n    int mid = (l + r) >> 1;\n    cdq_solve(mid+1, r);\n    calc(l, r, mid);\n    cdq_solve(l, mid);\n}\n\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    memset(dis, oo, sizeof dis);\n    n = read<int>(), m = read<int>(), t = read<int>(), x = read<int>();\n\n    for(int i = 1; i <= n; i++) dis[i][i] = 0;\n    for(int i = 0; i < m; i++) E[i].input();\n    \n    for(int k = 1; k <= n; k++)\n        for(int i = 1; i <= n; i++)\n            for(int j = 1; j <= n; j++) \n                chkmin(dis[i][j], dis[i][k] + dis[k][j]);\n\n    for(int i = 1; i <= n; i++) {\n        for(int T = 0; T <= t; T++) f[i][T] = (i == n) ? 0 : oo;\n        for(int T = t+1; T <= 2*t; T++) f[i][T] = dis[i][n] + x;\n    }\n\n    calc(1, t*2, t);\n    cdq_solve(0, t);\n\n    printf(\"%.10lf\\n\", f[1][0]);\n    return 0;\n}\n```\n","source":"_posts/cf-553e.md","raw":"---\ntitle: Codeforces 553E Kyoya and Train\ntags:\n  - Dynamic Programming\n  - Probability\ndate: 2017-05-03 21:21:27\n---\n\n### Description\n> 给定 $N$ 个点, $M$ 条边的有向图.\n每条边有花费: 通过第 $i$ 条边的时间有 $ P _ {i1} $ 的概率为 $1$, $P _ {i2}$ 的概率为 $2$... \n如果总用时超过 $T$ 则会被罚钱 $X$ 元, 求从 $1$ 号点到 $n$ 号点的最小期望花费.\n$ N \\leq 50, M \\leq 100, T \\leq 100000 $\n\n### Solution\n考虑暴力DP, 记状态 $ dp _ {i, t} $ 表示到达 $i$ 号点, 且经过的时间为 $t$ 的最小期望花费, 转移十分显然.\n同时因为状态之间按照时间构成一个拓扑图, 所以转移不存在环.\n\n<!--more-->\n\n可以记 $S _ {e, t}$ 表示边 $e$ 在时刻 $t$ 之后后继状态的最小期望花费. \n\n则可以用下面这个式子计算 $dp _ {e, t}$:\n\n$$ dp _ {i, t} = min \\left\\{ S _ {e, t} + cost _ e \\right\\} $$\n\n$e$ 是 $i$ 的出边.\n\n接下来考虑如何计算 $S(e,t)$, 利用定义:\n\n$$ S _ {e, t} = \\sum _ {i = 1}^{T} dp _ {to _ e, t + i} * P _ {ei} $$\n\n这样变成卷积形式, 分治 $FFT$ 即可.\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 200000 + 10;\nconst double PI = acos(-1.0);\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\n#define fst first\n#define snd second\n#define debug(x) cerr << #x << \":\" << (x) << endl\n#define REP(i, a, b) for(int i = (a), i##end = (b); i < i##end; ++i)\n#define DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i >= i##bgn; --i)\n\ntemplate<typename T> T read() {\n    T n = 0, f = 1;\n    char ch = getchar();\n    for( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\nstruct Complex {\n    double real, imag;\n    Complex(double r = 0.0, double i = 0.0): real(r), imag(i) {}\n    Complex operator + (const Complex& rhs) const {\n        return Complex(real + rhs.real, imag + rhs.imag);\n    }\n    Complex operator - (const Complex& rhs) const {\n        return Complex(real - rhs.real, imag - rhs.imag);\n    }\n    Complex operator * (const Complex& rhs) const {\n        return Complex(real*rhs.real - imag*rhs.imag, real*rhs.imag + imag*rhs.real);\n    }\n    Complex operator / (const double& div) const {\n        return Complex(real / div, imag / div);\n    }\n};\n\nint rev[maxn];\nvoid DFT(Complex *x, int N, int t) {\n    for(int i = 0; i < N; i++) \n        if(i < rev[i]) swap(x[i], x[rev[i]]);\n\n    for(int l = 2; l <= N; l <<= 1) {\n        Complex wn = Complex(cos(2*PI*t/l), sin(2*PI*t/l));\n        for(int i = 0; i < N; i += l) {\n            Complex w = Complex(1, 0);\n            for(int j = 0; j < (l >> 1); j++, w = w * wn) {\n                Complex L = x[i + j];\n                Complex R = x[i + j + (l >> 1)] * w;\n                x[i + j] = L + R;\n                x[i + j + (l >> 1)] = L - R;\n            }\n        }\n    }\n    if(!~t) for(int i = 0; i < N; i++) x[i] = x[i] / N;\n}\n\nconst int N = 100 + 5;\nint dis[N][N];\nint n, m, t, x;\n\nstruct Edge {\n    int u, v, c;\n    double p[maxn];\n\n    void input() {\n        u = read<int>(), v = read<int>(), c = read<int>();\n\n        chkmin(dis[u][v], c);\n        for(int i = 1; i <= t; i++) p[i] = double(read<int>()) / 100000.0;\n    }\n}E[N];\n\nComplex A[maxn], B[maxn];\ndouble S[N][maxn], f[N][maxn];\n\nvoid calc(int l, int r, int mid) {\n    static int base, len;\n\n    for(int k = 0; k < m; k++) {\n        int v = E[k].v;\n\n        for(base = 1, len = 0; base <= 2*r-l-mid+1; base <<= 1) ++ len;\n\n        for(int i = 0; i < base; i++) rev[i] = (rev[i>>1] >> 1) | ((i&1) << (len-1));\n        for(int i = 0; i < base; i++) A[i] = B[i] = Complex(0, 0);\n        for(int i = 0; i < r-mid; i++) A[i] = Complex(f[v][r-i], 0);\n        for(int i = 1; i <= r-l; i++) B[i-1] = Complex(E[k].p[i], 0);\n\n        DFT(A, base, 1); DFT(B, base, 1);\n        for(int i = 0; i < base; i++) A[i] = A[i] * B[i];\n        DFT(A, base, -1);\n\n        for(int i = l; i <= mid; i++) S[k][i] += A[r-i-1].real;\n    }\n}\nvoid cdq_solve(int l, int r) {\n    if(l == r) {\n        for(int i = 0; i < m; i++) \n            chkmin(f[E[i].u][l], S[i][l] + E[i].c);\n        return;\n    }\n\n    int mid = (l + r) >> 1;\n    cdq_solve(mid+1, r);\n    calc(l, r, mid);\n    cdq_solve(l, mid);\n}\n\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    memset(dis, oo, sizeof dis);\n    n = read<int>(), m = read<int>(), t = read<int>(), x = read<int>();\n\n    for(int i = 1; i <= n; i++) dis[i][i] = 0;\n    for(int i = 0; i < m; i++) E[i].input();\n    \n    for(int k = 1; k <= n; k++)\n        for(int i = 1; i <= n; i++)\n            for(int j = 1; j <= n; j++) \n                chkmin(dis[i][j], dis[i][k] + dis[k][j]);\n\n    for(int i = 1; i <= n; i++) {\n        for(int T = 0; T <= t; T++) f[i][T] = (i == n) ? 0 : oo;\n        for(int T = t+1; T <= 2*t; T++) f[i][T] = dis[i][n] + x;\n    }\n\n    calc(1, t*2, t);\n    cdq_solve(0, t);\n\n    printf(\"%.10lf\\n\", f[1][0]);\n    return 0;\n}\n```\n","slug":"cf-553e","published":1,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cmy000yoniscpsdknp0","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>给定 $N$ 个点, $M$ 条边的有向图.<br>每条边有花费: 通过第 $i$ 条边的时间有 $ P _ {i1} $ 的概率为 $1$, $P _ {i2}$ 的概率为 $2$…<br>如果总用时超过 $T$ 则会被罚钱 $X$ 元, 求从 $1$ 号点到 $n$ 号点的最小期望花费.<br>$ N \\leq 50, M \\leq 100, T \\leq 100000 $</p>\n</blockquote>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>考虑暴力DP, 记状态 $ dp _ {i, t} $ 表示到达 $i$ 号点, 且经过的时间为 $t$ 的最小期望花费, 转移十分显然.<br>同时因为状态之间按照时间构成一个拓扑图, 所以转移不存在环.</p>\n<a id=\"more\"></a>\n<p>可以记 $S _ {e, t}$ 表示边 $e$ 在时刻 $t$ 之后后继状态的最小期望花费. </p>\n<p>则可以用下面这个式子计算 $dp _ {e, t}$:</p>\n<script type=\"math/tex; mode=display\">dp _ {i, t} = min \\left\\{ S _ {e, t} + cost _ e \\right\\}</script><p>$e$ 是 $i$ 的出边.</p>\n<p>接下来考虑如何计算 $S(e,t)$, 利用定义:</p>\n<script type=\"math/tex; mode=display\">S _ {e, t} = \\sum _ {i = 1}^{T} dp _ {to _ e, t + i} * P _ {ei}</script><p>这样变成卷积形式, 分治 $FFT$ 即可.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">\":\"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    T n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">double</span> real, imag;</div><div class=\"line\">    Complex(<span class=\"keyword\">double</span> r = <span class=\"number\">0.0</span>, <span class=\"keyword\">double</span> i = <span class=\"number\">0.0</span>): real(r), imag(i) &#123;&#125;</div><div class=\"line\">    Complex <span class=\"keyword\">operator</span> + (<span class=\"keyword\">const</span> Complex&amp; rhs) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Complex(real + rhs.real, imag + rhs.imag);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Complex <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> Complex&amp; rhs) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Complex(real - rhs.real, imag - rhs.imag);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Complex <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Complex&amp; rhs) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Complex(real*rhs.real - imag*rhs.imag, real*rhs.imag + imag*rhs.real);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Complex <span class=\"keyword\">operator</span> / (<span class=\"keyword\">const</span> <span class=\"keyword\">double</span>&amp; div) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Complex(real / div, imag / div);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(Complex *x, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= N; l &lt;&lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        Complex wn = Complex(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*PI*t/l), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*PI*t/l));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i += l) &#123;</div><div class=\"line\">            Complex w = Complex(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (l &gt;&gt; <span class=\"number\">1</span>); j++, w = w * wn) &#123;</div><div class=\"line\">                Complex L = x[i + j];</div><div class=\"line\">                Complex R = x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] * w;</div><div class=\"line\">                x[i + j] = L + R;</div><div class=\"line\">                x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] = L - R;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!~t) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) x[i] = x[i] / N;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100</span> + <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> dis[N][N];</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, t, x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> u, v, c;</div><div class=\"line\">    <span class=\"keyword\">double</span> p[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        u = read&lt;<span class=\"keyword\">int</span>&gt;(), v = read&lt;<span class=\"keyword\">int</span>&gt;(), c = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">        chkmin(dis[u][v], c);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= t; i++) p[i] = <span class=\"keyword\">double</span>(read&lt;<span class=\"keyword\">int</span>&gt;()) / <span class=\"number\">100000.0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;E[N];</div><div class=\"line\"></div><div class=\"line\">Complex A[maxn], B[maxn];</div><div class=\"line\"><span class=\"keyword\">double</span> S[N][maxn], f[N][maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> mid)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> base, len;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; m; k++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = E[k].v;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(base = <span class=\"number\">1</span>, len = <span class=\"number\">0</span>; base &lt;= <span class=\"number\">2</span>*r-l-mid+<span class=\"number\">1</span>; base &lt;&lt;= <span class=\"number\">1</span>) ++ len;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (len<span class=\"number\">-1</span>));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) A[i] = B[i] = Complex(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; r-mid; i++) A[i] = Complex(f[v][r-i], <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= r-l; i++) B[i<span class=\"number\">-1</span>] = Complex(E[k].p[i], <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        DFT(A, base, <span class=\"number\">1</span>); DFT(B, base, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) A[i] = A[i] * B[i];</div><div class=\"line\">        DFT(A, base, <span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; i &lt;= mid; i++) S[k][i] += A[r-i<span class=\"number\">-1</span>].real;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cdq_solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) </div><div class=\"line\">            chkmin(f[E[i].u][l], S[i][l] + E[i].c);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    cdq_solve(mid+<span class=\"number\">1</span>, r);</div><div class=\"line\">    calc(l, r, mid);</div><div class=\"line\">    cdq_solve(l, mid);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">memset</span>(dis, oo, <span class=\"keyword\">sizeof</span> dis);</div><div class=\"line\">    n = read&lt;<span class=\"keyword\">int</span>&gt;(), m = read&lt;<span class=\"keyword\">int</span>&gt;(), t = read&lt;<span class=\"keyword\">int</span>&gt;(), x = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) dis[i][i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) E[i].input();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) </div><div class=\"line\">                chkmin(dis[i][j], dis[i][k] + dis[k][j]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = <span class=\"number\">0</span>; T &lt;= t; T++) f[i][T] = (i == n) ? <span class=\"number\">0</span> : oo;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = t+<span class=\"number\">1</span>; T &lt;= <span class=\"number\">2</span>*t; T++) f[i][T] = dis[i][n] + x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    calc(<span class=\"number\">1</span>, t*<span class=\"number\">2</span>, t);</div><div class=\"line\">    cdq_solve(<span class=\"number\">0</span>, t);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.10lf\\n\"</span>, f[<span class=\"number\">1</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>给定 $N$ 个点, $M$ 条边的有向图.<br>每条边有花费: 通过第 $i$ 条边的时间有 $ P _ {i1} $ 的概率为 $1$, $P _ {i2}$ 的概率为 $2$…<br>如果总用时超过 $T$ 则会被罚钱 $X$ 元, 求从 $1$ 号点到 $n$ 号点的最小期望花费.<br>$ N \\leq 50, M \\leq 100, T \\leq 100000 $</p>\n</blockquote>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>考虑暴力DP, 记状态 $ dp _ {i, t} $ 表示到达 $i$ 号点, 且经过的时间为 $t$ 的最小期望花费, 转移十分显然.<br>同时因为状态之间按照时间构成一个拓扑图, 所以转移不存在环.</p>","more":"<p>可以记 $S _ {e, t}$ 表示边 $e$ 在时刻 $t$ 之后后继状态的最小期望花费. </p>\n<p>则可以用下面这个式子计算 $dp _ {e, t}$:</p>\n<script type=\"math/tex; mode=display\">dp _ {i, t} = min \\left\\{ S _ {e, t} + cost _ e \\right\\}</script><p>$e$ 是 $i$ 的出边.</p>\n<p>接下来考虑如何计算 $S(e,t)$, 利用定义:</p>\n<script type=\"math/tex; mode=display\">S _ {e, t} = \\sum _ {i = 1}^{T} dp _ {to _ e, t + i} * P _ {ei}</script><p>这样变成卷积形式, 分治 $FFT$ 即可.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">200000</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">\":\"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    T n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">double</span> real, imag;</div><div class=\"line\">    Complex(<span class=\"keyword\">double</span> r = <span class=\"number\">0.0</span>, <span class=\"keyword\">double</span> i = <span class=\"number\">0.0</span>): real(r), imag(i) &#123;&#125;</div><div class=\"line\">    Complex <span class=\"keyword\">operator</span> + (<span class=\"keyword\">const</span> Complex&amp; rhs) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Complex(real + rhs.real, imag + rhs.imag);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Complex <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> Complex&amp; rhs) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Complex(real - rhs.real, imag - rhs.imag);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Complex <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Complex&amp; rhs) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Complex(real*rhs.real - imag*rhs.imag, real*rhs.imag + imag*rhs.real);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Complex <span class=\"keyword\">operator</span> / (<span class=\"keyword\">const</span> <span class=\"keyword\">double</span>&amp; div) <span class=\"keyword\">const</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Complex(real / div, imag / div);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> rev[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(Complex *x, <span class=\"keyword\">int</span> N, <span class=\"keyword\">int</span> t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) </div><div class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i]) swap(x[i], x[rev[i]]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>; l &lt;= N; l &lt;&lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        Complex wn = Complex(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*PI*t/l), <span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*PI*t/l));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i += l) &#123;</div><div class=\"line\">            Complex w = Complex(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (l &gt;&gt; <span class=\"number\">1</span>); j++, w = w * wn) &#123;</div><div class=\"line\">                Complex L = x[i + j];</div><div class=\"line\">                Complex R = x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] * w;</div><div class=\"line\">                x[i + j] = L + R;</div><div class=\"line\">                x[i + j + (l &gt;&gt; <span class=\"number\">1</span>)] = L - R;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!~t) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) x[i] = x[i] / N;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100</span> + <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> dis[N][N];</div><div class=\"line\"><span class=\"keyword\">int</span> n, m, t, x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> u, v, c;</div><div class=\"line\">    <span class=\"keyword\">double</span> p[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        u = read&lt;<span class=\"keyword\">int</span>&gt;(), v = read&lt;<span class=\"keyword\">int</span>&gt;(), c = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">        chkmin(dis[u][v], c);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= t; i++) p[i] = <span class=\"keyword\">double</span>(read&lt;<span class=\"keyword\">int</span>&gt;()) / <span class=\"number\">100000.0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;E[N];</div><div class=\"line\"></div><div class=\"line\">Complex A[maxn], B[maxn];</div><div class=\"line\"><span class=\"keyword\">double</span> S[N][maxn], f[N][maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> mid)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> base, len;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; m; k++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> v = E[k].v;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(base = <span class=\"number\">1</span>, len = <span class=\"number\">0</span>; base &lt;= <span class=\"number\">2</span>*r-l-mid+<span class=\"number\">1</span>; base &lt;&lt;= <span class=\"number\">1</span>) ++ len;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) rev[i] = (rev[i&gt;&gt;<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i&amp;<span class=\"number\">1</span>) &lt;&lt; (len<span class=\"number\">-1</span>));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) A[i] = B[i] = Complex(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; r-mid; i++) A[i] = Complex(f[v][r-i], <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= r-l; i++) B[i<span class=\"number\">-1</span>] = Complex(E[k].p[i], <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        DFT(A, base, <span class=\"number\">1</span>); DFT(B, base, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; base; i++) A[i] = A[i] * B[i];</div><div class=\"line\">        DFT(A, base, <span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; i &lt;= mid; i++) S[k][i] += A[r-i<span class=\"number\">-1</span>].real;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cdq_solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) </div><div class=\"line\">            chkmin(f[E[i].u][l], S[i][l] + E[i].c);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">    cdq_solve(mid+<span class=\"number\">1</span>, r);</div><div class=\"line\">    calc(l, r, mid);</div><div class=\"line\">    cdq_solve(l, mid);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">memset</span>(dis, oo, <span class=\"keyword\">sizeof</span> dis);</div><div class=\"line\">    n = read&lt;<span class=\"keyword\">int</span>&gt;(), m = read&lt;<span class=\"keyword\">int</span>&gt;(), t = read&lt;<span class=\"keyword\">int</span>&gt;(), x = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) dis[i][i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) E[i].input();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) </div><div class=\"line\">                chkmin(dis[i][j], dis[i][k] + dis[k][j]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = <span class=\"number\">0</span>; T &lt;= t; T++) f[i][T] = (i == n) ? <span class=\"number\">0</span> : oo;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = t+<span class=\"number\">1</span>; T &lt;= <span class=\"number\">2</span>*t; T++) f[i][T] = dis[i][n] + x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    calc(<span class=\"number\">1</span>, t*<span class=\"number\">2</span>, t);</div><div class=\"line\">    cdq_solve(<span class=\"number\">0</span>, t);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.10lf\\n\"</span>, f[<span class=\"number\">1</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"平面树计数","date":"2017-12-01T03:03:04.000Z","_content":"\n不常见的经典问题, 顺便总结一下Burnside引理吧.\n\n<!-- more -->\n\n### 问题描述\n\n> 给定 $N$, 求 $N$ 个点的本质不同的平面树的数量. \n> 两棵平面树是等价的当且仅当其中一棵能够移动点的位置与另一棵重合, 并且在整个过程中仍然是一棵平面树.\n\n### 做法\n\n首先考虑模型转化(计算 $N+1$ 个点的答案): \n取一个单位圆, 在上面等距的取 $2N$ 个点, 然后将这些点两两配对连边, 满足所有连边不相交.\n发现它的对偶图恰好是一棵平面树, 像这样:\n\n![](/img/plane-tree.png)\n\n那么就只需要考虑本质不同的这样的圆的数量即可.\n两个圆是等价的当且仅当一个圆可以通过旋转一定的角度与另一个圆重合.\n而在这个圆上共有 $2N$ 个点, 就意味着有 $2N$ 个置换, 构成一个置换群.\n\n置换群下的计数可以用到 Burnside引理 :\n> $$ N(G, C) = \\frac{1}{|G|} { \\sum_{f \\in G} c(f) } $$\n\n则转化为求置换下的不动点的数量:\n\n- 不存在置换的情况下, 答案为 $c_N$, $\\mathrm{Catalan}$ 数的第 $N$ 项.\n即将相互匹配的位置看作左右括号, 则所有合法的括号序列都对应一个满足条件的圆.\n\n- $N$ 为奇数时, 可能存在一条平分圆的对角线在置换下不变, 计算 $\\frac{N+1}{2}$ 个点的答案即可.\n\n- 考虑旋转置换.\n  为了满足旋转之后的边重合, 点 $i$ 和它的匹配点 $p_i$ 在旋转后应该仍然是相匹配的.\n  则环的数量一定是偶数 $2d$, 所以环的长度可以表示为 $\\frac{2N}{2d} = \\frac{N}{d}$.\n\n  假定置换的阶是 $e$, $e > 1, e | N$, 环的数量 $2d = \\frac{2N}{e}$.\n  环上与 $0$ 匹配的点为 $i$, 不难发现在这些点之间的点的方案数为 $c_{i-1}$.\n  当这些点确定之后, 它们在环上依次经过的 $(i+1)e$ 个点就确定了.\n\n  令 $f(x)$ 表示 $\\mathrm{Catalan}$ 数的生成函数, 根据 $\\mathrm{Catalan}$ 数的递推式, 不难得到:\n\n  $$ f(x) = xf^2(x) + 1 $$\n\n  构造 $b_d$ 表示包含 $2d$ 个环的置换下不动点的数量.\n\n  $$ b_d = 2\\sum_{i = 0}^{d-1} c_i b_{d-i-1} $$\n\n  其中因子 $2$ 考虑的是 $i > 2d$ 时用当前置换的逆来计算的情况.\n  则 $b_d$ 的生成函数 $g(x)$ 满足:\n\n  $$ g(x) = 2x g(x) f(x) + 1 $$\n\n  解得:\n\n  $$ g(x) = (1 - 4x) ^ {-\\frac{1}{2}} $$\n\n### 问题解决\n\n  $$ p(n) = \\frac{1}{2n} \\( [n \\, is \\, odd]\\binom{n}{\\lfloor\\frac{n}{2}\\rfloor} - \\binom{2n}{n-1} + \\sum_{d|n}{\\varphi(n/d)\\binom {2d}{d}} \\)$$\n","source":"_posts/count-plane-tree.md","raw":"---\ntitle: 平面树计数\ndate: 2017-12-01 11:03:04\ntags:\n    - Burnside\n    - Combinatorial\n---\n\n不常见的经典问题, 顺便总结一下Burnside引理吧.\n\n<!-- more -->\n\n### 问题描述\n\n> 给定 $N$, 求 $N$ 个点的本质不同的平面树的数量. \n> 两棵平面树是等价的当且仅当其中一棵能够移动点的位置与另一棵重合, 并且在整个过程中仍然是一棵平面树.\n\n### 做法\n\n首先考虑模型转化(计算 $N+1$ 个点的答案): \n取一个单位圆, 在上面等距的取 $2N$ 个点, 然后将这些点两两配对连边, 满足所有连边不相交.\n发现它的对偶图恰好是一棵平面树, 像这样:\n\n![](/img/plane-tree.png)\n\n那么就只需要考虑本质不同的这样的圆的数量即可.\n两个圆是等价的当且仅当一个圆可以通过旋转一定的角度与另一个圆重合.\n而在这个圆上共有 $2N$ 个点, 就意味着有 $2N$ 个置换, 构成一个置换群.\n\n置换群下的计数可以用到 Burnside引理 :\n> $$ N(G, C) = \\frac{1}{|G|} { \\sum_{f \\in G} c(f) } $$\n\n则转化为求置换下的不动点的数量:\n\n- 不存在置换的情况下, 答案为 $c_N$, $\\mathrm{Catalan}$ 数的第 $N$ 项.\n即将相互匹配的位置看作左右括号, 则所有合法的括号序列都对应一个满足条件的圆.\n\n- $N$ 为奇数时, 可能存在一条平分圆的对角线在置换下不变, 计算 $\\frac{N+1}{2}$ 个点的答案即可.\n\n- 考虑旋转置换.\n  为了满足旋转之后的边重合, 点 $i$ 和它的匹配点 $p_i$ 在旋转后应该仍然是相匹配的.\n  则环的数量一定是偶数 $2d$, 所以环的长度可以表示为 $\\frac{2N}{2d} = \\frac{N}{d}$.\n\n  假定置换的阶是 $e$, $e > 1, e | N$, 环的数量 $2d = \\frac{2N}{e}$.\n  环上与 $0$ 匹配的点为 $i$, 不难发现在这些点之间的点的方案数为 $c_{i-1}$.\n  当这些点确定之后, 它们在环上依次经过的 $(i+1)e$ 个点就确定了.\n\n  令 $f(x)$ 表示 $\\mathrm{Catalan}$ 数的生成函数, 根据 $\\mathrm{Catalan}$ 数的递推式, 不难得到:\n\n  $$ f(x) = xf^2(x) + 1 $$\n\n  构造 $b_d$ 表示包含 $2d$ 个环的置换下不动点的数量.\n\n  $$ b_d = 2\\sum_{i = 0}^{d-1} c_i b_{d-i-1} $$\n\n  其中因子 $2$ 考虑的是 $i > 2d$ 时用当前置换的逆来计算的情况.\n  则 $b_d$ 的生成函数 $g(x)$ 满足:\n\n  $$ g(x) = 2x g(x) f(x) + 1 $$\n\n  解得:\n\n  $$ g(x) = (1 - 4x) ^ {-\\frac{1}{2}} $$\n\n### 问题解决\n\n  $$ p(n) = \\frac{1}{2n} \\( [n \\, is \\, odd]\\binom{n}{\\lfloor\\frac{n}{2}\\rfloor} - \\binom{2n}{n-1} + \\sum_{d|n}{\\varphi(n/d)\\binom {2d}{d}} \\)$$\n","slug":"count-plane-tree","published":1,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cn6000zonis010jj9b6","content":"<p>不常见的经典问题, 顺便总结一下Burnside引理吧.</p>\n<a id=\"more\"></a>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><blockquote>\n<p>给定 $N$, 求 $N$ 个点的本质不同的平面树的数量.<br>两棵平面树是等价的当且仅当其中一棵能够移动点的位置与另一棵重合, 并且在整个过程中仍然是一棵平面树.</p>\n</blockquote>\n<h3 id=\"做法\"><a href=\"#做法\" class=\"headerlink\" title=\"做法\"></a>做法</h3><p>首先考虑模型转化(计算 $N+1$ 个点的答案):<br>取一个单位圆, 在上面等距的取 $2N$ 个点, 然后将这些点两两配对连边, 满足所有连边不相交.<br>发现它的对偶图恰好是一棵平面树, 像这样:</p>\n<p><img src=\"/img/plane-tree.png\" alt=\"\"></p>\n<p>那么就只需要考虑本质不同的这样的圆的数量即可.<br>两个圆是等价的当且仅当一个圆可以通过旋转一定的角度与另一个圆重合.<br>而在这个圆上共有 $2N$ 个点, 就意味着有 $2N$ 个置换, 构成一个置换群.</p>\n<p>置换群下的计数可以用到 Burnside引理 :</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">N(G, C) = \\frac{1}{|G|} { \\sum_{f \\in G} c(f) }</script></blockquote>\n<p>则转化为求置换下的不动点的数量:</p>\n<ul>\n<li><p>不存在置换的情况下, 答案为 $c_N$, $\\mathrm{Catalan}$ 数的第 $N$ 项.<br>即将相互匹配的位置看作左右括号, 则所有合法的括号序列都对应一个满足条件的圆.</p>\n</li>\n<li><p>$N$ 为奇数时, 可能存在一条平分圆的对角线在置换下不变, 计算 $\\frac{N+1}{2}$ 个点的答案即可.</p>\n</li>\n<li><p>考虑旋转置换.<br>为了满足旋转之后的边重合, 点 $i$ 和它的匹配点 $p_i$ 在旋转后应该仍然是相匹配的.<br>则环的数量一定是偶数 $2d$, 所以环的长度可以表示为 $\\frac{2N}{2d} = \\frac{N}{d}$.</p>\n<p>假定置换的阶是 $e$, $e &gt; 1, e | N$, 环的数量 $2d = \\frac{2N}{e}$.<br>环上与 $0$ 匹配的点为 $i$, 不难发现在这些点之间的点的方案数为 $c_{i-1}$.<br>当这些点确定之后, 它们在环上依次经过的 $(i+1)e$ 个点就确定了.</p>\n<p>令 $f(x)$ 表示 $\\mathrm{Catalan}$ 数的生成函数, 根据 $\\mathrm{Catalan}$ 数的递推式, 不难得到:</p>\n<script type=\"math/tex; mode=display\">f(x) = xf^2(x) + 1</script><p>构造 $b_d$ 表示包含 $2d$ 个环的置换下不动点的数量.</p>\n<script type=\"math/tex; mode=display\">b_d = 2\\sum_{i = 0}^{d-1} c_i b_{d-i-1}</script><p>其中因子 $2$ 考虑的是 $i &gt; 2d$ 时用当前置换的逆来计算的情况.<br>则 $b_d$ 的生成函数 $g(x)$ 满足:</p>\n<script type=\"math/tex; mode=display\">g(x) = 2x g(x) f(x) + 1</script><p>解得:</p>\n<script type=\"math/tex; mode=display\">g(x) = (1 - 4x) ^ {-\\frac{1}{2}}</script></li>\n</ul>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><script type=\"math/tex; mode=display\">p(n) = \\frac{1}{2n} \\( [n \\, is \\, odd]\\binom{n}{\\lfloor\\frac{n}{2}\\rfloor} - \\binom{2n}{n-1} + \\sum_{d|n}{\\varphi(n/d)\\binom {2d}{d}} \\)</script>","site":{"data":{}},"excerpt":"<p>不常见的经典问题, 顺便总结一下Burnside引理吧.</p>","more":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><blockquote>\n<p>给定 $N$, 求 $N$ 个点的本质不同的平面树的数量.<br>两棵平面树是等价的当且仅当其中一棵能够移动点的位置与另一棵重合, 并且在整个过程中仍然是一棵平面树.</p>\n</blockquote>\n<h3 id=\"做法\"><a href=\"#做法\" class=\"headerlink\" title=\"做法\"></a>做法</h3><p>首先考虑模型转化(计算 $N+1$ 个点的答案):<br>取一个单位圆, 在上面等距的取 $2N$ 个点, 然后将这些点两两配对连边, 满足所有连边不相交.<br>发现它的对偶图恰好是一棵平面树, 像这样:</p>\n<p><img src=\"/img/plane-tree.png\" alt=\"\"></p>\n<p>那么就只需要考虑本质不同的这样的圆的数量即可.<br>两个圆是等价的当且仅当一个圆可以通过旋转一定的角度与另一个圆重合.<br>而在这个圆上共有 $2N$ 个点, 就意味着有 $2N$ 个置换, 构成一个置换群.</p>\n<p>置换群下的计数可以用到 Burnside引理 :</p>\n<blockquote>\n<script type=\"math/tex; mode=display\">N(G, C) = \\frac{1}{|G|} { \\sum_{f \\in G} c(f) }</script></blockquote>\n<p>则转化为求置换下的不动点的数量:</p>\n<ul>\n<li><p>不存在置换的情况下, 答案为 $c_N$, $\\mathrm{Catalan}$ 数的第 $N$ 项.<br>即将相互匹配的位置看作左右括号, 则所有合法的括号序列都对应一个满足条件的圆.</p>\n</li>\n<li><p>$N$ 为奇数时, 可能存在一条平分圆的对角线在置换下不变, 计算 $\\frac{N+1}{2}$ 个点的答案即可.</p>\n</li>\n<li><p>考虑旋转置换.<br>为了满足旋转之后的边重合, 点 $i$ 和它的匹配点 $p_i$ 在旋转后应该仍然是相匹配的.<br>则环的数量一定是偶数 $2d$, 所以环的长度可以表示为 $\\frac{2N}{2d} = \\frac{N}{d}$.</p>\n<p>假定置换的阶是 $e$, $e &gt; 1, e | N$, 环的数量 $2d = \\frac{2N}{e}$.<br>环上与 $0$ 匹配的点为 $i$, 不难发现在这些点之间的点的方案数为 $c_{i-1}$.<br>当这些点确定之后, 它们在环上依次经过的 $(i+1)e$ 个点就确定了.</p>\n<p>令 $f(x)$ 表示 $\\mathrm{Catalan}$ 数的生成函数, 根据 $\\mathrm{Catalan}$ 数的递推式, 不难得到:</p>\n<script type=\"math/tex; mode=display\">f(x) = xf^2(x) + 1</script><p>构造 $b_d$ 表示包含 $2d$ 个环的置换下不动点的数量.</p>\n<script type=\"math/tex; mode=display\">b_d = 2\\sum_{i = 0}^{d-1} c_i b_{d-i-1}</script><p>其中因子 $2$ 考虑的是 $i &gt; 2d$ 时用当前置换的逆来计算的情况.<br>则 $b_d$ 的生成函数 $g(x)$ 满足:</p>\n<script type=\"math/tex; mode=display\">g(x) = 2x g(x) f(x) + 1</script><p>解得:</p>\n<script type=\"math/tex; mode=display\">g(x) = (1 - 4x) ^ {-\\frac{1}{2}}</script></li>\n</ul>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><script type=\"math/tex; mode=display\">p(n) = \\frac{1}{2n} \\( [n \\, is \\, odd]\\binom{n}{\\lfloor\\frac{n}{2}\\rfloor} - \\binom{2n}{n-1} + \\sum_{d|n}{\\varphi(n/d)\\binom {2d}{d}} \\)</script>"},{"title":"CTSC2017 游戏","date":"2017-08-22T12:21:17.000Z","_content":"\n### Description\n> 有$N$ 局游戏, 除第一局游戏外每一局游戏的获胜机率均与上一局游戏的结果有关. 现在对游戏进行$Q$次修改, 每次告诉你某一局游戏的结果或者删除之前给你的信息, 求修改后期望下获胜的场数为多少.\n$ N, Q \\le 2 \\times 10 ^ 5 $\n\n<!--more-->\n\n### Solution\n首先不难发现, 某一局的游戏的胜率只与其左右的最近游戏结果相关, 所以答案可以分段计算.\n\n考虑期望的线性性, 可以将期望胜利场数表示成每一局游戏的胜率之和.\n记 $X _ i$  表示第$i$ 场游戏的状态. 所求即为 $ \\sum _ {l < m < r} P( X _ m = 1 | X _ l, X _ r) $. \n\n由贝叶斯公式:\n$$\n\\begin{align}\nP(X _ m = 1 | X _ l, X _ r) &= \\frac{P(X _ m = 1, X _ l, X _ r)}{P(X _ l) \\cdot P(X _ r | X _ l) } \\\\\n&= \\frac{P(X _ l) \\cdot P(X _ m = 1 | X _ l) \\cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ l) \\cdot P(X _ r | X _ l)} \\\\\n&= \\frac{P(X _ m=1 | X _ l) \\cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ r | X _ l)} \\\\\n&= \\frac{P(X _ m=1 | X _ l) \\cdot P(X _ r | X _ m = 1)}{P(X _ r | X _ l)} \n\\end{align}\n$$\n\n发现分母是常数, 于是可以合并分子. \n考虑分子的意义, 大概是合法状态下当前位置为胜的概率.\n每一段就可以直接用$dp$来处理出答案, 记录某场比赛为胜/ 负的概率以及分子的期望即可.\n这个复杂度是每次询问$O(n)$的.\n\n其实这道题要讲的已经讲完了, 最后只要用矩乘快速合并$dp$值, 维护一下就可以了.\n","source":"_posts/ctsc2017-game.md","raw":"---\ntitle: CTSC2017 游戏\ndate: 2017-08-22 20:21:17\ntags:\n    - Probability\n---\n\n### Description\n> 有$N$ 局游戏, 除第一局游戏外每一局游戏的获胜机率均与上一局游戏的结果有关. 现在对游戏进行$Q$次修改, 每次告诉你某一局游戏的结果或者删除之前给你的信息, 求修改后期望下获胜的场数为多少.\n$ N, Q \\le 2 \\times 10 ^ 5 $\n\n<!--more-->\n\n### Solution\n首先不难发现, 某一局的游戏的胜率只与其左右的最近游戏结果相关, 所以答案可以分段计算.\n\n考虑期望的线性性, 可以将期望胜利场数表示成每一局游戏的胜率之和.\n记 $X _ i$  表示第$i$ 场游戏的状态. 所求即为 $ \\sum _ {l < m < r} P( X _ m = 1 | X _ l, X _ r) $. \n\n由贝叶斯公式:\n$$\n\\begin{align}\nP(X _ m = 1 | X _ l, X _ r) &= \\frac{P(X _ m = 1, X _ l, X _ r)}{P(X _ l) \\cdot P(X _ r | X _ l) } \\\\\n&= \\frac{P(X _ l) \\cdot P(X _ m = 1 | X _ l) \\cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ l) \\cdot P(X _ r | X _ l)} \\\\\n&= \\frac{P(X _ m=1 | X _ l) \\cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ r | X _ l)} \\\\\n&= \\frac{P(X _ m=1 | X _ l) \\cdot P(X _ r | X _ m = 1)}{P(X _ r | X _ l)} \n\\end{align}\n$$\n\n发现分母是常数, 于是可以合并分子. \n考虑分子的意义, 大概是合法状态下当前位置为胜的概率.\n每一段就可以直接用$dp$来处理出答案, 记录某场比赛为胜/ 负的概率以及分子的期望即可.\n这个复杂度是每次询问$O(n)$的.\n\n其实这道题要讲的已经讲完了, 最后只要用矩乘快速合并$dp$值, 维护一下就可以了.\n","slug":"ctsc2017-game","published":1,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cnd0011onisvdxrp20t","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>有$N$ 局游戏, 除第一局游戏外每一局游戏的获胜机率均与上一局游戏的结果有关. 现在对游戏进行$Q$次修改, 每次告诉你某一局游戏的结果或者删除之前给你的信息, 求修改后期望下获胜的场数为多少.<br>$ N, Q \\le 2 \\times 10 ^ 5 $</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>首先不难发现, 某一局的游戏的胜率只与其左右的最近游戏结果相关, 所以答案可以分段计算.</p>\n<p>考虑期望的线性性, 可以将期望胜利场数表示成每一局游戏的胜率之和.<br>记 $X _ i$  表示第$i$ 场游戏的状态. 所求即为 $ \\sum _ {l &lt; m &lt; r} P( X _ m = 1 | X _ l, X _ r) $. </p>\n<p>由贝叶斯公式:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\nP(X _ m = 1 | X _ l, X _ r) &= \\frac{P(X _ m = 1, X _ l, X _ r)}{P(X _ l) \\cdot P(X _ r | X _ l) } \\\\\n&= \\frac{P(X _ l) \\cdot P(X _ m = 1 | X _ l) \\cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ l) \\cdot P(X _ r | X _ l)} \\\\\n&= \\frac{P(X _ m=1 | X _ l) \\cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ r | X _ l)} \\\\\n&= \\frac{P(X _ m=1 | X _ l) \\cdot P(X _ r | X _ m = 1)}{P(X _ r | X _ l)} \n\\end{align}</script><p>发现分母是常数, 于是可以合并分子.<br>考虑分子的意义, 大概是合法状态下当前位置为胜的概率.<br>每一段就可以直接用$dp$来处理出答案, 记录某场比赛为胜/ 负的概率以及分子的期望即可.<br>这个复杂度是每次询问$O(n)$的.</p>\n<p>其实这道题要讲的已经讲完了, 最后只要用矩乘快速合并$dp$值, 维护一下就可以了.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>有$N$ 局游戏, 除第一局游戏外每一局游戏的获胜机率均与上一局游戏的结果有关. 现在对游戏进行$Q$次修改, 每次告诉你某一局游戏的结果或者删除之前给你的信息, 求修改后期望下获胜的场数为多少.<br>$ N, Q \\le 2 \\times 10 ^ 5 $</p>\n</blockquote>","more":"<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>首先不难发现, 某一局的游戏的胜率只与其左右的最近游戏结果相关, 所以答案可以分段计算.</p>\n<p>考虑期望的线性性, 可以将期望胜利场数表示成每一局游戏的胜率之和.<br>记 $X _ i$  表示第$i$ 场游戏的状态. 所求即为 $ \\sum _ {l &lt; m &lt; r} P( X _ m = 1 | X _ l, X _ r) $. </p>\n<p>由贝叶斯公式:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\nP(X _ m = 1 | X _ l, X _ r) &= \\frac{P(X _ m = 1, X _ l, X _ r)}{P(X _ l) \\cdot P(X _ r | X _ l) } \\\\\n&= \\frac{P(X _ l) \\cdot P(X _ m = 1 | X _ l) \\cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ l) \\cdot P(X _ r | X _ l)} \\\\\n&= \\frac{P(X _ m=1 | X _ l) \\cdot P(X _ r | X _ l, X _ m = 1)}{P(X _ r | X _ l)} \\\\\n&= \\frac{P(X _ m=1 | X _ l) \\cdot P(X _ r | X _ m = 1)}{P(X _ r | X _ l)} \n\\end{align}</script><p>发现分母是常数, 于是可以合并分子.<br>考虑分子的意义, 大概是合法状态下当前位置为胜的概率.<br>每一段就可以直接用$dp$来处理出答案, 记录某场比赛为胜/ 负的概率以及分子的期望即可.<br>这个复杂度是每次询问$O(n)$的.</p>\n<p>其实这道题要讲的已经讲完了, 最后只要用矩乘快速合并$dp$值, 维护一下就可以了.</p>"},{"title":"NOI2016 网格","date":"2017-06-10T06:36:06.000Z","_content":"\n### Description\n\n> 给出一个 $ N \\times M $ 的网格图和图上的 $ C $ 个障碍物, 求最少删去多少个点可使得原图空格不四连通.\n$ N, M <= 10 ^ 9, C <= 10 ^ 5 $\n\n<!--more-->\n\n### Solution\n\n我们可以发现, 可能的答案只有 $ \\{ -1, 0, 1, 2 \\} $ 几种.\n\n考虑一些简单的情况:\n答案等于 $ -1 $ 时, 点数小于 $2$ 或者恰好有两个相邻的点.\n答案为 $ 0 $ 时, 显然原图不连通.\n\n那么就只需知道答案是否为 $ 1 $, 发现答案等于 $ 1 $ 当且仅当原图存在割点, 暴力的话不难做到 $ O(n * m) $.\n\n将到达每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来, 然后在这些点中找出一个割点, 满足到达最近的障碍的距离不超过 $1$.  \n这样的点就一定是原图中的割点.\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\n#define fst first\n#define snd second\n#define pb push_back\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\nconst int maxn = 2.5e6 + 10;\nconst int oo = 0x3f3f3f3f;\n\ntemplate<typename T> T read() {\n\tT n = 0, f = 1;\n\tchar ch = getchar();\n\tfor( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n\treturn n * f;\n}\n\nstruct Hash_Map {\n    static const int mod = 1666667;\n\n    int cnt = 0;\n    int st[mod], nxt[maxn], X[maxn], Y[maxn];\n\n    inline void clear() {\n        cnt = 0;\n        memset(st, 0, sizeof st);\n    }\n    inline int idx(int x, int y) {\n        return ((233LL*x + (y^888))%mod + mod)%mod;\n    }\n    int find(int x, int y) {\n        int u = idx(x, y);\n        for(int i = st[u]; i; i = nxt[i]) \n            if(X[i] == x && Y[i] == y) \n                return i;\n        return -1;\n    }\n    int insert(int x, int y) {\n        int u = idx(x, y);\n\n        for(int i = st[u]; i; i = nxt[i]) \n            if(X[i] == x && Y[i] == y) \n                return i;\n\n        ++ cnt;\n        X[cnt] = x, Y[cnt] = y;\n        nxt[cnt] = st[u]; st[u] = cnt;\n        return cnt;\n    }\n}HM;\n\nLL n, m, c;\nconst int dx[] = { 0, 1, 0, -1, 1, -1, 1, -1 };\nconst int dy[] = { 1, 0, -1, 0, 1, -1, -1, 1 };\n\nint st[maxn], nxt[maxn << 3], to[maxn << 3], ecnt = 1;\nvoid addedge(int x, int y) { \n    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;\n    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;\n}\n\nint vis[maxn];\nint mark[maxn], now = 0;\n\nvoid init() {\n    ecnt = 1;\n    HM.clear();\n    memset(st, 0, sizeof st);\n}\n\nint flood_fill(int u) {\n    int res = 1;\n    mark[u] = now;\n    for(int i = st[u], v; i; i = nxt[i]) if(mark[v = to[i]] != now) \n        res += flood_fill(v);\n    return res;\n}\n\nint area_count(int s) { return ++ now, flood_fill(s); }\n\nint chk() {\n    if(n*m-c < 2) return -1;\n    int res = area_count(c + 1);\n    if(n*m == 2 || (res == 2 && n*m-c == 2)) return -1;\n    return -2;\n}\n\nbool flag;\nint dfn[maxn], low[maxn], dfs_clock = 0;\nbool dfs(int u, int fa, bool f = false) {\n    low[u] = dfn[u] = ++dfs_clock;\n\n    for(int i = st[u], v; i; i = nxt[i]) if((v = to[i]) ^ fa) {\n        if(!dfn[v]) {\n            if(dfs(v, u)) return true;\n\n            if(vis[u] == 1 && (low[v] > dfn[u] || (!f && low[v] == dfn[u]))) {\n                return true;\n            }\n            chkmin(low[u], low[v]);\n        }else chkmin(low[u], dfn[v]);\n    }\n}\n\nbool chk1() {\n    flag = 0;\n    memset(dfn, dfs_clock = 0, sizeof dfn);\n\n    for(int i = c+1; i <= HM.cnt; i++) if(!dfn[i]) {\n        if(dfs(i, 0, 1)) return 1;\n    }\n    return 0;\n}\n\n#define x(i) HM.X[i]\n#define y(i) HM.Y[i]\n\n//char ch[1000][1000];\nint X[maxn], Y[maxn], idx[maxn];\nbool chk0() {\n    memset(idx, 0, sizeof idx);\n    memset(vis, 0, sizeof vis);\n\n    for(int i = 1; i <= c; i++) HM.insert(X[i], Y[i]);\n    for(int v = 1; v <= c; v++) if(!vis[v]) {\n        vector<int> V;\n        static int q[maxn];\n        int head = 0, tail = 0;\n\n        ecnt = 1;\n        vis[q[tail++] = v] = 3;\n        while(head < tail) {\n            int h = q[head++];\n            for(int i = 0; i < 8; i++) {\n                int nx = x(h) + dx[i];\n                int ny = y(h) + dy[i];\n\n                if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                    int Nxt = HM.insert(nx, ny);\n\n                    st[Nxt] = 0;\n                    if(Nxt <= c) {\n                        if(!vis[Nxt]) {\n                            vis[Nxt] = 3;\n                            q[tail++] = Nxt;\n                        }\n                    }else if(idx[Nxt] != v) {\n                        idx[Nxt] = v, V.pb(Nxt);\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < int(V.size()); i++) {\n            int u = V[i];\n            for(int j = 0; j < 2; j++) {\n                int nx = x(u) + dx[j];\n                int ny = y(u) + dy[j];\n\n                if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                    int Nxt = HM.find(nx, ny);\n                    if(idx[Nxt] == v) addedge(u, Nxt);\n                }\n            }\n        }\n\n        if(V.size() && area_count(V[0]) != int(V.size()))\n            return true;\n    }\n    return false;\n}\n\n\nvoid build() {\n    memset(vis, 0, sizeof vis);\n\n    int tail = 0;\n    static int q[maxn];\n\n    for(int i = 1; i <= c; i++) \n        HM.insert(X[i], Y[i]), vis[i] = 3;\n\n    for(int i = 1; i <= c; i++)\n        for(int j = 0; j < 8; j++) {\n            int nx = X[i] + dx[j];\n            int ny = Y[i] + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.insert(nx, ny);\n\n                if(!vis[Nxt]) {\n                    vis[Nxt] = 1;\n                    q[tail++] = Nxt;\n                }\n            }\n        }\n\n    int lim = tail;\n    for(int i = 0; i < lim; i++) {\n        for(int j = 0; j < 8; j++) {\n            int nx = x(q[i]) + dx[j];\n            int ny = y(q[i]) + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.insert(nx, ny);\n                if(!vis[Nxt]) {\n                    vis[Nxt] = 2;\n                    q[tail++] = Nxt;\n                }\n            }\n        }\n    }\n\n    for(int i = 0; i < tail; i++) {\n        for(int j = 0; j < 2; j++) {\n            int nx = x(q[i]) + dx[j];\n            int ny = y(q[i]) + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.find(nx, ny);\n                if(Nxt > c) addedge(q[i], Nxt);\n            }\n        }\n    }\n}\n\nint spe() {\n\n    int res = 0;\n    if(n == 1) {\n        Y[++c] = 0; Y[++c] = m+1; sort(Y+1, Y+c+1);\n        for(int i = 2; i <= c; i++) if(Y[i] - Y[i-1] > 1) ++ res;\n    }else {\n        X[++c] = 0; X[++c] = n+1; sort(X+1, X+c+1);\n        for(int i = 2; i <= c; i++) if(X[i] - X[i-1] > 1) ++ res;\n    }\n    return res >= 2 ? 0 : 1;\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    for(int T = read<int>(); T--; ) {\n\n        init();\n\n        n = read<int>();\n        m = read<int>();\n        c = read<int>();\n\n        for(int i = 1; i <= c; i++) {\n            X[i] = read<int>();\n            Y[i] = read<int>();\n        }\n\n        if(chk0()) {\n            puts(\"0\");\n            continue;\n        }\n\n        init();\n        build();\n\n        static int ans;\n        if((ans = chk()) != -2) { }\n        else if(min(n, m) == 1) { ans = spe(); }\n        else {\n            ans = chk1() ? 1 : 2;\n            if(c == 0) ans = min(n, m) == 1 ? 1 : 2;\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```\n","source":"_posts/noi2016-grid.md","raw":"---\ntitle: NOI2016 网格\ntags:\n  - Graph Theory\ndate: 2017-06-10 14:36:06\n---\n\n### Description\n\n> 给出一个 $ N \\times M $ 的网格图和图上的 $ C $ 个障碍物, 求最少删去多少个点可使得原图空格不四连通.\n$ N, M <= 10 ^ 9, C <= 10 ^ 5 $\n\n<!--more-->\n\n### Solution\n\n我们可以发现, 可能的答案只有 $ \\{ -1, 0, 1, 2 \\} $ 几种.\n\n考虑一些简单的情况:\n答案等于 $ -1 $ 时, 点数小于 $2$ 或者恰好有两个相邻的点.\n答案为 $ 0 $ 时, 显然原图不连通.\n\n那么就只需知道答案是否为 $ 1 $, 发现答案等于 $ 1 $ 当且仅当原图存在割点, 暴力的话不难做到 $ O(n * m) $.\n\n将到达每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来, 然后在这些点中找出一个割点, 满足到达最近的障碍的距离不超过 $1$.  \n这样的点就一定是原图中的割点.\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\n#define fst first\n#define snd second\n#define pb push_back\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\nconst int maxn = 2.5e6 + 10;\nconst int oo = 0x3f3f3f3f;\n\ntemplate<typename T> T read() {\n\tT n = 0, f = 1;\n\tchar ch = getchar();\n\tfor( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n\treturn n * f;\n}\n\nstruct Hash_Map {\n    static const int mod = 1666667;\n\n    int cnt = 0;\n    int st[mod], nxt[maxn], X[maxn], Y[maxn];\n\n    inline void clear() {\n        cnt = 0;\n        memset(st, 0, sizeof st);\n    }\n    inline int idx(int x, int y) {\n        return ((233LL*x + (y^888))%mod + mod)%mod;\n    }\n    int find(int x, int y) {\n        int u = idx(x, y);\n        for(int i = st[u]; i; i = nxt[i]) \n            if(X[i] == x && Y[i] == y) \n                return i;\n        return -1;\n    }\n    int insert(int x, int y) {\n        int u = idx(x, y);\n\n        for(int i = st[u]; i; i = nxt[i]) \n            if(X[i] == x && Y[i] == y) \n                return i;\n\n        ++ cnt;\n        X[cnt] = x, Y[cnt] = y;\n        nxt[cnt] = st[u]; st[u] = cnt;\n        return cnt;\n    }\n}HM;\n\nLL n, m, c;\nconst int dx[] = { 0, 1, 0, -1, 1, -1, 1, -1 };\nconst int dy[] = { 1, 0, -1, 0, 1, -1, -1, 1 };\n\nint st[maxn], nxt[maxn << 3], to[maxn << 3], ecnt = 1;\nvoid addedge(int x, int y) { \n    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;\n    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;\n}\n\nint vis[maxn];\nint mark[maxn], now = 0;\n\nvoid init() {\n    ecnt = 1;\n    HM.clear();\n    memset(st, 0, sizeof st);\n}\n\nint flood_fill(int u) {\n    int res = 1;\n    mark[u] = now;\n    for(int i = st[u], v; i; i = nxt[i]) if(mark[v = to[i]] != now) \n        res += flood_fill(v);\n    return res;\n}\n\nint area_count(int s) { return ++ now, flood_fill(s); }\n\nint chk() {\n    if(n*m-c < 2) return -1;\n    int res = area_count(c + 1);\n    if(n*m == 2 || (res == 2 && n*m-c == 2)) return -1;\n    return -2;\n}\n\nbool flag;\nint dfn[maxn], low[maxn], dfs_clock = 0;\nbool dfs(int u, int fa, bool f = false) {\n    low[u] = dfn[u] = ++dfs_clock;\n\n    for(int i = st[u], v; i; i = nxt[i]) if((v = to[i]) ^ fa) {\n        if(!dfn[v]) {\n            if(dfs(v, u)) return true;\n\n            if(vis[u] == 1 && (low[v] > dfn[u] || (!f && low[v] == dfn[u]))) {\n                return true;\n            }\n            chkmin(low[u], low[v]);\n        }else chkmin(low[u], dfn[v]);\n    }\n}\n\nbool chk1() {\n    flag = 0;\n    memset(dfn, dfs_clock = 0, sizeof dfn);\n\n    for(int i = c+1; i <= HM.cnt; i++) if(!dfn[i]) {\n        if(dfs(i, 0, 1)) return 1;\n    }\n    return 0;\n}\n\n#define x(i) HM.X[i]\n#define y(i) HM.Y[i]\n\n//char ch[1000][1000];\nint X[maxn], Y[maxn], idx[maxn];\nbool chk0() {\n    memset(idx, 0, sizeof idx);\n    memset(vis, 0, sizeof vis);\n\n    for(int i = 1; i <= c; i++) HM.insert(X[i], Y[i]);\n    for(int v = 1; v <= c; v++) if(!vis[v]) {\n        vector<int> V;\n        static int q[maxn];\n        int head = 0, tail = 0;\n\n        ecnt = 1;\n        vis[q[tail++] = v] = 3;\n        while(head < tail) {\n            int h = q[head++];\n            for(int i = 0; i < 8; i++) {\n                int nx = x(h) + dx[i];\n                int ny = y(h) + dy[i];\n\n                if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                    int Nxt = HM.insert(nx, ny);\n\n                    st[Nxt] = 0;\n                    if(Nxt <= c) {\n                        if(!vis[Nxt]) {\n                            vis[Nxt] = 3;\n                            q[tail++] = Nxt;\n                        }\n                    }else if(idx[Nxt] != v) {\n                        idx[Nxt] = v, V.pb(Nxt);\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < int(V.size()); i++) {\n            int u = V[i];\n            for(int j = 0; j < 2; j++) {\n                int nx = x(u) + dx[j];\n                int ny = y(u) + dy[j];\n\n                if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                    int Nxt = HM.find(nx, ny);\n                    if(idx[Nxt] == v) addedge(u, Nxt);\n                }\n            }\n        }\n\n        if(V.size() && area_count(V[0]) != int(V.size()))\n            return true;\n    }\n    return false;\n}\n\n\nvoid build() {\n    memset(vis, 0, sizeof vis);\n\n    int tail = 0;\n    static int q[maxn];\n\n    for(int i = 1; i <= c; i++) \n        HM.insert(X[i], Y[i]), vis[i] = 3;\n\n    for(int i = 1; i <= c; i++)\n        for(int j = 0; j < 8; j++) {\n            int nx = X[i] + dx[j];\n            int ny = Y[i] + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.insert(nx, ny);\n\n                if(!vis[Nxt]) {\n                    vis[Nxt] = 1;\n                    q[tail++] = Nxt;\n                }\n            }\n        }\n\n    int lim = tail;\n    for(int i = 0; i < lim; i++) {\n        for(int j = 0; j < 8; j++) {\n            int nx = x(q[i]) + dx[j];\n            int ny = y(q[i]) + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.insert(nx, ny);\n                if(!vis[Nxt]) {\n                    vis[Nxt] = 2;\n                    q[tail++] = Nxt;\n                }\n            }\n        }\n    }\n\n    for(int i = 0; i < tail; i++) {\n        for(int j = 0; j < 2; j++) {\n            int nx = x(q[i]) + dx[j];\n            int ny = y(q[i]) + dy[j];\n\n            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m) {\n                int Nxt = HM.find(nx, ny);\n                if(Nxt > c) addedge(q[i], Nxt);\n            }\n        }\n    }\n}\n\nint spe() {\n\n    int res = 0;\n    if(n == 1) {\n        Y[++c] = 0; Y[++c] = m+1; sort(Y+1, Y+c+1);\n        for(int i = 2; i <= c; i++) if(Y[i] - Y[i-1] > 1) ++ res;\n    }else {\n        X[++c] = 0; X[++c] = n+1; sort(X+1, X+c+1);\n        for(int i = 2; i <= c; i++) if(X[i] - X[i-1] > 1) ++ res;\n    }\n    return res >= 2 ? 0 : 1;\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    for(int T = read<int>(); T--; ) {\n\n        init();\n\n        n = read<int>();\n        m = read<int>();\n        c = read<int>();\n\n        for(int i = 1; i <= c; i++) {\n            X[i] = read<int>();\n            Y[i] = read<int>();\n        }\n\n        if(chk0()) {\n            puts(\"0\");\n            continue;\n        }\n\n        init();\n        build();\n\n        static int ans;\n        if((ans = chk()) != -2) { }\n        else if(min(n, m) == 1) { ans = spe(); }\n        else {\n            ans = chk1() ? 1 : 2;\n            if(c == 0) ans = min(n, m) == 1 ? 1 : 2;\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```\n","slug":"noi2016-grid","published":1,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cnh0013onis9w04shzy","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>给出一个 $ N \\times M $ 的网格图和图上的 $ C $ 个障碍物, 求最少删去多少个点可使得原图空格不四连通.<br>$ N, M &lt;= 10 ^ 9, C &lt;= 10 ^ 5 $</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>我们可以发现, 可能的答案只有 $ \\{ -1, 0, 1, 2 \\} $ 几种.</p>\n<p>考虑一些简单的情况:<br>答案等于 $ -1 $ 时, 点数小于 $2$ 或者恰好有两个相邻的点.<br>答案为 $ 0 $ 时, 显然原图不连通.</p>\n<p>那么就只需知道答案是否为 $ 1 $, 发现答案等于 $ 1 $ 当且仅当原图存在割点, 暴力的话不难做到 $ O(n * m) $.</p>\n<p>将到达每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来, 然后在这些点中找出一个割点, 满足到达最近的障碍的距离不超过 $1$.<br>这样的点就一定是原图中的割点.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2.5e6</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tT n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Hash_Map</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1666667</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> st[mod], nxt[maxn], X[maxn], Y[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> st);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">idx</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((<span class=\"number\">233L</span>L*x + (y^<span class=\"number\">888</span>))%mod + mod)%mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = idx(x, y);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = idx(x, y);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\"></div><div class=\"line\">        ++ cnt;</div><div class=\"line\">        X[cnt] = x, Y[cnt] = y;</div><div class=\"line\">        nxt[cnt] = st[u]; st[u] = cnt;</div><div class=\"line\">        <span class=\"keyword\">return</span> cnt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;HM;</div><div class=\"line\"></div><div class=\"line\">LL n, m, c;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dy[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> st[maxn], nxt[maxn &lt;&lt; <span class=\"number\">3</span>], to[maxn &lt;&lt; <span class=\"number\">3</span>], ecnt = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; </div><div class=\"line\">    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;</div><div class=\"line\">    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</div><div class=\"line\"><span class=\"keyword\">int</span> mark[maxn], now = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ecnt = <span class=\"number\">1</span>;</div><div class=\"line\">    HM.clear();</div><div class=\"line\">    <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> st);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">flood_fill</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</div><div class=\"line\">    mark[u] = now;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u], v; i; i = nxt[i]) <span class=\"keyword\">if</span>(mark[v = to[i]] != now) </div><div class=\"line\">        res += flood_fill(v);</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">area_count</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123; <span class=\"keyword\">return</span> ++ now, flood_fill(s); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n*m-c &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = area_count(c + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(n*m == <span class=\"number\">2</span> || (res == <span class=\"number\">2</span> &amp;&amp; n*m-c == <span class=\"number\">2</span>)) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> flag;</div><div class=\"line\"><span class=\"keyword\">int</span> dfn[maxn], low[maxn], dfs_clock = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa, <span class=\"keyword\">bool</span> f = <span class=\"literal\">false</span>)</span> </span>&#123;</div><div class=\"line\">    low[u] = dfn[u] = ++dfs_clock;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u], v; i; i = nxt[i]) <span class=\"keyword\">if</span>((v = to[i]) ^ fa) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!dfn[v]) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(dfs(v, u)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(vis[u] == <span class=\"number\">1</span> &amp;&amp; (low[v] &gt; dfn[u] || (!f &amp;&amp; low[v] == dfn[u]))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chkmin(low[u], low[v]);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> chkmin(low[u], dfn[v]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chk1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(dfn, dfs_clock = <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> dfn);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c+<span class=\"number\">1</span>; i &lt;= HM.cnt; i++) <span class=\"keyword\">if</span>(!dfn[i]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(dfs(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x(i) HM.X[i]</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y(i) HM.Y[i]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//char ch[1000][1000];</span></div><div class=\"line\"><span class=\"keyword\">int</span> X[maxn], Y[maxn], idx[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chk0</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(idx, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> idx);</div><div class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) HM.insert(X[i], Y[i]);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt;= c; v++) <span class=\"keyword\">if</span>(!vis[v]) &#123;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</div><div class=\"line\">        <span class=\"keyword\">int</span> head = <span class=\"number\">0</span>, tail = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        ecnt = <span class=\"number\">1</span>;</div><div class=\"line\">        vis[q[tail++] = v] = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(head &lt; tail) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> h = q[head++];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nx = x(h) + dx[i];</div><div class=\"line\">                <span class=\"keyword\">int</span> ny = y(h) + dy[i];</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\"></div><div class=\"line\">                    st[Nxt] = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(Nxt &lt;= c) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                            vis[Nxt] = <span class=\"number\">3</span>;</div><div class=\"line\">                            q[tail++] = Nxt;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(idx[Nxt] != v) &#123;</div><div class=\"line\">                        idx[Nxt] = v, V.pb(Nxt);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(V.size()); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> u = V[i];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nx = x(u) + dx[j];</div><div class=\"line\">                <span class=\"keyword\">int</span> ny = y(u) + dy[j];</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> Nxt = HM.find(nx, ny);</div><div class=\"line\">                    <span class=\"keyword\">if</span>(idx[Nxt] == v) addedge(u, Nxt);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(V.size() &amp;&amp; area_count(V[<span class=\"number\">0</span>]) != <span class=\"keyword\">int</span>(V.size()))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> tail = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) </div><div class=\"line\">        HM.insert(X[i], Y[i]), vis[i] = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = X[i] + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = Y[i] + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                    vis[Nxt] = <span class=\"number\">1</span>;</div><div class=\"line\">                    q[tail++] = Nxt;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> lim = tail;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lim; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = x(q[i]) + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = y(q[i]) + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\">                <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                    vis[Nxt] = <span class=\"number\">2</span>;</div><div class=\"line\">                    q[tail++] = Nxt;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tail; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = x(q[i]) + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = y(q[i]) + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.find(nx, ny);</div><div class=\"line\">                <span class=\"keyword\">if</span>(Nxt &gt; c) addedge(q[i], Nxt);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        Y[++c] = <span class=\"number\">0</span>; Y[++c] = m+<span class=\"number\">1</span>; sort(Y+<span class=\"number\">1</span>, Y+c+<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= c; i++) <span class=\"keyword\">if</span>(Y[i] - Y[i<span class=\"number\">-1</span>] &gt; <span class=\"number\">1</span>) ++ res;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        X[++c] = <span class=\"number\">0</span>; X[++c] = n+<span class=\"number\">1</span>; sort(X+<span class=\"number\">1</span>, X+c+<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= c; i++) <span class=\"keyword\">if</span>(X[i] - X[i<span class=\"number\">-1</span>] &gt; <span class=\"number\">1</span>) ++ res;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res &gt;= <span class=\"number\">2</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = read&lt;<span class=\"keyword\">int</span>&gt;(); T--; ) &#123;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\"></div><div class=\"line\">        n = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        m = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        c = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) &#123;</div><div class=\"line\">            X[i] = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">            Y[i] = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(chk0()) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\">        build();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans;</div><div class=\"line\">        <span class=\"keyword\">if</span>((ans = chk()) != <span class=\"number\">-2</span>) &#123; &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(min(n, m) == <span class=\"number\">1</span>) &#123; ans = spe(); &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ans = chk1() ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"number\">0</span>) ans = min(n, m) == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>给出一个 $ N \\times M $ 的网格图和图上的 $ C $ 个障碍物, 求最少删去多少个点可使得原图空格不四连通.<br>$ N, M &lt;= 10 ^ 9, C &lt;= 10 ^ 5 $</p>\n</blockquote>","more":"<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>我们可以发现, 可能的答案只有 $ \\{ -1, 0, 1, 2 \\} $ 几种.</p>\n<p>考虑一些简单的情况:<br>答案等于 $ -1 $ 时, 点数小于 $2$ 或者恰好有两个相邻的点.<br>答案为 $ 0 $ 时, 显然原图不连通.</p>\n<p>那么就只需知道答案是否为 $ 1 $, 发现答案等于 $ 1 $ 当且仅当原图存在割点, 暴力的话不难做到 $ O(n * m) $.</p>\n<p>将到达每个障碍的曼哈顿距离不超过 $2$ 的空格给提出来, 然后在这些点中找出一个割点, 满足到达最近的障碍的距离不超过 $1$.<br>这样的点就一定是原图中的割点.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">2.5e6</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tT n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Hash_Map</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1666667</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> st[mod], nxt[maxn], X[maxn], Y[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        cnt = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> st);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">idx</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((<span class=\"number\">233L</span>L*x + (y^<span class=\"number\">888</span>))%mod + mod)%mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = idx(x, y);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> u = idx(x, y);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u]; i; i = nxt[i]) </div><div class=\"line\">            <span class=\"keyword\">if</span>(X[i] == x &amp;&amp; Y[i] == y) </div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\"></div><div class=\"line\">        ++ cnt;</div><div class=\"line\">        X[cnt] = x, Y[cnt] = y;</div><div class=\"line\">        nxt[cnt] = st[u]; st[u] = cnt;</div><div class=\"line\">        <span class=\"keyword\">return</span> cnt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;HM;</div><div class=\"line\"></div><div class=\"line\">LL n, m, c;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dy[] = &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> st[maxn], nxt[maxn &lt;&lt; <span class=\"number\">3</span>], to[maxn &lt;&lt; <span class=\"number\">3</span>], ecnt = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123; </div><div class=\"line\">    to[++ecnt] = y; nxt[ecnt] = st[x]; st[x] = ecnt;</div><div class=\"line\">    to[++ecnt] = x; nxt[ecnt] = st[y]; st[y] = ecnt;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> vis[maxn];</div><div class=\"line\"><span class=\"keyword\">int</span> mark[maxn], now = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ecnt = <span class=\"number\">1</span>;</div><div class=\"line\">    HM.clear();</div><div class=\"line\">    <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> st);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">flood_fill</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</div><div class=\"line\">    mark[u] = now;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u], v; i; i = nxt[i]) <span class=\"keyword\">if</span>(mark[v = to[i]] != now) </div><div class=\"line\">        res += flood_fill(v);</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">area_count</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123; <span class=\"keyword\">return</span> ++ now, flood_fill(s); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n*m-c &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = area_count(c + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(n*m == <span class=\"number\">2</span> || (res == <span class=\"number\">2</span> &amp;&amp; n*m-c == <span class=\"number\">2</span>)) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> flag;</div><div class=\"line\"><span class=\"keyword\">int</span> dfn[maxn], low[maxn], dfs_clock = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa, <span class=\"keyword\">bool</span> f = <span class=\"literal\">false</span>)</span> </span>&#123;</div><div class=\"line\">    low[u] = dfn[u] = ++dfs_clock;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = st[u], v; i; i = nxt[i]) <span class=\"keyword\">if</span>((v = to[i]) ^ fa) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!dfn[v]) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(dfs(v, u)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(vis[u] == <span class=\"number\">1</span> &amp;&amp; (low[v] &gt; dfn[u] || (!f &amp;&amp; low[v] == dfn[u]))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chkmin(low[u], low[v]);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> chkmin(low[u], dfn[v]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chk1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(dfn, dfs_clock = <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> dfn);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c+<span class=\"number\">1</span>; i &lt;= HM.cnt; i++) <span class=\"keyword\">if</span>(!dfn[i]) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(dfs(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x(i) HM.X[i]</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y(i) HM.Y[i]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//char ch[1000][1000];</span></div><div class=\"line\"><span class=\"keyword\">int</span> X[maxn], Y[maxn], idx[maxn];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chk0</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(idx, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> idx);</div><div class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) HM.insert(X[i], Y[i]);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = <span class=\"number\">1</span>; v &lt;= c; v++) <span class=\"keyword\">if</span>(!vis[v]) &#123;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; V;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</div><div class=\"line\">        <span class=\"keyword\">int</span> head = <span class=\"number\">0</span>, tail = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        ecnt = <span class=\"number\">1</span>;</div><div class=\"line\">        vis[q[tail++] = v] = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(head &lt; tail) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> h = q[head++];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nx = x(h) + dx[i];</div><div class=\"line\">                <span class=\"keyword\">int</span> ny = y(h) + dy[i];</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\"></div><div class=\"line\">                    st[Nxt] = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(Nxt &lt;= c) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                            vis[Nxt] = <span class=\"number\">3</span>;</div><div class=\"line\">                            q[tail++] = Nxt;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(idx[Nxt] != v) &#123;</div><div class=\"line\">                        idx[Nxt] = v, V.pb(Nxt);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(V.size()); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> u = V[i];</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> nx = x(u) + dx[j];</div><div class=\"line\">                <span class=\"keyword\">int</span> ny = y(u) + dy[j];</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> Nxt = HM.find(nx, ny);</div><div class=\"line\">                    <span class=\"keyword\">if</span>(idx[Nxt] == v) addedge(u, Nxt);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(V.size() &amp;&amp; area_count(V[<span class=\"number\">0</span>]) != <span class=\"keyword\">int</span>(V.size()))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> tail = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) </div><div class=\"line\">        HM.insert(X[i], Y[i]), vis[i] = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = X[i] + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = Y[i] + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                    vis[Nxt] = <span class=\"number\">1</span>;</div><div class=\"line\">                    q[tail++] = Nxt;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> lim = tail;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lim; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">8</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = x(q[i]) + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = y(q[i]) + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.insert(nx, ny);</div><div class=\"line\">                <span class=\"keyword\">if</span>(!vis[Nxt]) &#123;</div><div class=\"line\">                    vis[Nxt] = <span class=\"number\">2</span>;</div><div class=\"line\">                    q[tail++] = Nxt;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tail; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> nx = x(q[i]) + dx[j];</div><div class=\"line\">            <span class=\"keyword\">int</span> ny = y(q[i]) + dy[j];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= <span class=\"number\">1</span> &amp;&amp; nx &lt;= n &amp;&amp; ny &gt;= <span class=\"number\">1</span> &amp;&amp; ny &lt;= m) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> Nxt = HM.find(nx, ny);</div><div class=\"line\">                <span class=\"keyword\">if</span>(Nxt &gt; c) addedge(q[i], Nxt);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spe</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        Y[++c] = <span class=\"number\">0</span>; Y[++c] = m+<span class=\"number\">1</span>; sort(Y+<span class=\"number\">1</span>, Y+c+<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= c; i++) <span class=\"keyword\">if</span>(Y[i] - Y[i<span class=\"number\">-1</span>] &gt; <span class=\"number\">1</span>) ++ res;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        X[++c] = <span class=\"number\">0</span>; X[++c] = n+<span class=\"number\">1</span>; sort(X+<span class=\"number\">1</span>, X+c+<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= c; i++) <span class=\"keyword\">if</span>(X[i] - X[i<span class=\"number\">-1</span>] &gt; <span class=\"number\">1</span>) ++ res;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res &gt;= <span class=\"number\">2</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = read&lt;<span class=\"keyword\">int</span>&gt;(); T--; ) &#123;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\"></div><div class=\"line\">        n = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        m = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        c = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; i++) &#123;</div><div class=\"line\">            X[i] = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">            Y[i] = read&lt;<span class=\"keyword\">int</span>&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(chk0()) &#123;</div><div class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        init();</div><div class=\"line\">        build();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans;</div><div class=\"line\">        <span class=\"keyword\">if</span>((ans = chk()) != <span class=\"number\">-2</span>) &#123; &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(min(n, m) == <span class=\"number\">1</span>) &#123; ans = spe(); &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ans = chk1() ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(c == <span class=\"number\">0</span>) ans = min(n, m) == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Atcoder 选做","date":"2017-06-30T13:56:39.000Z","_content":"\n其实是总结一下比赛中遇到的好题, 然后瞎做了几场 AGC 的题目练习, 感觉还比较有意思. \n\n<!--more-->\n### AGC\n\n#### AGC002 F Leftmost Ball\n> 给你$N$种不同颜色的球, 每种有$K$个, 现在你可以将球任意排列, 但最终的序列中每种颜色的第一个出现位置要被染成$0$颜色, 求能够得到的本质不同的序列数, 对$10^9 + 7$取模.\n$ N, K \\leq 2000 $\n\n这题正着处理没有什么思路, 但是如果从右往左来会比较好考虑.\n我们可以记$f(i, j)$ 表示当前从右往左填剩下 $i$ 个 $0$ 颜色的球, 还剩下$j$ 种颜色没有放的方案数. \n那么每一次的决策就包括放入一个$0$ 颜色的球以及添加一种颜色的 $k-1$个球:\n$$ \n\\begin{align}\n    f(i-1, j) & \\leftarrow f(i, j) \\mid [i > j] \\\\\n    f(i, j-1) & \\leftarrow f(i, j) \\times {n-i + (n-j) \\times (k-1) + k-2 \\choose k-2}\n\\end{align}\n$$\n> 后面那个公式是可重集, 还有最后的答案要乘以$n!$.\n\n#### AGC005 D ~K Perm Counting\n> 求长度为$N$ 的排列中, 满足对任意的$i$, 都有$|a\\_i - i| \\neq K$的排列数量. \n$ 1 \\leq K < N \\leq 2000 $\n\n考虑容斥, 计算至少有$i$ 个位置不合法的方案数.\n由于$K$ 是确定的, 那么所有不合法的方案可以看成是完全二分图匹配中出现了一条$(i, i+k)$的边或者一条$(i, i-k)$的边.\n\n将这样的边在画出来就是若干条交叉路径.\n观察到这样的交叉路径不相交, 所以可以拆开拼成一个序列, 然后在序列上$dp$即可.\n\n#### AGC015 D A or...or B Problem\n> 求在$[A, B]$中任意选出一个非空整数集合的元素位或和有多少种不同的答案.\n$ 1 \\le A \\le B \\le 2^{60} $\n\n先考虑一些比较特殊的情况(以下默认$A, B$的位数相同):\n\n- 当$B$可以表示为$2^k - 1$时, 这个位或和恰好取遍$[A, B]$之间的所有整数.\n- 当$A$可以表示为$2^k$时, 这个位或和在区间$[A, A + 2^{t+1}) \\mid t < log\\_2 A$中, 其中$t$是最大的满足$B$的第$t$位为$1$的数.\n\n那么一般情况下这些条件有什么用呢?\n\n我们考虑找到最大的一个$T$,使得$B$ 的第$T$ 位为$1$ 且$A$ 的第$T$ 位不为$1$, 记 $K = 2 ^ T$.\n当选择的数的集合在 $[A, K)$ 以及在 $[K, B]$ 中的情况可以直接用上述结论.\n\n接下来考虑同时选取两个集合中的数可能会产生的答案.\n因为这时小于$K$ 的部分是没有贡献的, 所以直接将$[A, K)$ 中的所有答案取出. 不难发现$[K, B]$ 中取任意个都与只使用$K$ 没有区别, 那么这时候的范围是$[K+A, 2\\times K-1]$, 注意减去重复贡献.\n\n#### AGC015 F Kenus the Ancient Greek\n> Q组询问, 每组询问的形式为A, B, 表示求$ x \\in [1, A], y \\in [1, B] $的 $g(x, y)$ 的最大值, 及最大值的方案数, 其中: \n$$\ng(x, y) = \n\\begin{cases} \n    1, & \\text{y = 0} \\\\\n    g(y, x), & \\text{x > y} \\\\\n    g(y \\; mod \\; x, x) + 1, & \\text{otherwise} \\\\\n\\end{cases}\n$$\n$ 1 \\le Q \\le 3 \\times 10 ^ 5 \\,\\,, 1 \\le A, B \\le 10 ^ {18} $\n\n**以下无特殊说明, 均默认所有 $x < y, A < B $**\n\n先考虑第一问, 如果我们由一个特定的 $(x, y)$ , 从小到大地构造使得 $g(x, y)$ 的值不断地变大, 那么如何构造使得这个值最大呢?\n\n对于所有 $(x', y')$ 满足 $g(x', y') = g(x, y) + 1$, 显然有:\n\n$$ \n(x', y') \\in \\{ (y, x + ky) \\mid k \\in Z^+ \\} \n$$\n\n同时, 为了使得这个过程尽可能的多次进行,我们从 $(0, 1)$ 出发, 每次取 $ k = 1 $. \n发现这样生成了一组$Fibonacci$数列, 这里$Fibonacci$数列从0开始标号. \n\n那么第一问的答案就是求满足 $ Fib\\_k \\le A,\\; Fib\\_{k+1} \\le B $ 的最大的$k$.\n同时, 这样的数对是满足 $g(x, y) = k$ 的最小的数对.\n\n接下来考虑统计方案数.\n首先, 对于一组询问我们只需考虑其中**与最优解相关**的 $(x, y)$.\n\n考虑所有最优的 $(x, y)$ 会具有的性质:\n- $x \\ge Fib\\_k, \\; y \\ge Fib\\_{k+1} $\n- 不存在一组 $(x' < x, y' < y)$, 使得 $g(x', y') > g(x, y)$\n\n然而这样的 $(x, y)$ 并不一定是最优的.\n\n我们接着分析所有在最优解的 $g$ 的计算路径上的数对$(x, y)$ 的性质:\n不难发现, 经过一次变化后得到的 $(x', y')$, 一定满足:\n\n- $ g(x', y') = k-1 $\n- $ x' \\ge Fib\\_{k-1}, y' \\ge Fib\\_{k} $\n- $ y' \\le Fib\\_{k+1} + Fib\\_{k-2} $\n\n后面条件的解释: \n若 $ y' > Fib\\_{k+1} + Fib\\_{k-2}$, 则 \n    $$ (x, y) = (y' > Fib\\_{k+1} + Fib\\_{k-2} > Fib\\_{k+1}, x' + py' \\ge x' + y' > Fib\\_{k+2})$$ \n则$(x, y)$ 不再满足上述最优性质2, 矛盾.\n\n同时每次向下一步进行构造的时候只有 $ (Fib\\_k, Fib\\_{k+1}) $ 可能取到 $ p = 2 $ 所以这样的数对个数是$ O(k) $ 的.\n所以我们预处理所有的这样的数对, 然后用除法算下答案就好了.\n复杂度 $ O(log^2{MAX} + QlogMAX) $.\n\n### ARC\nARC 的题目主要来源是打过的几场比赛, 暂时不多.\n\n#### ARC074 E RGB Sequence\n> 给你一个长度为$N$的序列和$M$组约束条件, 每组条件形如 $L\\_i, R\\_i, X\\_i$, 表示序列上的$[L\\_i, R\\_i]$中恰好有$X\\_i$种颜色, 现在要你用三种颜色给这个序列染色, 求满足所有约束的方案数.\n$ 1 \\le X\\_i \\le 3 $\n$ 1 \\le N, M \\le 300 $\n$ 1 \\le L\\_i \\le R\\_i \\le N $\n\n$dp$的思路应该比较显然, 然而普通的状态表示不太好处理.\n我们记$dp\\_{r, g, b}$ 表示三种颜色的球最后一次出现的位置分别是$r, g, b$ 时的方案数. \n\n然后考虑状态的合法性, 可以把条件存在$R\\_i$的位置. 当选择一个状态时, 考虑这个状态的最末位的所有约束即可. \n\n#### ARC077 F SS\n> 定义一个字符串为__偶的__, 当且仅当这个字符串能够被分成两个完全相同的字符串.\n定义函数$f(s)$, 其中$s, f(s)$ 均是字符串, $f(s)$为在字符串$s$ 后添加非空的字符满足新串为偶且长度最小的串.\n现在给你串$s$ (初始为偶的), 求$f^{10^{100}}(s)[L, R]$ 中各个字母的出现次数.\n$ 1 \\le |S| \\le 2\\times 10^5 $\n$ 1 \\le L \\le R \\le 10^{18} $\n\n首先对于一个给定的$s$, 其$f(s)$ 必定唯一.\n考虑每次最少加一个字符, $f^{10^{100}}(s)$ 就等价于一个长度无穷的字符串.\n这个答案的形式显然可以前缀和, 又因为$s$ 在变化过程中始终是偶的, 实际上我们只需要关注左半部分的字符.\n\n我们从最简单的一次操作来考虑.\n记初始的字符串$s$ 为$SS$, 记一次变化之后左边的部分为$ST$, 那么得到的新串就是$STST$. \n要使得加的字符长度最小, 就要在$S$中找到最长前后缀匹配长度, 这时$T$就是$S$去掉最长匹配后缀所得.\n\n我们发现, 每次操作都等价于找到前后缀匹配最大长度(当然要小于$|S|$), 然后将剩下部分的前缀$T$添加到$S$的末尾.\n\n- 当$|T| \\mid |S|$ 时, $|S|$ 有长为$|T|$的最小周期, 每次加入的$|T|$相同.\n- 当$|T| \\nmid|S|$ 时, 我们~~通过打表~~发现, 这样的$T$是在有规律地变化的, 因为每次加入$T$之后的串前后缀最长匹配一定是$|T|$, 否则的话, 上一步中最长匹配的性质就不一定会满足.\n\n然后我们得到了一个$Fibonacci$数列? 直接暴力算就好了...\n实际上第一种情况也可以直接算, 因为整个序列都是$T$的若干次重复得到的.\n","source":"_posts/atcoder-select.md","raw":"---\ntitle: Atcoder 选做\ndate: 2017-06-30 21:56:39\ntags:\n    - Solution\n---\n\n其实是总结一下比赛中遇到的好题, 然后瞎做了几场 AGC 的题目练习, 感觉还比较有意思. \n\n<!--more-->\n### AGC\n\n#### AGC002 F Leftmost Ball\n> 给你$N$种不同颜色的球, 每种有$K$个, 现在你可以将球任意排列, 但最终的序列中每种颜色的第一个出现位置要被染成$0$颜色, 求能够得到的本质不同的序列数, 对$10^9 + 7$取模.\n$ N, K \\leq 2000 $\n\n这题正着处理没有什么思路, 但是如果从右往左来会比较好考虑.\n我们可以记$f(i, j)$ 表示当前从右往左填剩下 $i$ 个 $0$ 颜色的球, 还剩下$j$ 种颜色没有放的方案数. \n那么每一次的决策就包括放入一个$0$ 颜色的球以及添加一种颜色的 $k-1$个球:\n$$ \n\\begin{align}\n    f(i-1, j) & \\leftarrow f(i, j) \\mid [i > j] \\\\\n    f(i, j-1) & \\leftarrow f(i, j) \\times {n-i + (n-j) \\times (k-1) + k-2 \\choose k-2}\n\\end{align}\n$$\n> 后面那个公式是可重集, 还有最后的答案要乘以$n!$.\n\n#### AGC005 D ~K Perm Counting\n> 求长度为$N$ 的排列中, 满足对任意的$i$, 都有$|a\\_i - i| \\neq K$的排列数量. \n$ 1 \\leq K < N \\leq 2000 $\n\n考虑容斥, 计算至少有$i$ 个位置不合法的方案数.\n由于$K$ 是确定的, 那么所有不合法的方案可以看成是完全二分图匹配中出现了一条$(i, i+k)$的边或者一条$(i, i-k)$的边.\n\n将这样的边在画出来就是若干条交叉路径.\n观察到这样的交叉路径不相交, 所以可以拆开拼成一个序列, 然后在序列上$dp$即可.\n\n#### AGC015 D A or...or B Problem\n> 求在$[A, B]$中任意选出一个非空整数集合的元素位或和有多少种不同的答案.\n$ 1 \\le A \\le B \\le 2^{60} $\n\n先考虑一些比较特殊的情况(以下默认$A, B$的位数相同):\n\n- 当$B$可以表示为$2^k - 1$时, 这个位或和恰好取遍$[A, B]$之间的所有整数.\n- 当$A$可以表示为$2^k$时, 这个位或和在区间$[A, A + 2^{t+1}) \\mid t < log\\_2 A$中, 其中$t$是最大的满足$B$的第$t$位为$1$的数.\n\n那么一般情况下这些条件有什么用呢?\n\n我们考虑找到最大的一个$T$,使得$B$ 的第$T$ 位为$1$ 且$A$ 的第$T$ 位不为$1$, 记 $K = 2 ^ T$.\n当选择的数的集合在 $[A, K)$ 以及在 $[K, B]$ 中的情况可以直接用上述结论.\n\n接下来考虑同时选取两个集合中的数可能会产生的答案.\n因为这时小于$K$ 的部分是没有贡献的, 所以直接将$[A, K)$ 中的所有答案取出. 不难发现$[K, B]$ 中取任意个都与只使用$K$ 没有区别, 那么这时候的范围是$[K+A, 2\\times K-1]$, 注意减去重复贡献.\n\n#### AGC015 F Kenus the Ancient Greek\n> Q组询问, 每组询问的形式为A, B, 表示求$ x \\in [1, A], y \\in [1, B] $的 $g(x, y)$ 的最大值, 及最大值的方案数, 其中: \n$$\ng(x, y) = \n\\begin{cases} \n    1, & \\text{y = 0} \\\\\n    g(y, x), & \\text{x > y} \\\\\n    g(y \\; mod \\; x, x) + 1, & \\text{otherwise} \\\\\n\\end{cases}\n$$\n$ 1 \\le Q \\le 3 \\times 10 ^ 5 \\,\\,, 1 \\le A, B \\le 10 ^ {18} $\n\n**以下无特殊说明, 均默认所有 $x < y, A < B $**\n\n先考虑第一问, 如果我们由一个特定的 $(x, y)$ , 从小到大地构造使得 $g(x, y)$ 的值不断地变大, 那么如何构造使得这个值最大呢?\n\n对于所有 $(x', y')$ 满足 $g(x', y') = g(x, y) + 1$, 显然有:\n\n$$ \n(x', y') \\in \\{ (y, x + ky) \\mid k \\in Z^+ \\} \n$$\n\n同时, 为了使得这个过程尽可能的多次进行,我们从 $(0, 1)$ 出发, 每次取 $ k = 1 $. \n发现这样生成了一组$Fibonacci$数列, 这里$Fibonacci$数列从0开始标号. \n\n那么第一问的答案就是求满足 $ Fib\\_k \\le A,\\; Fib\\_{k+1} \\le B $ 的最大的$k$.\n同时, 这样的数对是满足 $g(x, y) = k$ 的最小的数对.\n\n接下来考虑统计方案数.\n首先, 对于一组询问我们只需考虑其中**与最优解相关**的 $(x, y)$.\n\n考虑所有最优的 $(x, y)$ 会具有的性质:\n- $x \\ge Fib\\_k, \\; y \\ge Fib\\_{k+1} $\n- 不存在一组 $(x' < x, y' < y)$, 使得 $g(x', y') > g(x, y)$\n\n然而这样的 $(x, y)$ 并不一定是最优的.\n\n我们接着分析所有在最优解的 $g$ 的计算路径上的数对$(x, y)$ 的性质:\n不难发现, 经过一次变化后得到的 $(x', y')$, 一定满足:\n\n- $ g(x', y') = k-1 $\n- $ x' \\ge Fib\\_{k-1}, y' \\ge Fib\\_{k} $\n- $ y' \\le Fib\\_{k+1} + Fib\\_{k-2} $\n\n后面条件的解释: \n若 $ y' > Fib\\_{k+1} + Fib\\_{k-2}$, 则 \n    $$ (x, y) = (y' > Fib\\_{k+1} + Fib\\_{k-2} > Fib\\_{k+1}, x' + py' \\ge x' + y' > Fib\\_{k+2})$$ \n则$(x, y)$ 不再满足上述最优性质2, 矛盾.\n\n同时每次向下一步进行构造的时候只有 $ (Fib\\_k, Fib\\_{k+1}) $ 可能取到 $ p = 2 $ 所以这样的数对个数是$ O(k) $ 的.\n所以我们预处理所有的这样的数对, 然后用除法算下答案就好了.\n复杂度 $ O(log^2{MAX} + QlogMAX) $.\n\n### ARC\nARC 的题目主要来源是打过的几场比赛, 暂时不多.\n\n#### ARC074 E RGB Sequence\n> 给你一个长度为$N$的序列和$M$组约束条件, 每组条件形如 $L\\_i, R\\_i, X\\_i$, 表示序列上的$[L\\_i, R\\_i]$中恰好有$X\\_i$种颜色, 现在要你用三种颜色给这个序列染色, 求满足所有约束的方案数.\n$ 1 \\le X\\_i \\le 3 $\n$ 1 \\le N, M \\le 300 $\n$ 1 \\le L\\_i \\le R\\_i \\le N $\n\n$dp$的思路应该比较显然, 然而普通的状态表示不太好处理.\n我们记$dp\\_{r, g, b}$ 表示三种颜色的球最后一次出现的位置分别是$r, g, b$ 时的方案数. \n\n然后考虑状态的合法性, 可以把条件存在$R\\_i$的位置. 当选择一个状态时, 考虑这个状态的最末位的所有约束即可. \n\n#### ARC077 F SS\n> 定义一个字符串为__偶的__, 当且仅当这个字符串能够被分成两个完全相同的字符串.\n定义函数$f(s)$, 其中$s, f(s)$ 均是字符串, $f(s)$为在字符串$s$ 后添加非空的字符满足新串为偶且长度最小的串.\n现在给你串$s$ (初始为偶的), 求$f^{10^{100}}(s)[L, R]$ 中各个字母的出现次数.\n$ 1 \\le |S| \\le 2\\times 10^5 $\n$ 1 \\le L \\le R \\le 10^{18} $\n\n首先对于一个给定的$s$, 其$f(s)$ 必定唯一.\n考虑每次最少加一个字符, $f^{10^{100}}(s)$ 就等价于一个长度无穷的字符串.\n这个答案的形式显然可以前缀和, 又因为$s$ 在变化过程中始终是偶的, 实际上我们只需要关注左半部分的字符.\n\n我们从最简单的一次操作来考虑.\n记初始的字符串$s$ 为$SS$, 记一次变化之后左边的部分为$ST$, 那么得到的新串就是$STST$. \n要使得加的字符长度最小, 就要在$S$中找到最长前后缀匹配长度, 这时$T$就是$S$去掉最长匹配后缀所得.\n\n我们发现, 每次操作都等价于找到前后缀匹配最大长度(当然要小于$|S|$), 然后将剩下部分的前缀$T$添加到$S$的末尾.\n\n- 当$|T| \\mid |S|$ 时, $|S|$ 有长为$|T|$的最小周期, 每次加入的$|T|$相同.\n- 当$|T| \\nmid|S|$ 时, 我们~~通过打表~~发现, 这样的$T$是在有规律地变化的, 因为每次加入$T$之后的串前后缀最长匹配一定是$|T|$, 否则的话, 上一步中最长匹配的性质就不一定会满足.\n\n然后我们得到了一个$Fibonacci$数列? 直接暴力算就好了...\n实际上第一种情况也可以直接算, 因为整个序列都是$T$的若干次重复得到的.\n","slug":"atcoder-select","published":1,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cnj0015onisv6ipc4rs","content":"<p>其实是总结一下比赛中遇到的好题, 然后瞎做了几场 AGC 的题目练习, 感觉还比较有意思. </p>\n<a id=\"more\"></a>\n<h3 id=\"AGC\"><a href=\"#AGC\" class=\"headerlink\" title=\"AGC\"></a>AGC</h3><h4 id=\"AGC002-F-Leftmost-Ball\"><a href=\"#AGC002-F-Leftmost-Ball\" class=\"headerlink\" title=\"AGC002 F Leftmost Ball\"></a>AGC002 F Leftmost Ball</h4><blockquote>\n<p>给你$N$种不同颜色的球, 每种有$K$个, 现在你可以将球任意排列, 但最终的序列中每种颜色的第一个出现位置要被染成$0$颜色, 求能够得到的本质不同的序列数, 对$10^9 + 7$取模.<br>$ N, K \\leq 2000 $</p>\n</blockquote>\n<p>这题正着处理没有什么思路, 但是如果从右往左来会比较好考虑.<br>我们可以记$f(i, j)$ 表示当前从右往左填剩下 $i$ 个 $0$ 颜色的球, 还剩下$j$ 种颜色没有放的方案数.<br>那么每一次的决策就包括放入一个$0$ 颜色的球以及添加一种颜色的 $k-1$个球:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\n    f(i-1, j) & \\leftarrow f(i, j) \\mid [i > j] \\\\\n    f(i, j-1) & \\leftarrow f(i, j) \\times {n-i + (n-j) \\times (k-1) + k-2 \\choose k-2}\n\\end{align}</script><blockquote>\n<p>后面那个公式是可重集, 还有最后的答案要乘以$n!$.</p>\n</blockquote>\n<h4 id=\"AGC005-D-K-Perm-Counting\"><a href=\"#AGC005-D-K-Perm-Counting\" class=\"headerlink\" title=\"AGC005 D ~K Perm Counting\"></a>AGC005 D ~K Perm Counting</h4><blockquote>\n<p>求长度为$N$ 的排列中, 满足对任意的$i$, 都有$|a_i - i| \\neq K$的排列数量.<br>$ 1 \\leq K &lt; N \\leq 2000 $</p>\n</blockquote>\n<p>考虑容斥, 计算至少有$i$ 个位置不合法的方案数.<br>由于$K$ 是确定的, 那么所有不合法的方案可以看成是完全二分图匹配中出现了一条$(i, i+k)$的边或者一条$(i, i-k)$的边.</p>\n<p>将这样的边在画出来就是若干条交叉路径.<br>观察到这样的交叉路径不相交, 所以可以拆开拼成一个序列, 然后在序列上$dp$即可.</p>\n<h4 id=\"AGC015-D-A-or…or-B-Problem\"><a href=\"#AGC015-D-A-or…or-B-Problem\" class=\"headerlink\" title=\"AGC015 D A or…or B Problem\"></a>AGC015 D A or…or B Problem</h4><blockquote>\n<p>求在$[A, B]$中任意选出一个非空整数集合的元素位或和有多少种不同的答案.<br>$ 1 \\le A \\le B \\le 2^{60} $</p>\n</blockquote>\n<p>先考虑一些比较特殊的情况(以下默认$A, B$的位数相同):</p>\n<ul>\n<li>当$B$可以表示为$2^k - 1$时, 这个位或和恰好取遍$[A, B]$之间的所有整数.</li>\n<li>当$A$可以表示为$2^k$时, 这个位或和在区间$[A, A + 2^{t+1}) \\mid t &lt; log_2 A$中, 其中$t$是最大的满足$B$的第$t$位为$1$的数.</li>\n</ul>\n<p>那么一般情况下这些条件有什么用呢?</p>\n<p>我们考虑找到最大的一个$T$,使得$B$ 的第$T$ 位为$1$ 且$A$ 的第$T$ 位不为$1$, 记 $K = 2 ^ T$.<br>当选择的数的集合在 $[A, K)$ 以及在 $[K, B]$ 中的情况可以直接用上述结论.</p>\n<p>接下来考虑同时选取两个集合中的数可能会产生的答案.<br>因为这时小于$K$ 的部分是没有贡献的, 所以直接将$[A, K)$ 中的所有答案取出. 不难发现$[K, B]$ 中取任意个都与只使用$K$ 没有区别, 那么这时候的范围是$[K+A, 2\\times K-1]$, 注意减去重复贡献.</p>\n<h4 id=\"AGC015-F-Kenus-the-Ancient-Greek\"><a href=\"#AGC015-F-Kenus-the-Ancient-Greek\" class=\"headerlink\" title=\"AGC015 F Kenus the Ancient Greek\"></a>AGC015 F Kenus the Ancient Greek</h4><blockquote>\n<p>Q组询问, 每组询问的形式为A, B, 表示求$ x \\in [1, A], y \\in [1, B] $的 $g(x, y)$ 的最大值, 及最大值的方案数, 其中: </p>\n<script type=\"math/tex; mode=display\">\ng(x, y) = \n\\begin{cases} \n    1, & \\text{y = 0} \\\\\n    g(y, x), & \\text{x > y} \\\\\n    g(y \\; mod \\; x, x) + 1, & \\text{otherwise} \\\\\n\\end{cases}</script><p>$ 1 \\le Q \\le 3 \\times 10 ^ 5 \\,\\,, 1 \\le A, B \\le 10 ^ {18} $</p>\n</blockquote>\n<p><strong>以下无特殊说明, 均默认所有 $x &lt; y, A &lt; B $</strong></p>\n<p>先考虑第一问, 如果我们由一个特定的 $(x, y)$ , 从小到大地构造使得 $g(x, y)$ 的值不断地变大, 那么如何构造使得这个值最大呢?</p>\n<p>对于所有 $(x’, y’)$ 满足 $g(x’, y’) = g(x, y) + 1$, 显然有:</p>\n<script type=\"math/tex; mode=display\">\n(x', y') \\in \\{ (y, x + ky) \\mid k \\in Z^+ \\}</script><p>同时, 为了使得这个过程尽可能的多次进行,我们从 $(0, 1)$ 出发, 每次取 $ k = 1 $.<br>发现这样生成了一组$Fibonacci$数列, 这里$Fibonacci$数列从0开始标号. </p>\n<p>那么第一问的答案就是求满足 $ Fib_k \\le A,\\; Fib_{k+1} \\le B $ 的最大的$k$.<br>同时, 这样的数对是满足 $g(x, y) = k$ 的最小的数对.</p>\n<p>接下来考虑统计方案数.<br>首先, 对于一组询问我们只需考虑其中<strong>与最优解相关</strong>的 $(x, y)$.</p>\n<p>考虑所有最优的 $(x, y)$ 会具有的性质:</p>\n<ul>\n<li>$x \\ge Fib_k, \\; y \\ge Fib_{k+1} $</li>\n<li>不存在一组 $(x’ &lt; x, y’ &lt; y)$, 使得 $g(x’, y’) &gt; g(x, y)$</li>\n</ul>\n<p>然而这样的 $(x, y)$ 并不一定是最优的.</p>\n<p>我们接着分析所有在最优解的 $g$ 的计算路径上的数对$(x, y)$ 的性质:<br>不难发现, 经过一次变化后得到的 $(x’, y’)$, 一定满足:</p>\n<ul>\n<li>$ g(x’, y’) = k-1 $</li>\n<li>$ x’ \\ge Fib_{k-1}, y’ \\ge Fib_{k} $</li>\n<li>$ y’ \\le Fib_{k+1} + Fib_{k-2} $</li>\n</ul>\n<p>后面条件的解释:<br>若 $ y’ &gt; Fib_{k+1} + Fib_{k-2}$, 则 </p>\n<pre><code>$$ (x, y) = (y&#39; &gt; Fib\\_{k+1} + Fib\\_{k-2} &gt; Fib\\_{k+1}, x&#39; + py&#39; \\ge x&#39; + y&#39; &gt; Fib\\_{k+2})$$ \n</code></pre><p>则$(x, y)$ 不再满足上述最优性质2, 矛盾.</p>\n<p>同时每次向下一步进行构造的时候只有 $ (Fib_k, Fib_{k+1}) $ 可能取到 $ p = 2 $ 所以这样的数对个数是$ O(k) $ 的.<br>所以我们预处理所有的这样的数对, 然后用除法算下答案就好了.<br>复杂度 $ O(log^2{MAX} + QlogMAX) $.</p>\n<h3 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h3><p>ARC 的题目主要来源是打过的几场比赛, 暂时不多.</p>\n<h4 id=\"ARC074-E-RGB-Sequence\"><a href=\"#ARC074-E-RGB-Sequence\" class=\"headerlink\" title=\"ARC074 E RGB Sequence\"></a>ARC074 E RGB Sequence</h4><blockquote>\n<p>给你一个长度为$N$的序列和$M$组约束条件, 每组条件形如 $L_i, R_i, X_i$, 表示序列上的$[L_i, R_i]$中恰好有$X_i$种颜色, 现在要你用三种颜色给这个序列染色, 求满足所有约束的方案数.<br>$ 1 \\le X_i \\le 3 $<br>$ 1 \\le N, M \\le 300 $<br>$ 1 \\le L_i \\le R_i \\le N $</p>\n</blockquote>\n<p>$dp$的思路应该比较显然, 然而普通的状态表示不太好处理.<br>我们记$dp_{r, g, b}$ 表示三种颜色的球最后一次出现的位置分别是$r, g, b$ 时的方案数. </p>\n<p>然后考虑状态的合法性, 可以把条件存在$R_i$的位置. 当选择一个状态时, 考虑这个状态的最末位的所有约束即可. </p>\n<h4 id=\"ARC077-F-SS\"><a href=\"#ARC077-F-SS\" class=\"headerlink\" title=\"ARC077 F SS\"></a>ARC077 F SS</h4><blockquote>\n<p>定义一个字符串为<strong>偶的</strong>, 当且仅当这个字符串能够被分成两个完全相同的字符串.<br>定义函数$f(s)$, 其中$s, f(s)$ 均是字符串, $f(s)$为在字符串$s$ 后添加非空的字符满足新串为偶且长度最小的串.<br>现在给你串$s$ (初始为偶的), 求$f^{10^{100}}(s)[L, R]$ 中各个字母的出现次数.<br>$ 1 \\le |S| \\le 2\\times 10^5 $<br>$ 1 \\le L \\le R \\le 10^{18} $</p>\n</blockquote>\n<p>首先对于一个给定的$s$, 其$f(s)$ 必定唯一.<br>考虑每次最少加一个字符, $f^{10^{100}}(s)$ 就等价于一个长度无穷的字符串.<br>这个答案的形式显然可以前缀和, 又因为$s$ 在变化过程中始终是偶的, 实际上我们只需要关注左半部分的字符.</p>\n<p>我们从最简单的一次操作来考虑.<br>记初始的字符串$s$ 为$SS$, 记一次变化之后左边的部分为$ST$, 那么得到的新串就是$STST$.<br>要使得加的字符长度最小, 就要在$S$中找到最长前后缀匹配长度, 这时$T$就是$S$去掉最长匹配后缀所得.</p>\n<p>我们发现, 每次操作都等价于找到前后缀匹配最大长度(当然要小于$|S|$), 然后将剩下部分的前缀$T$添加到$S$的末尾.</p>\n<ul>\n<li>当$|T| \\mid |S|$ 时, $|S|$ 有长为$|T|$的最小周期, 每次加入的$|T|$相同.</li>\n<li>当$|T| \\nmid|S|$ 时, 我们<del>通过打表</del>发现, 这样的$T$是在有规律地变化的, 因为每次加入$T$之后的串前后缀最长匹配一定是$|T|$, 否则的话, 上一步中最长匹配的性质就不一定会满足.</li>\n</ul>\n<p>然后我们得到了一个$Fibonacci$数列? 直接暴力算就好了…<br>实际上第一种情况也可以直接算, 因为整个序列都是$T$的若干次重复得到的.</p>\n","site":{"data":{}},"excerpt":"<p>其实是总结一下比赛中遇到的好题, 然后瞎做了几场 AGC 的题目练习, 感觉还比较有意思. </p>","more":"<h3 id=\"AGC\"><a href=\"#AGC\" class=\"headerlink\" title=\"AGC\"></a>AGC</h3><h4 id=\"AGC002-F-Leftmost-Ball\"><a href=\"#AGC002-F-Leftmost-Ball\" class=\"headerlink\" title=\"AGC002 F Leftmost Ball\"></a>AGC002 F Leftmost Ball</h4><blockquote>\n<p>给你$N$种不同颜色的球, 每种有$K$个, 现在你可以将球任意排列, 但最终的序列中每种颜色的第一个出现位置要被染成$0$颜色, 求能够得到的本质不同的序列数, 对$10^9 + 7$取模.<br>$ N, K \\leq 2000 $</p>\n</blockquote>\n<p>这题正着处理没有什么思路, 但是如果从右往左来会比较好考虑.<br>我们可以记$f(i, j)$ 表示当前从右往左填剩下 $i$ 个 $0$ 颜色的球, 还剩下$j$ 种颜色没有放的方案数.<br>那么每一次的决策就包括放入一个$0$ 颜色的球以及添加一种颜色的 $k-1$个球:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\n    f(i-1, j) & \\leftarrow f(i, j) \\mid [i > j] \\\\\n    f(i, j-1) & \\leftarrow f(i, j) \\times {n-i + (n-j) \\times (k-1) + k-2 \\choose k-2}\n\\end{align}</script><blockquote>\n<p>后面那个公式是可重集, 还有最后的答案要乘以$n!$.</p>\n</blockquote>\n<h4 id=\"AGC005-D-K-Perm-Counting\"><a href=\"#AGC005-D-K-Perm-Counting\" class=\"headerlink\" title=\"AGC005 D ~K Perm Counting\"></a>AGC005 D ~K Perm Counting</h4><blockquote>\n<p>求长度为$N$ 的排列中, 满足对任意的$i$, 都有$|a_i - i| \\neq K$的排列数量.<br>$ 1 \\leq K &lt; N \\leq 2000 $</p>\n</blockquote>\n<p>考虑容斥, 计算至少有$i$ 个位置不合法的方案数.<br>由于$K$ 是确定的, 那么所有不合法的方案可以看成是完全二分图匹配中出现了一条$(i, i+k)$的边或者一条$(i, i-k)$的边.</p>\n<p>将这样的边在画出来就是若干条交叉路径.<br>观察到这样的交叉路径不相交, 所以可以拆开拼成一个序列, 然后在序列上$dp$即可.</p>\n<h4 id=\"AGC015-D-A-or…or-B-Problem\"><a href=\"#AGC015-D-A-or…or-B-Problem\" class=\"headerlink\" title=\"AGC015 D A or…or B Problem\"></a>AGC015 D A or…or B Problem</h4><blockquote>\n<p>求在$[A, B]$中任意选出一个非空整数集合的元素位或和有多少种不同的答案.<br>$ 1 \\le A \\le B \\le 2^{60} $</p>\n</blockquote>\n<p>先考虑一些比较特殊的情况(以下默认$A, B$的位数相同):</p>\n<ul>\n<li>当$B$可以表示为$2^k - 1$时, 这个位或和恰好取遍$[A, B]$之间的所有整数.</li>\n<li>当$A$可以表示为$2^k$时, 这个位或和在区间$[A, A + 2^{t+1}) \\mid t &lt; log_2 A$中, 其中$t$是最大的满足$B$的第$t$位为$1$的数.</li>\n</ul>\n<p>那么一般情况下这些条件有什么用呢?</p>\n<p>我们考虑找到最大的一个$T$,使得$B$ 的第$T$ 位为$1$ 且$A$ 的第$T$ 位不为$1$, 记 $K = 2 ^ T$.<br>当选择的数的集合在 $[A, K)$ 以及在 $[K, B]$ 中的情况可以直接用上述结论.</p>\n<p>接下来考虑同时选取两个集合中的数可能会产生的答案.<br>因为这时小于$K$ 的部分是没有贡献的, 所以直接将$[A, K)$ 中的所有答案取出. 不难发现$[K, B]$ 中取任意个都与只使用$K$ 没有区别, 那么这时候的范围是$[K+A, 2\\times K-1]$, 注意减去重复贡献.</p>\n<h4 id=\"AGC015-F-Kenus-the-Ancient-Greek\"><a href=\"#AGC015-F-Kenus-the-Ancient-Greek\" class=\"headerlink\" title=\"AGC015 F Kenus the Ancient Greek\"></a>AGC015 F Kenus the Ancient Greek</h4><blockquote>\n<p>Q组询问, 每组询问的形式为A, B, 表示求$ x \\in [1, A], y \\in [1, B] $的 $g(x, y)$ 的最大值, 及最大值的方案数, 其中: </p>\n<script type=\"math/tex; mode=display\">\ng(x, y) = \n\\begin{cases} \n    1, & \\text{y = 0} \\\\\n    g(y, x), & \\text{x > y} \\\\\n    g(y \\; mod \\; x, x) + 1, & \\text{otherwise} \\\\\n\\end{cases}</script><p>$ 1 \\le Q \\le 3 \\times 10 ^ 5 \\,\\,, 1 \\le A, B \\le 10 ^ {18} $</p>\n</blockquote>\n<p><strong>以下无特殊说明, 均默认所有 $x &lt; y, A &lt; B $</strong></p>\n<p>先考虑第一问, 如果我们由一个特定的 $(x, y)$ , 从小到大地构造使得 $g(x, y)$ 的值不断地变大, 那么如何构造使得这个值最大呢?</p>\n<p>对于所有 $(x’, y’)$ 满足 $g(x’, y’) = g(x, y) + 1$, 显然有:</p>\n<script type=\"math/tex; mode=display\">\n(x', y') \\in \\{ (y, x + ky) \\mid k \\in Z^+ \\}</script><p>同时, 为了使得这个过程尽可能的多次进行,我们从 $(0, 1)$ 出发, 每次取 $ k = 1 $.<br>发现这样生成了一组$Fibonacci$数列, 这里$Fibonacci$数列从0开始标号. </p>\n<p>那么第一问的答案就是求满足 $ Fib_k \\le A,\\; Fib_{k+1} \\le B $ 的最大的$k$.<br>同时, 这样的数对是满足 $g(x, y) = k$ 的最小的数对.</p>\n<p>接下来考虑统计方案数.<br>首先, 对于一组询问我们只需考虑其中<strong>与最优解相关</strong>的 $(x, y)$.</p>\n<p>考虑所有最优的 $(x, y)$ 会具有的性质:</p>\n<ul>\n<li>$x \\ge Fib_k, \\; y \\ge Fib_{k+1} $</li>\n<li>不存在一组 $(x’ &lt; x, y’ &lt; y)$, 使得 $g(x’, y’) &gt; g(x, y)$</li>\n</ul>\n<p>然而这样的 $(x, y)$ 并不一定是最优的.</p>\n<p>我们接着分析所有在最优解的 $g$ 的计算路径上的数对$(x, y)$ 的性质:<br>不难发现, 经过一次变化后得到的 $(x’, y’)$, 一定满足:</p>\n<ul>\n<li>$ g(x’, y’) = k-1 $</li>\n<li>$ x’ \\ge Fib_{k-1}, y’ \\ge Fib_{k} $</li>\n<li>$ y’ \\le Fib_{k+1} + Fib_{k-2} $</li>\n</ul>\n<p>后面条件的解释:<br>若 $ y’ &gt; Fib_{k+1} + Fib_{k-2}$, 则 </p>\n<pre><code>$$ (x, y) = (y&#39; &gt; Fib\\_{k+1} + Fib\\_{k-2} &gt; Fib\\_{k+1}, x&#39; + py&#39; \\ge x&#39; + y&#39; &gt; Fib\\_{k+2})$$ \n</code></pre><p>则$(x, y)$ 不再满足上述最优性质2, 矛盾.</p>\n<p>同时每次向下一步进行构造的时候只有 $ (Fib_k, Fib_{k+1}) $ 可能取到 $ p = 2 $ 所以这样的数对个数是$ O(k) $ 的.<br>所以我们预处理所有的这样的数对, 然后用除法算下答案就好了.<br>复杂度 $ O(log^2{MAX} + QlogMAX) $.</p>\n<h3 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h3><p>ARC 的题目主要来源是打过的几场比赛, 暂时不多.</p>\n<h4 id=\"ARC074-E-RGB-Sequence\"><a href=\"#ARC074-E-RGB-Sequence\" class=\"headerlink\" title=\"ARC074 E RGB Sequence\"></a>ARC074 E RGB Sequence</h4><blockquote>\n<p>给你一个长度为$N$的序列和$M$组约束条件, 每组条件形如 $L_i, R_i, X_i$, 表示序列上的$[L_i, R_i]$中恰好有$X_i$种颜色, 现在要你用三种颜色给这个序列染色, 求满足所有约束的方案数.<br>$ 1 \\le X_i \\le 3 $<br>$ 1 \\le N, M \\le 300 $<br>$ 1 \\le L_i \\le R_i \\le N $</p>\n</blockquote>\n<p>$dp$的思路应该比较显然, 然而普通的状态表示不太好处理.<br>我们记$dp_{r, g, b}$ 表示三种颜色的球最后一次出现的位置分别是$r, g, b$ 时的方案数. </p>\n<p>然后考虑状态的合法性, 可以把条件存在$R_i$的位置. 当选择一个状态时, 考虑这个状态的最末位的所有约束即可. </p>\n<h4 id=\"ARC077-F-SS\"><a href=\"#ARC077-F-SS\" class=\"headerlink\" title=\"ARC077 F SS\"></a>ARC077 F SS</h4><blockquote>\n<p>定义一个字符串为<strong>偶的</strong>, 当且仅当这个字符串能够被分成两个完全相同的字符串.<br>定义函数$f(s)$, 其中$s, f(s)$ 均是字符串, $f(s)$为在字符串$s$ 后添加非空的字符满足新串为偶且长度最小的串.<br>现在给你串$s$ (初始为偶的), 求$f^{10^{100}}(s)[L, R]$ 中各个字母的出现次数.<br>$ 1 \\le |S| \\le 2\\times 10^5 $<br>$ 1 \\le L \\le R \\le 10^{18} $</p>\n</blockquote>\n<p>首先对于一个给定的$s$, 其$f(s)$ 必定唯一.<br>考虑每次最少加一个字符, $f^{10^{100}}(s)$ 就等价于一个长度无穷的字符串.<br>这个答案的形式显然可以前缀和, 又因为$s$ 在变化过程中始终是偶的, 实际上我们只需要关注左半部分的字符.</p>\n<p>我们从最简单的一次操作来考虑.<br>记初始的字符串$s$ 为$SS$, 记一次变化之后左边的部分为$ST$, 那么得到的新串就是$STST$.<br>要使得加的字符长度最小, 就要在$S$中找到最长前后缀匹配长度, 这时$T$就是$S$去掉最长匹配后缀所得.</p>\n<p>我们发现, 每次操作都等价于找到前后缀匹配最大长度(当然要小于$|S|$), 然后将剩下部分的前缀$T$添加到$S$的末尾.</p>\n<ul>\n<li>当$|T| \\mid |S|$ 时, $|S|$ 有长为$|T|$的最小周期, 每次加入的$|T|$相同.</li>\n<li>当$|T| \\nmid|S|$ 时, 我们<del>通过打表</del>发现, 这样的$T$是在有规律地变化的, 因为每次加入$T$之后的串前后缀最长匹配一定是$|T|$, 否则的话, 上一步中最长匹配的性质就不一定会满足.</li>\n</ul>\n<p>然后我们得到了一个$Fibonacci$数列? 直接暴力算就好了…<br>实际上第一种情况也可以直接算, 因为整个序列都是$T$的若干次重复得到的.</p>"},{"title":"ZJOI2017 树状数组","date":"2017-06-12T12:04:19.000Z","_content":"\n### Description\n> 给你一个长度为 $N$ 的序列以及 $M$ 次操作, 每次等概率地修改 $[L_i, R_i]$ 区间中一个值的奇偶性, 或者对于询问$[L_i,R_i]$区间中的和的奇偶性, 判断给定的一种错误算法输出正确答案的概率是多少\n$ N, M <= 10^5 $\n<!--more-->\n\n### Solution\n\n考虑这个错误算法, 由于可以把 $ + lowbit $ 和 $ - lowbit $ 都看成在一棵树上向父亲节点跳, 根据这个性质可以知道错误算法求了一个后缀和, 所以当且仅当对于询问区间 $[L_i, R_i]$, 满足 $ a[L_i-1] = a[R_i] $ 时它会输出正确答案\n\n那么我们得到了一个 $ O(nm) $ 的暴力算法, 即每一个询问都暴力扫之前的所有修改计算概率即可.\n\n然而这样还不能通过所有数据, 考虑将区间 $[L_i, R_i]$ 表示成二维平面上的一个点 $ (L_i, R_i)$.\n\n然后用一个二维线段树去维护每个点代表的两个端点的值不相等的概率.显然地, 这个概率是可以很方便的合并的.\n这样对于每次修改$[L_i, R_i]$的操作, 相当于:\n- 将 $ x \\in [L_i, R_i], y \\in [L_i, R_i] $ 中的点 $(x, y)$ 与 $ \\frac{2}{R_i - L_i+1} $ 合并.\n- 将 $ x \\in [L_i, R_i], y \\in (R_i, N] $ 以及 $ x \\in [0, L_i), y \\in [L_i, R_i] $ 与 $ \\frac{1}{R_i - L_i+1} $ 合并.\n\n### Hint\n注意到对于 $ L_i = 1 $ 的情况, $ Find(0) $ 直接返回了 $0$ 而非 $0$ 的后缀和\n这个时候就要特判一下了, 注意到每次不管如何修改, 最终的正确答案是 $R_i$ 的前缀和, 而题中所给的方法输出的答案是 $R_i$ 的后缀和.\n\n- 当前修改次数为偶数,  则当且仅当 $R_i = 0$ 前后缀和相同, 相当于查询 $a[R_i] = 0$ 的概率.\n- 当前修改次数为奇数,  则当且仅当 $R_i = 1$ 前后缀和相同, 相当于查询 $a[R_i] = 1$ 的概率.\n\n因为 $a[0]$ 不可能被修改, 所以上述问题也可以转化为查询 $[L_i, R_i]$ 相等概率.\n\n### Code \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\n#define fst first\n#define snd second\n#define pb push_back\n#define getchar getchar_unlocked\n\ntemplate <typename T> inline bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> inline bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 1e5 + 5;\nconst int mod = 998244353;\n\nint read() {\n    int n = 0, f = 1;\n    char ch = getchar();\n    for( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\ninline int merge(int a, int b) {\n    return (a * (1LL - b + mod) % mod + b * (1LL - a + mod) % mod) % mod;\n}\nint N, M, prob;\nnamespace Seg_Tree {\n    const int SZ_X = (maxn << 2) + 5;\n    const int SZ_Y = (maxn * 400) + 5;\n\n    int rt[SZ_X];\n    int val[SZ_Y];\n    int lc[SZ_Y], rc[SZ_Y], cnt;\n\n#define LC (u << 1) \n#define RC (LC | 1)\n#define mid ((l+r) >> 1)\n\n    void Add_Y(int& u, int l, int r, int x, int y) {\n        if(!u) u = ++cnt;\n        if(x <= l && r <= y) {\n            val[u] = merge(val[u], prob);\n            return;\n        }\n        if(x <= mid) Add_Y(lc[u], l, mid, x, y);\n        if(y > mid) Add_Y(rc[u], mid+1, r, x, y);\n    }\n    void Add_X(int u, int l, int r, int x, int y, int x0, int y0) {\n        if(x <= l && r <= y) {\n            Add_Y(rt[u], 0, N, x0, y0);\n            return;\n        }\n        if(x <= mid) Add_X(LC, l, mid, x, y, x0, y0);\n        if(y > mid) Add_X(RC, mid+1, r, x, y, x0, y0);\n    }\n    int query_Y(int u, int l, int r, int x) {\n        if(l == r) return val[u];\n        return merge(val[u], \n                x <= mid ? query_Y(lc[u], l, mid, x) : query_Y(rc[u], mid+1, r, x));\n    }\n    int query_X(int u, int l, int r, int x, int x0) {\n        if(l == r) return query_Y(rt[u], 0, N, x0);\n\n        return merge(query_Y(rt[u], 0, N, x0), \n                x <= mid ? query_X(LC, l, mid, x, x0) : query_X(RC, mid+1, r, x, x0));\n    }\n}\n\nint fpm(int base, int exp) {\n    int res = 1;\n    for(; exp > 0; exp >>= 1) {\n        if(exp & 1) \n            res = 1LL * res * base % mod;\n        base = 1LL * base * base % mod;\n    }\n    return res;\n}\n\nint tot = 0;\nvoid solve() {\n    N = read(); M = read();\n    while(M--) {\n        static int ty, l, r;\n        ty = read(); l = read(); r = read();\n        if(ty == 1) {\n            static LL tmp; \n            tmp = fpm(r-l+1, mod-2);\n            prob = 2*tmp; Seg_Tree::Add_X(1, 0, N, l, r, l, r); \n            prob = tmp; Seg_Tree::Add_X(1, 0, N, l, r, r+1, N);\n            prob = tmp; Seg_Tree::Add_X(1, 0, N, 0, l-1, l, r);\n            ++ tot;\n        }else {\n            static int ans;\n            ans = (1-Seg_Tree::query_X(1, 0, N, l-1, r)+mod) % mod;\n            if(!(l-1) && (tot & 1))\n                ans = (1-ans+mod) % mod;\n            printf(\"%d\\n\", ans);\n        }\n    }\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    solve();\n    return 0;\n}\n```\n","source":"_posts/zjoi2017-bit.md","raw":"---\ntitle: ZJOI2017 树状数组\ndate: 2017-06-12 20:04:19\ntags: \n    - Datastructure\n---\n\n### Description\n> 给你一个长度为 $N$ 的序列以及 $M$ 次操作, 每次等概率地修改 $[L_i, R_i]$ 区间中一个值的奇偶性, 或者对于询问$[L_i,R_i]$区间中的和的奇偶性, 判断给定的一种错误算法输出正确答案的概率是多少\n$ N, M <= 10^5 $\n<!--more-->\n\n### Solution\n\n考虑这个错误算法, 由于可以把 $ + lowbit $ 和 $ - lowbit $ 都看成在一棵树上向父亲节点跳, 根据这个性质可以知道错误算法求了一个后缀和, 所以当且仅当对于询问区间 $[L_i, R_i]$, 满足 $ a[L_i-1] = a[R_i] $ 时它会输出正确答案\n\n那么我们得到了一个 $ O(nm) $ 的暴力算法, 即每一个询问都暴力扫之前的所有修改计算概率即可.\n\n然而这样还不能通过所有数据, 考虑将区间 $[L_i, R_i]$ 表示成二维平面上的一个点 $ (L_i, R_i)$.\n\n然后用一个二维线段树去维护每个点代表的两个端点的值不相等的概率.显然地, 这个概率是可以很方便的合并的.\n这样对于每次修改$[L_i, R_i]$的操作, 相当于:\n- 将 $ x \\in [L_i, R_i], y \\in [L_i, R_i] $ 中的点 $(x, y)$ 与 $ \\frac{2}{R_i - L_i+1} $ 合并.\n- 将 $ x \\in [L_i, R_i], y \\in (R_i, N] $ 以及 $ x \\in [0, L_i), y \\in [L_i, R_i] $ 与 $ \\frac{1}{R_i - L_i+1} $ 合并.\n\n### Hint\n注意到对于 $ L_i = 1 $ 的情况, $ Find(0) $ 直接返回了 $0$ 而非 $0$ 的后缀和\n这个时候就要特判一下了, 注意到每次不管如何修改, 最终的正确答案是 $R_i$ 的前缀和, 而题中所给的方法输出的答案是 $R_i$ 的后缀和.\n\n- 当前修改次数为偶数,  则当且仅当 $R_i = 0$ 前后缀和相同, 相当于查询 $a[R_i] = 0$ 的概率.\n- 当前修改次数为奇数,  则当且仅当 $R_i = 1$ 前后缀和相同, 相当于查询 $a[R_i] = 1$ 的概率.\n\n因为 $a[0]$ 不可能被修改, 所以上述问题也可以转化为查询 $[L_i, R_i]$ 相等概率.\n\n### Code \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\n#define fst first\n#define snd second\n#define pb push_back\n#define getchar getchar_unlocked\n\ntemplate <typename T> inline bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> inline bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\nconst int oo = 0x3f3f3f3f;\nconst int maxn = 1e5 + 5;\nconst int mod = 998244353;\n\nint read() {\n    int n = 0, f = 1;\n    char ch = getchar();\n    for( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n    for( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n    return n * f;\n}\n\ninline int merge(int a, int b) {\n    return (a * (1LL - b + mod) % mod + b * (1LL - a + mod) % mod) % mod;\n}\nint N, M, prob;\nnamespace Seg_Tree {\n    const int SZ_X = (maxn << 2) + 5;\n    const int SZ_Y = (maxn * 400) + 5;\n\n    int rt[SZ_X];\n    int val[SZ_Y];\n    int lc[SZ_Y], rc[SZ_Y], cnt;\n\n#define LC (u << 1) \n#define RC (LC | 1)\n#define mid ((l+r) >> 1)\n\n    void Add_Y(int& u, int l, int r, int x, int y) {\n        if(!u) u = ++cnt;\n        if(x <= l && r <= y) {\n            val[u] = merge(val[u], prob);\n            return;\n        }\n        if(x <= mid) Add_Y(lc[u], l, mid, x, y);\n        if(y > mid) Add_Y(rc[u], mid+1, r, x, y);\n    }\n    void Add_X(int u, int l, int r, int x, int y, int x0, int y0) {\n        if(x <= l && r <= y) {\n            Add_Y(rt[u], 0, N, x0, y0);\n            return;\n        }\n        if(x <= mid) Add_X(LC, l, mid, x, y, x0, y0);\n        if(y > mid) Add_X(RC, mid+1, r, x, y, x0, y0);\n    }\n    int query_Y(int u, int l, int r, int x) {\n        if(l == r) return val[u];\n        return merge(val[u], \n                x <= mid ? query_Y(lc[u], l, mid, x) : query_Y(rc[u], mid+1, r, x));\n    }\n    int query_X(int u, int l, int r, int x, int x0) {\n        if(l == r) return query_Y(rt[u], 0, N, x0);\n\n        return merge(query_Y(rt[u], 0, N, x0), \n                x <= mid ? query_X(LC, l, mid, x, x0) : query_X(RC, mid+1, r, x, x0));\n    }\n}\n\nint fpm(int base, int exp) {\n    int res = 1;\n    for(; exp > 0; exp >>= 1) {\n        if(exp & 1) \n            res = 1LL * res * base % mod;\n        base = 1LL * base * base % mod;\n    }\n    return res;\n}\n\nint tot = 0;\nvoid solve() {\n    N = read(); M = read();\n    while(M--) {\n        static int ty, l, r;\n        ty = read(); l = read(); r = read();\n        if(ty == 1) {\n            static LL tmp; \n            tmp = fpm(r-l+1, mod-2);\n            prob = 2*tmp; Seg_Tree::Add_X(1, 0, N, l, r, l, r); \n            prob = tmp; Seg_Tree::Add_X(1, 0, N, l, r, r+1, N);\n            prob = tmp; Seg_Tree::Add_X(1, 0, N, 0, l-1, l, r);\n            ++ tot;\n        }else {\n            static int ans;\n            ans = (1-Seg_Tree::query_X(1, 0, N, l-1, r)+mod) % mod;\n            if(!(l-1) && (tot & 1))\n                ans = (1-ans+mod) % mod;\n            printf(\"%d\\n\", ans);\n        }\n    }\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\", \"r\", stdin);\n    freopen(\"ans.txt\", \"w\", stdout);\n#endif\n\n    solve();\n    return 0;\n}\n```\n","slug":"zjoi2017-bit","published":1,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cnl0017onis35v14o5e","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>给你一个长度为 $N$ 的序列以及 $M$ 次操作, 每次等概率地修改 $[L_i, R_i]$ 区间中一个值的奇偶性, 或者对于询问$[L_i,R_i]$区间中的和的奇偶性, 判断给定的一种错误算法输出正确答案的概率是多少<br>$ N, M &lt;= 10^5 $<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>考虑这个错误算法, 由于可以把 $ + lowbit $ 和 $ - lowbit $ 都看成在一棵树上向父亲节点跳, 根据这个性质可以知道错误算法求了一个后缀和, 所以当且仅当对于询问区间 $[L_i, R_i]$, 满足 $ a[L_i-1] = a[R_i] $ 时它会输出正确答案</p>\n<p>那么我们得到了一个 $ O(nm) $ 的暴力算法, 即每一个询问都暴力扫之前的所有修改计算概率即可.</p>\n<p>然而这样还不能通过所有数据, 考虑将区间 $[L_i, R_i]$ 表示成二维平面上的一个点 $ (L_i, R_i)$.</p>\n<p>然后用一个二维线段树去维护每个点代表的两个端点的值不相等的概率.显然地, 这个概率是可以很方便的合并的.<br>这样对于每次修改$[L_i, R_i]$的操作, 相当于:</p>\n<ul>\n<li>将 $ x \\in [L_i, R_i], y \\in [L_i, R_i] $ 中的点 $(x, y)$ 与 $ \\frac{2}{R_i - L_i+1} $ 合并.</li>\n<li>将 $ x \\in [L_i, R_i], y \\in (R_i, N] $ 以及 $ x \\in [0, L_i), y \\in [L_i, R_i] $ 与 $ \\frac{1}{R_i - L_i+1} $ 合并.</li>\n</ul>\n<h3 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h3><p>注意到对于 $ L_i = 1 $ 的情况, $ Find(0) $ 直接返回了 $0$ 而非 $0$ 的后缀和<br>这个时候就要特判一下了, 注意到每次不管如何修改, 最终的正确答案是 $R_i$ 的前缀和, 而题中所给的方法输出的答案是 $R_i$ 的后缀和.</p>\n<ul>\n<li>当前修改次数为偶数,  则当且仅当 $R_i = 0$ 前后缀和相同, 相当于查询 $a[R_i] = 0$ 的概率.</li>\n<li>当前修改次数为奇数,  则当且仅当 $R_i = 1$ 前后缀和相同, 相当于查询 $a[R_i] = 1$ 的概率.</li>\n</ul>\n<p>因为 $a[0]$ 不可能被修改, 所以上述问题也可以转化为查询 $[L_i, R_i]$ 相等概率.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> getchar getchar_unlocked</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">998244353</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a * (<span class=\"number\">1L</span>L - b + mod) % mod + b * (<span class=\"number\">1L</span>L - a + mod) % mod) % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> N, M, prob;</div><div class=\"line\"><span class=\"keyword\">namespace</span> Seg_Tree &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SZ_X = (maxn &lt;&lt; <span class=\"number\">2</span>) + <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SZ_Y = (maxn * <span class=\"number\">400</span>) + <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> rt[SZ_X];</div><div class=\"line\">    <span class=\"keyword\">int</span> val[SZ_Y];</div><div class=\"line\">    <span class=\"keyword\">int</span> lc[SZ_Y], rc[SZ_Y], cnt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC (u &lt;&lt; 1) </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RC (LC | 1)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r) &gt;&gt; 1)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_Y</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!u) u = ++cnt;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= l &amp;&amp; r &lt;= y) &#123;</div><div class=\"line\">            val[u] = merge(val[u], prob);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) Add_Y(lc[u], l, mid, x, y);</div><div class=\"line\">        <span class=\"keyword\">if</span>(y &gt; mid) Add_Y(rc[u], mid+<span class=\"number\">1</span>, r, x, y);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_X</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> x0, <span class=\"keyword\">int</span> y0)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= l &amp;&amp; r &lt;= y) &#123;</div><div class=\"line\">            Add_Y(rt[u], <span class=\"number\">0</span>, N, x0, y0);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) Add_X(LC, l, mid, x, y, x0, y0);</div><div class=\"line\">        <span class=\"keyword\">if</span>(y &gt; mid) Add_X(RC, mid+<span class=\"number\">1</span>, r, x, y, x0, y0);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query_Y</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> val[u];</div><div class=\"line\">        <span class=\"keyword\">return</span> merge(val[u], </div><div class=\"line\">                x &lt;= mid ? query_Y(lc[u], l, mid, x) : query_Y(rc[u], mid+<span class=\"number\">1</span>, r, x));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query_X</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> x0)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> query_Y(rt[u], <span class=\"number\">0</span>, N, x0);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> merge(query_Y(rt[u], <span class=\"number\">0</span>, N, x0), </div><div class=\"line\">                x &lt;= mid ? query_X(LC, l, mid, x, x0) : query_X(RC, mid+<span class=\"number\">1</span>, r, x, x0));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fpm</span><span class=\"params\">(<span class=\"keyword\">int</span> base, <span class=\"keyword\">int</span> <span class=\"built_in\">exp</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">exp</span> &gt; <span class=\"number\">0</span>; <span class=\"built_in\">exp</span> &gt;&gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &amp; <span class=\"number\">1</span>) </div><div class=\"line\">            res = <span class=\"number\">1L</span>L * res * base % mod;</div><div class=\"line\">        base = <span class=\"number\">1L</span>L * base * base % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    N = read(); M = read();</div><div class=\"line\">    <span class=\"keyword\">while</span>(M--) &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ty, l, r;</div><div class=\"line\">        ty = read(); l = read(); r = read();</div><div class=\"line\">        <span class=\"keyword\">if</span>(ty == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">static</span> LL tmp; </div><div class=\"line\">            tmp = fpm(r-l+<span class=\"number\">1</span>, mod<span class=\"number\">-2</span>);</div><div class=\"line\">            prob = <span class=\"number\">2</span>*tmp; Seg_Tree::Add_X(<span class=\"number\">1</span>, <span class=\"number\">0</span>, N, l, r, l, r); </div><div class=\"line\">            prob = tmp; Seg_Tree::Add_X(<span class=\"number\">1</span>, <span class=\"number\">0</span>, N, l, r, r+<span class=\"number\">1</span>, N);</div><div class=\"line\">            prob = tmp; Seg_Tree::Add_X(<span class=\"number\">1</span>, <span class=\"number\">0</span>, N, <span class=\"number\">0</span>, l<span class=\"number\">-1</span>, l, r);</div><div class=\"line\">            ++ tot;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans;</div><div class=\"line\">            ans = (<span class=\"number\">1</span>-Seg_Tree::query_X(<span class=\"number\">1</span>, <span class=\"number\">0</span>, N, l<span class=\"number\">-1</span>, r)+mod) % mod;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!(l<span class=\"number\">-1</span>) &amp;&amp; (tot &amp; <span class=\"number\">1</span>))</div><div class=\"line\">                ans = (<span class=\"number\">1</span>-ans+mod) % mod;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    solve();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>给你一个长度为 $N$ 的序列以及 $M$ 次操作, 每次等概率地修改 $[L_i, R_i]$ 区间中一个值的奇偶性, 或者对于询问$[L_i,R_i]$区间中的和的奇偶性, 判断给定的一种错误算法输出正确答案的概率是多少<br>$ N, M &lt;= 10^5 $<br>","more":"</p>\n</blockquote>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>考虑这个错误算法, 由于可以把 $ + lowbit $ 和 $ - lowbit $ 都看成在一棵树上向父亲节点跳, 根据这个性质可以知道错误算法求了一个后缀和, 所以当且仅当对于询问区间 $[L_i, R_i]$, 满足 $ a[L_i-1] = a[R_i] $ 时它会输出正确答案</p>\n<p>那么我们得到了一个 $ O(nm) $ 的暴力算法, 即每一个询问都暴力扫之前的所有修改计算概率即可.</p>\n<p>然而这样还不能通过所有数据, 考虑将区间 $[L_i, R_i]$ 表示成二维平面上的一个点 $ (L_i, R_i)$.</p>\n<p>然后用一个二维线段树去维护每个点代表的两个端点的值不相等的概率.显然地, 这个概率是可以很方便的合并的.<br>这样对于每次修改$[L_i, R_i]$的操作, 相当于:</p>\n<ul>\n<li>将 $ x \\in [L_i, R_i], y \\in [L_i, R_i] $ 中的点 $(x, y)$ 与 $ \\frac{2}{R_i - L_i+1} $ 合并.</li>\n<li>将 $ x \\in [L_i, R_i], y \\in (R_i, N] $ 以及 $ x \\in [0, L_i), y \\in [L_i, R_i] $ 与 $ \\frac{1}{R_i - L_i+1} $ 合并.</li>\n</ul>\n<h3 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h3><p>注意到对于 $ L_i = 1 $ 的情况, $ Find(0) $ 直接返回了 $0$ 而非 $0$ 的后缀和<br>这个时候就要特判一下了, 注意到每次不管如何修改, 最终的正确答案是 $R_i$ 的前缀和, 而题中所给的方法输出的答案是 $R_i$ 的后缀和.</p>\n<ul>\n<li>当前修改次数为偶数,  则当且仅当 $R_i = 0$ 前后缀和相同, 相当于查询 $a[R_i] = 0$ 的概率.</li>\n<li>当前修改次数为奇数,  则当且仅当 $R_i = 1$ 前后缀和相同, 相当于查询 $a[R_i] = 1$ 的概率.</li>\n</ul>\n<p>因为 $a[0]$ 不可能被修改, 所以上述问题也可以转化为查询 $[L_i, R_i]$ 相等概率.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> getchar getchar_unlocked</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">998244353</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">    <span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (a * (<span class=\"number\">1L</span>L - b + mod) % mod + b * (<span class=\"number\">1L</span>L - a + mod) % mod) % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> N, M, prob;</div><div class=\"line\"><span class=\"keyword\">namespace</span> Seg_Tree &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SZ_X = (maxn &lt;&lt; <span class=\"number\">2</span>) + <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SZ_Y = (maxn * <span class=\"number\">400</span>) + <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> rt[SZ_X];</div><div class=\"line\">    <span class=\"keyword\">int</span> val[SZ_Y];</div><div class=\"line\">    <span class=\"keyword\">int</span> lc[SZ_Y], rc[SZ_Y], cnt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC (u &lt;&lt; 1) </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RC (LC | 1)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r) &gt;&gt; 1)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_Y</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!u) u = ++cnt;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= l &amp;&amp; r &lt;= y) &#123;</div><div class=\"line\">            val[u] = merge(val[u], prob);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) Add_Y(lc[u], l, mid, x, y);</div><div class=\"line\">        <span class=\"keyword\">if</span>(y &gt; mid) Add_Y(rc[u], mid+<span class=\"number\">1</span>, r, x, y);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_X</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> x0, <span class=\"keyword\">int</span> y0)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= l &amp;&amp; r &lt;= y) &#123;</div><div class=\"line\">            Add_Y(rt[u], <span class=\"number\">0</span>, N, x0, y0);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= mid) Add_X(LC, l, mid, x, y, x0, y0);</div><div class=\"line\">        <span class=\"keyword\">if</span>(y &gt; mid) Add_X(RC, mid+<span class=\"number\">1</span>, r, x, y, x0, y0);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query_Y</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> val[u];</div><div class=\"line\">        <span class=\"keyword\">return</span> merge(val[u], </div><div class=\"line\">                x &lt;= mid ? query_Y(lc[u], l, mid, x) : query_Y(rc[u], mid+<span class=\"number\">1</span>, r, x));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query_X</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> x0)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> query_Y(rt[u], <span class=\"number\">0</span>, N, x0);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> merge(query_Y(rt[u], <span class=\"number\">0</span>, N, x0), </div><div class=\"line\">                x &lt;= mid ? query_X(LC, l, mid, x, x0) : query_X(RC, mid+<span class=\"number\">1</span>, r, x, x0));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fpm</span><span class=\"params\">(<span class=\"keyword\">int</span> base, <span class=\"keyword\">int</span> <span class=\"built_in\">exp</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">exp</span> &gt; <span class=\"number\">0</span>; <span class=\"built_in\">exp</span> &gt;&gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &amp; <span class=\"number\">1</span>) </div><div class=\"line\">            res = <span class=\"number\">1L</span>L * res * base % mod;</div><div class=\"line\">        base = <span class=\"number\">1L</span>L * base * base % mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    N = read(); M = read();</div><div class=\"line\">    <span class=\"keyword\">while</span>(M--) &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ty, l, r;</div><div class=\"line\">        ty = read(); l = read(); r = read();</div><div class=\"line\">        <span class=\"keyword\">if</span>(ty == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">static</span> LL tmp; </div><div class=\"line\">            tmp = fpm(r-l+<span class=\"number\">1</span>, mod<span class=\"number\">-2</span>);</div><div class=\"line\">            prob = <span class=\"number\">2</span>*tmp; Seg_Tree::Add_X(<span class=\"number\">1</span>, <span class=\"number\">0</span>, N, l, r, l, r); </div><div class=\"line\">            prob = tmp; Seg_Tree::Add_X(<span class=\"number\">1</span>, <span class=\"number\">0</span>, N, l, r, r+<span class=\"number\">1</span>, N);</div><div class=\"line\">            prob = tmp; Seg_Tree::Add_X(<span class=\"number\">1</span>, <span class=\"number\">0</span>, N, <span class=\"number\">0</span>, l<span class=\"number\">-1</span>, l, r);</div><div class=\"line\">            ++ tot;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans;</div><div class=\"line\">            ans = (<span class=\"number\">1</span>-Seg_Tree::query_X(<span class=\"number\">1</span>, <span class=\"number\">0</span>, N, l<span class=\"number\">-1</span>, r)+mod) % mod;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!(l<span class=\"number\">-1</span>) &amp;&amp; (tot &amp; <span class=\"number\">1</span>))</div><div class=\"line\">                ans = (<span class=\"number\">1</span>-ans+mod) % mod;</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    solve();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"两道概率题","date":"2017-07-17T13:01:11.000Z","_content":"\n### 玛里苟斯\n\n#### Description\n> 给你一个大小为N的可重集合, 求该集合子集异或和的$K$次方的期望, 保证答案不超过$ 2 ^ {64} $.\n$ N \\le 100000, K \\le 5, A _ i \\le 10 ^ 9 $\n\n<!-- more -->\n\n#### Solution\n\n$K=1$ 时满足期望的线性性, 可以对每一个二进制位分开计算答案.\n不难发现每一个二进制位变成 $1$ 的概率恰好为 $ \\frac {1}{2} $ (集合的奇数和偶数大小的子集数相同).\n\n$K=2$ 时要求的是期望的平方, 即:\n$$ \\sum _ {i=0}^{32} \\sum _ {j=0}^{32} b _ i b _ j 2 ^ {i+j} $$\n其中 $ b _ i $表示期望二进制第 $i$ 位的值, 枚举两个二进制位再求一下两个位置同时取到 $1$ 的概率即可.\n\n$K \\ge 3$时由于答案不超过 $2^{64}$, 所以集合内的数也不会很大, 直接用线性基处理.\n\n### 主旋律\n\n#### Description\n> 求N个点, M条边的有向图有多少生成子图满足整个图是强联通的.\n$ N \\le 15, M \\le N(N-1) $\n\n#### Solution\n\n这题一眼看上去不太好做, 不妨从问题的反面来考虑.\n首先一个非强联通的图缩掉$Scc$ 之后会得到若干个 $DAG$.\n如果知道$Scc$ 的划分情况, 计算$DAG$ 的数量就变成一个经典问题了:\n\n$$ E(S, T) = {|\\{(u, v) \\in E | u \\in S, v \\in T)\\}|} $$\n\n$$ F(S) = \\sum _ {T \\subset S, T \\neq \\varnothing} (-1) ^ {|T| - 1}  \\times 2 ^ {E(T, S-T)} F(T) $$\n\n然而感觉枚举$Scc$ 划分更不可做.\n先不考虑$Scc$ 如何划分, 考虑哪一些点集构成多少个$Scc$.\n假设$G _ K(T)$表示$T$ 集合分成$K$ 个$Scc$ 的方案数, 类似上面式子地, 有:\n\n$$ F(S) = \\sum _ {T \\subset S, T \\neq \\varnothing} \\sum _ {K = 1}^{|T|} (-1) ^ {K - 1} \\times G _ K(T) \\times 2 ^ {E(T, S-T) + E(S-T, S-T)} $$\n\n$$ DP(S) = 2 ^ {E(S, S)} - F(S) $$\n\n实际上只需要求将某个集合分成奇数个$Scc$ 与偶数个$Scc$ 的方案数之差 $ P(S) $:\n\n$$ P(S) = DP(S) + \\sum _ {T \\subset S, u \\in T} - DP(T) \\times P(S - T) $$\n\n> 其中 $ u \\in T $ 避免重复计数.\n\n这样加上一些预处理的技巧可以做到 $ O(3 ^ n) $.\n","source":"_posts/probability-problems.md","raw":"---\ntitle: 两道概率题\ndate: 2017-07-17 21:01:11\ntags:\n    - Probability\n    - Dynamic Programming\n---\n\n### 玛里苟斯\n\n#### Description\n> 给你一个大小为N的可重集合, 求该集合子集异或和的$K$次方的期望, 保证答案不超过$ 2 ^ {64} $.\n$ N \\le 100000, K \\le 5, A _ i \\le 10 ^ 9 $\n\n<!-- more -->\n\n#### Solution\n\n$K=1$ 时满足期望的线性性, 可以对每一个二进制位分开计算答案.\n不难发现每一个二进制位变成 $1$ 的概率恰好为 $ \\frac {1}{2} $ (集合的奇数和偶数大小的子集数相同).\n\n$K=2$ 时要求的是期望的平方, 即:\n$$ \\sum _ {i=0}^{32} \\sum _ {j=0}^{32} b _ i b _ j 2 ^ {i+j} $$\n其中 $ b _ i $表示期望二进制第 $i$ 位的值, 枚举两个二进制位再求一下两个位置同时取到 $1$ 的概率即可.\n\n$K \\ge 3$时由于答案不超过 $2^{64}$, 所以集合内的数也不会很大, 直接用线性基处理.\n\n### 主旋律\n\n#### Description\n> 求N个点, M条边的有向图有多少生成子图满足整个图是强联通的.\n$ N \\le 15, M \\le N(N-1) $\n\n#### Solution\n\n这题一眼看上去不太好做, 不妨从问题的反面来考虑.\n首先一个非强联通的图缩掉$Scc$ 之后会得到若干个 $DAG$.\n如果知道$Scc$ 的划分情况, 计算$DAG$ 的数量就变成一个经典问题了:\n\n$$ E(S, T) = {|\\{(u, v) \\in E | u \\in S, v \\in T)\\}|} $$\n\n$$ F(S) = \\sum _ {T \\subset S, T \\neq \\varnothing} (-1) ^ {|T| - 1}  \\times 2 ^ {E(T, S-T)} F(T) $$\n\n然而感觉枚举$Scc$ 划分更不可做.\n先不考虑$Scc$ 如何划分, 考虑哪一些点集构成多少个$Scc$.\n假设$G _ K(T)$表示$T$ 集合分成$K$ 个$Scc$ 的方案数, 类似上面式子地, 有:\n\n$$ F(S) = \\sum _ {T \\subset S, T \\neq \\varnothing} \\sum _ {K = 1}^{|T|} (-1) ^ {K - 1} \\times G _ K(T) \\times 2 ^ {E(T, S-T) + E(S-T, S-T)} $$\n\n$$ DP(S) = 2 ^ {E(S, S)} - F(S) $$\n\n实际上只需要求将某个集合分成奇数个$Scc$ 与偶数个$Scc$ 的方案数之差 $ P(S) $:\n\n$$ P(S) = DP(S) + \\sum _ {T \\subset S, u \\in T} - DP(T) \\times P(S - T) $$\n\n> 其中 $ u \\in T $ 避免重复计数.\n\n这样加上一些预处理的技巧可以做到 $ O(3 ^ n) $.\n","slug":"probability-problems","published":1,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cnm001aonisyguklbe8","content":"<h3 id=\"玛里苟斯\"><a href=\"#玛里苟斯\" class=\"headerlink\" title=\"玛里苟斯\"></a>玛里苟斯</h3><h4 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h4><blockquote>\n<p>给你一个大小为N的可重集合, 求该集合子集异或和的$K$次方的期望, 保证答案不超过$ 2 ^ {64} $.<br>$ N \\le 100000, K \\le 5, A _ i \\le 10 ^ 9 $</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h4><p>$K=1$ 时满足期望的线性性, 可以对每一个二进制位分开计算答案.<br>不难发现每一个二进制位变成 $1$ 的概率恰好为 $ \\frac {1}{2} $ (集合的奇数和偶数大小的子集数相同).</p>\n<p>$K=2$ 时要求的是期望的平方, 即:</p>\n<script type=\"math/tex; mode=display\">\\sum _ {i=0}^{32} \\sum _ {j=0}^{32} b _ i b _ j 2 ^ {i+j}</script><p>其中 $ b _ i $表示期望二进制第 $i$ 位的值, 枚举两个二进制位再求一下两个位置同时取到 $1$ 的概率即可.</p>\n<p>$K \\ge 3$时由于答案不超过 $2^{64}$, 所以集合内的数也不会很大, 直接用线性基处理.</p>\n<h3 id=\"主旋律\"><a href=\"#主旋律\" class=\"headerlink\" title=\"主旋律\"></a>主旋律</h3><h4 id=\"Description-1\"><a href=\"#Description-1\" class=\"headerlink\" title=\"Description\"></a>Description</h4><blockquote>\n<p>求N个点, M条边的有向图有多少生成子图满足整个图是强联通的.<br>$ N \\le 15, M \\le N(N-1) $</p>\n</blockquote>\n<h4 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h4><p>这题一眼看上去不太好做, 不妨从问题的反面来考虑.<br>首先一个非强联通的图缩掉$Scc$ 之后会得到若干个 $DAG$.<br>如果知道$Scc$ 的划分情况, 计算$DAG$ 的数量就变成一个经典问题了:</p>\n<script type=\"math/tex; mode=display\">E(S, T) = {|\\{(u, v) \\in E | u \\in S, v \\in T)\\}|}</script><script type=\"math/tex; mode=display\">F(S) = \\sum _ {T \\subset S, T \\neq \\varnothing} (-1) ^ {|T| - 1}  \\times 2 ^ {E(T, S-T)} F(T)</script><p>然而感觉枚举$Scc$ 划分更不可做.<br>先不考虑$Scc$ 如何划分, 考虑哪一些点集构成多少个$Scc$.<br>假设$G _ K(T)$表示$T$ 集合分成$K$ 个$Scc$ 的方案数, 类似上面式子地, 有:</p>\n<script type=\"math/tex; mode=display\">F(S) = \\sum _ {T \\subset S, T \\neq \\varnothing} \\sum _ {K = 1}^{|T|} (-1) ^ {K - 1} \\times G _ K(T) \\times 2 ^ {E(T, S-T) + E(S-T, S-T)}</script><script type=\"math/tex; mode=display\">DP(S) = 2 ^ {E(S, S)} - F(S)</script><p>实际上只需要求将某个集合分成奇数个$Scc$ 与偶数个$Scc$ 的方案数之差 $ P(S) $:</p>\n<script type=\"math/tex; mode=display\">P(S) = DP(S) + \\sum _ {T \\subset S, u \\in T} - DP(T) \\times P(S - T)</script><blockquote>\n<p>其中 $ u \\in T $ 避免重复计数.</p>\n</blockquote>\n<p>这样加上一些预处理的技巧可以做到 $ O(3 ^ n) $.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"玛里苟斯\"><a href=\"#玛里苟斯\" class=\"headerlink\" title=\"玛里苟斯\"></a>玛里苟斯</h3><h4 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h4><blockquote>\n<p>给你一个大小为N的可重集合, 求该集合子集异或和的$K$次方的期望, 保证答案不超过$ 2 ^ {64} $.<br>$ N \\le 100000, K \\le 5, A _ i \\le 10 ^ 9 $</p>\n</blockquote>","more":"<h4 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h4><p>$K=1$ 时满足期望的线性性, 可以对每一个二进制位分开计算答案.<br>不难发现每一个二进制位变成 $1$ 的概率恰好为 $ \\frac {1}{2} $ (集合的奇数和偶数大小的子集数相同).</p>\n<p>$K=2$ 时要求的是期望的平方, 即:</p>\n<script type=\"math/tex; mode=display\">\\sum _ {i=0}^{32} \\sum _ {j=0}^{32} b _ i b _ j 2 ^ {i+j}</script><p>其中 $ b _ i $表示期望二进制第 $i$ 位的值, 枚举两个二进制位再求一下两个位置同时取到 $1$ 的概率即可.</p>\n<p>$K \\ge 3$时由于答案不超过 $2^{64}$, 所以集合内的数也不会很大, 直接用线性基处理.</p>\n<h3 id=\"主旋律\"><a href=\"#主旋律\" class=\"headerlink\" title=\"主旋律\"></a>主旋律</h3><h4 id=\"Description-1\"><a href=\"#Description-1\" class=\"headerlink\" title=\"Description\"></a>Description</h4><blockquote>\n<p>求N个点, M条边的有向图有多少生成子图满足整个图是强联通的.<br>$ N \\le 15, M \\le N(N-1) $</p>\n</blockquote>\n<h4 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h4><p>这题一眼看上去不太好做, 不妨从问题的反面来考虑.<br>首先一个非强联通的图缩掉$Scc$ 之后会得到若干个 $DAG$.<br>如果知道$Scc$ 的划分情况, 计算$DAG$ 的数量就变成一个经典问题了:</p>\n<script type=\"math/tex; mode=display\">E(S, T) = {|\\{(u, v) \\in E | u \\in S, v \\in T)\\}|}</script><script type=\"math/tex; mode=display\">F(S) = \\sum _ {T \\subset S, T \\neq \\varnothing} (-1) ^ {|T| - 1}  \\times 2 ^ {E(T, S-T)} F(T)</script><p>然而感觉枚举$Scc$ 划分更不可做.<br>先不考虑$Scc$ 如何划分, 考虑哪一些点集构成多少个$Scc$.<br>假设$G _ K(T)$表示$T$ 集合分成$K$ 个$Scc$ 的方案数, 类似上面式子地, 有:</p>\n<script type=\"math/tex; mode=display\">F(S) = \\sum _ {T \\subset S, T \\neq \\varnothing} \\sum _ {K = 1}^{|T|} (-1) ^ {K - 1} \\times G _ K(T) \\times 2 ^ {E(T, S-T) + E(S-T, S-T)}</script><script type=\"math/tex; mode=display\">DP(S) = 2 ^ {E(S, S)} - F(S)</script><p>实际上只需要求将某个集合分成奇数个$Scc$ 与偶数个$Scc$ 的方案数之差 $ P(S) $:</p>\n<script type=\"math/tex; mode=display\">P(S) = DP(S) + \\sum _ {T \\subset S, u \\in T} - DP(T) \\times P(S - T)</script><blockquote>\n<p>其中 $ u \\in T $ 避免重复计数.</p>\n</blockquote>\n<p>这样加上一些预处理的技巧可以做到 $ O(3 ^ n) $.</p>"},{"title":"杜教筛小结","date":"2017-05-23T12:01:43.000Z","_content":"\n### 引入\n\n&emsp;在一系列数论函数问题中，常常要快速地计算一些积性函数比如$\\mu$,$\\varphi$等函数的前缀和。 用线性筛来做自然不必说，那有没有低于线性的做法呢？\n&emsp;答案是肯定的。\n\n<!--more-->\n\n&emsp;一般来说，对于积性函数$f$, 当 $\\sum _ {d|n} f(d) $ 能够快速计算时， 用杜教筛就能够快速地处理出函数$f$的前缀和。\n\n### 举个栗子\n\n&emsp;对于$\\mu$, $\\sum _ {d|n} \\mu(d) = [n=1]$ ：\n    $$ \n    \\mu(n) = [n=1] - \\sum_{d|n, d \\neq n} \\mu(d) \\\\\n    \\\\\n    \\begin{align}\n        \\sum_{i=1}^{n} \\mu(i) \n        &= 1 + \\sum_{i=2}^{n} \\mu(i) \\\\\n        &= 1 - \\sum_{i=2}^{n} \\sum_{d|i, d \\neq i} \\mu(d) \\\\\n        &= 1 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\mu(d) \n    \\end{align}\n    $$\nP.S. 最后一步中的$k$，枚举$ \\frac{i}{d} $的值。\n\n&emsp;那么如果记 $S _ n = \\sum _ {i=1}^{n} \\mu(i) $, 则$S _ n = 1 - \\sum _ {k=2}^{n} S _ {\\lfloor \\frac{n}{k} \\rfloor}$，原式转化为可递归的形式。\n&emsp;类似的, $\\varphi$也可以这么算，如果你问我复杂度怎么证，我只能说无可奉告。\n\n### 看一道题\n\n&emsp;求：\n    $$ \\sum_{i=1}^{n} \\sum_{j=1}^{n} lcm(i, j) $$\n\n&emsp;首先按照惯用套路化简：\n    $$\n    \\begin{align}\n        \\sum_{i=1}^{n} \\sum_{j=1}^{n} lcm(i, j) \n        &= \\sum_{i=1}^{n} \\sum_{j=1}^{n} \\frac{ij}{gcd(i, j)} \\\\\n        &= \\sum_{d=1}^{n} d \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} i \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} j[gcd(i, j) = 1] \\\\\n        &= \\sum_{d=1}^{n} d (1 + 2\\sum_{i=2}^{\\lfloor \\frac{n}{d} \\rfloor} i \\times \\frac{i\\varphi(i)}{2}) \\\\\n        &= \\sum_{d=1}^{n} d \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} i^2 \\varphi(i) \n    \\end{align}\n    $$\nP.S.\n&emsp;&emsp;倒数第二步中强制使 $i > j$, 然后特判 $i = j = 1$ 。\n&emsp;&emsp;同时其中用到了一个重要的结论: $\\sum _ {i=1}^{n} i[gcd(i, n) = 1] = \\frac {\\varphi(n) \\times n + [n=1]}{2}$ \n\n&emsp;然后我们需要快速求$S _ n = \\sum _ {i=1}^{n} \\varphi(i) i^2$\n\n&emsp;类似$\\mu$:\n    $$ \n    \\sum_{d|n} \\varphi(d) = n\n    \\\\\n    \\begin{align}\n        S_n  \n        &= \\sum_{i=1}^{n} (i - \\sum_{d|i, d \\neq i} \\varphi(d)) i^2 \\\\\n        &= \\sum_{i=1}^{n} i^3 - \\sum_{i=1}^{n} i^2 \\sum_{d|n, d \\neq i} \\varphi(d) \\\\\n        &= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\varphi(d) d^2 k^2 \\\\\n        &= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} k^2 \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\varphi(d) d^2 \\\\\n        &= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} k^2 S_{\\lfloor \\frac{n}{k} \\rfloor}\n    \\end{align}\n    $$\n\n&emsp;至此已经可以用杜教筛来处理了，时间复杂度坑待填。。。\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst LL mod = 1e9 + 7;\nconst LL maxn = 5e6 + 10;\nconst int oo = 0x3f3f3f3f;\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\n#define fst first\n#define snd second\n#define debug(x) cerr << #x <<\":\" << (x) << endl\n#define REP(i, a, b) for(int i = (a), i##end = (b); i < i##end; ++i)\n#define DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i >= i##bgn; --i)\n\ntemplate<typename T> T read() {\n\tT n = 0, f = 1;\n\tchar ch = getchar();\n\tfor( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n\treturn n * f;\n}\n\nbool isprime[maxn];\nLL prime[maxn/10], pcnt, phi[maxn];\n\nvoid sieve() {\n    memset(isprime, 1, sizeof isprime);\n\n    phi[1] = 1;\n    for(int i = 2; i < maxn; i++) {\n        if(isprime[i]) {\n            phi[i] = i-1;\n            prime[pcnt++] = i;\n        }\n        for(int j = 0; j < pcnt && 1LL*i*prime[j] < maxn; j++) {\n            isprime[i * prime[j]] = 0;\n            if(i % prime[j] == 0) {\n                phi[i * prime[j]] = phi[i] * prime[j];\n                break;\n            }\n            phi[i * prime[j]] = phi[i] * phi[prime[j]];\n        }\n    }\n    for(int i = 1; i < maxn; i++) phi[i] = (phi[i-1] + phi[i] * i % mod * i % mod) % mod;\n}\n\nLL fpm(LL base, LL exp) {\n    LL ans = 1;\n    base %= mod;\n    for(; exp > 0; exp >>= 1, (base *= base) %= mod) \n        if(exp & 1) \n            (ans *= base) %= mod;\n    return ans;\n}\n\nconst LL inv6 = fpm(6, mod-2), inv2 = fpm(2, mod-2);\n\nLL calc(LL n) { n %= mod; return n * (n+1) % mod * inv2 % mod; }\nLL calc2(LL n) { n %= mod; return n * (n+1) % mod * (2*n+1) % mod * inv6 % mod; }\nLL calc3(LL n) { return fpm(calc(n), 2); } \n\nmap<LL, LL> mp;\nLL f(LL n) {\n    if(n < maxn) return phi[n];\n    if(mp.count(n)) return mp[n];\n    \n    LL ans = calc3(n);\n    for(LL i = 2, lst; i <= n; i = lst + 1) {\n        lst = n / (n/i);\n        (ans -= (calc2(lst) - calc2(i-1)) * f(n/i) % mod) %= mod;\n    }\n    return mp[n] = ans;\n}\n\nLL n;\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\",\"r\", stdin);\n    freopen(\"ans.txt\",\"w\", stdout);\n#endif\n\n    sieve();\n    n = read<LL>();\n\n    LL ans = 0;\n    for(LL i = 1, lst; i <= n; i = lst + 1) {\n        lst = n / (n/i);\n        (ans += (calc(lst) - calc(i-1)) * f(n/i) % mod) %= mod;\n    }\n    ans = (ans % mod + mod) % mod;\n    printf(\"%lld\\n\", ans);\n\n    return 0;\n}\n```\n","source":"_drafts/DYH_sieve.md","raw":"---\ntitle: 杜教筛小结\ndate: 2017-05-23 20:01:43\ntags:\n    - Number Theory\n---\n\n### 引入\n\n&emsp;在一系列数论函数问题中，常常要快速地计算一些积性函数比如$\\mu$,$\\varphi$等函数的前缀和。 用线性筛来做自然不必说，那有没有低于线性的做法呢？\n&emsp;答案是肯定的。\n\n<!--more-->\n\n&emsp;一般来说，对于积性函数$f$, 当 $\\sum _ {d|n} f(d) $ 能够快速计算时， 用杜教筛就能够快速地处理出函数$f$的前缀和。\n\n### 举个栗子\n\n&emsp;对于$\\mu$, $\\sum _ {d|n} \\mu(d) = [n=1]$ ：\n    $$ \n    \\mu(n) = [n=1] - \\sum_{d|n, d \\neq n} \\mu(d) \\\\\n    \\\\\n    \\begin{align}\n        \\sum_{i=1}^{n} \\mu(i) \n        &= 1 + \\sum_{i=2}^{n} \\mu(i) \\\\\n        &= 1 - \\sum_{i=2}^{n} \\sum_{d|i, d \\neq i} \\mu(d) \\\\\n        &= 1 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\mu(d) \n    \\end{align}\n    $$\nP.S. 最后一步中的$k$，枚举$ \\frac{i}{d} $的值。\n\n&emsp;那么如果记 $S _ n = \\sum _ {i=1}^{n} \\mu(i) $, 则$S _ n = 1 - \\sum _ {k=2}^{n} S _ {\\lfloor \\frac{n}{k} \\rfloor}$，原式转化为可递归的形式。\n&emsp;类似的, $\\varphi$也可以这么算，如果你问我复杂度怎么证，我只能说无可奉告。\n\n### 看一道题\n\n&emsp;求：\n    $$ \\sum_{i=1}^{n} \\sum_{j=1}^{n} lcm(i, j) $$\n\n&emsp;首先按照惯用套路化简：\n    $$\n    \\begin{align}\n        \\sum_{i=1}^{n} \\sum_{j=1}^{n} lcm(i, j) \n        &= \\sum_{i=1}^{n} \\sum_{j=1}^{n} \\frac{ij}{gcd(i, j)} \\\\\n        &= \\sum_{d=1}^{n} d \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} i \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} j[gcd(i, j) = 1] \\\\\n        &= \\sum_{d=1}^{n} d (1 + 2\\sum_{i=2}^{\\lfloor \\frac{n}{d} \\rfloor} i \\times \\frac{i\\varphi(i)}{2}) \\\\\n        &= \\sum_{d=1}^{n} d \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} i^2 \\varphi(i) \n    \\end{align}\n    $$\nP.S.\n&emsp;&emsp;倒数第二步中强制使 $i > j$, 然后特判 $i = j = 1$ 。\n&emsp;&emsp;同时其中用到了一个重要的结论: $\\sum _ {i=1}^{n} i[gcd(i, n) = 1] = \\frac {\\varphi(n) \\times n + [n=1]}{2}$ \n\n&emsp;然后我们需要快速求$S _ n = \\sum _ {i=1}^{n} \\varphi(i) i^2$\n\n&emsp;类似$\\mu$:\n    $$ \n    \\sum_{d|n} \\varphi(d) = n\n    \\\\\n    \\begin{align}\n        S_n  \n        &= \\sum_{i=1}^{n} (i - \\sum_{d|i, d \\neq i} \\varphi(d)) i^2 \\\\\n        &= \\sum_{i=1}^{n} i^3 - \\sum_{i=1}^{n} i^2 \\sum_{d|n, d \\neq i} \\varphi(d) \\\\\n        &= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\varphi(d) d^2 k^2 \\\\\n        &= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} k^2 \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\varphi(d) d^2 \\\\\n        &= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} k^2 S_{\\lfloor \\frac{n}{k} \\rfloor}\n    \\end{align}\n    $$\n\n&emsp;至此已经可以用杜教筛来处理了，时间复杂度坑待填。。。\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\n\nconst LL mod = 1e9 + 7;\nconst LL maxn = 5e6 + 10;\nconst int oo = 0x3f3f3f3f;\n\ntemplate <typename T> bool chkmax(T& a, T b) { return a < b ? a = b, 1 : 0; }\ntemplate <typename T> bool chkmin(T& a, T b) { return a > b ? a = b, 1 : 0; }\n\n#define fst first\n#define snd second\n#define debug(x) cerr << #x <<\":\" << (x) << endl\n#define REP(i, a, b) for(int i = (a), i##end = (b); i < i##end; ++i)\n#define DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i >= i##bgn; --i)\n\ntemplate<typename T> T read() {\n\tT n = 0, f = 1;\n\tchar ch = getchar();\n\tfor( ;!isdigit(ch); ch = getchar()) if(ch == '-') f = -1;\n\tfor( ; isdigit(ch); ch = getchar()) n = n * 10 + ch - 48;\n\treturn n * f;\n}\n\nbool isprime[maxn];\nLL prime[maxn/10], pcnt, phi[maxn];\n\nvoid sieve() {\n    memset(isprime, 1, sizeof isprime);\n\n    phi[1] = 1;\n    for(int i = 2; i < maxn; i++) {\n        if(isprime[i]) {\n            phi[i] = i-1;\n            prime[pcnt++] = i;\n        }\n        for(int j = 0; j < pcnt && 1LL*i*prime[j] < maxn; j++) {\n            isprime[i * prime[j]] = 0;\n            if(i % prime[j] == 0) {\n                phi[i * prime[j]] = phi[i] * prime[j];\n                break;\n            }\n            phi[i * prime[j]] = phi[i] * phi[prime[j]];\n        }\n    }\n    for(int i = 1; i < maxn; i++) phi[i] = (phi[i-1] + phi[i] * i % mod * i % mod) % mod;\n}\n\nLL fpm(LL base, LL exp) {\n    LL ans = 1;\n    base %= mod;\n    for(; exp > 0; exp >>= 1, (base *= base) %= mod) \n        if(exp & 1) \n            (ans *= base) %= mod;\n    return ans;\n}\n\nconst LL inv6 = fpm(6, mod-2), inv2 = fpm(2, mod-2);\n\nLL calc(LL n) { n %= mod; return n * (n+1) % mod * inv2 % mod; }\nLL calc2(LL n) { n %= mod; return n * (n+1) % mod * (2*n+1) % mod * inv6 % mod; }\nLL calc3(LL n) { return fpm(calc(n), 2); } \n\nmap<LL, LL> mp;\nLL f(LL n) {\n    if(n < maxn) return phi[n];\n    if(mp.count(n)) return mp[n];\n    \n    LL ans = calc3(n);\n    for(LL i = 2, lst; i <= n; i = lst + 1) {\n        lst = n / (n/i);\n        (ans -= (calc2(lst) - calc2(i-1)) * f(n/i) % mod) %= mod;\n    }\n    return mp[n] = ans;\n}\n\nLL n;\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"data.txt\",\"r\", stdin);\n    freopen(\"ans.txt\",\"w\", stdout);\n#endif\n\n    sieve();\n    n = read<LL>();\n\n    LL ans = 0;\n    for(LL i = 1, lst; i <= n; i = lst + 1) {\n        lst = n / (n/i);\n        (ans += (calc(lst) - calc(i-1)) * f(n/i) % mod) %= mod;\n    }\n    ans = (ans % mod + mod) % mod;\n    printf(\"%lld\\n\", ans);\n\n    return 0;\n}\n```\n","slug":"DYH_sieve","published":0,"updated":"2017-12-06T14:02:45.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclz5cv5001qonis7rd60iu8","content":"<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>&emsp;在一系列数论函数问题中，常常要快速地计算一些积性函数比如$\\mu$,$\\varphi$等函数的前缀和。 用线性筛来做自然不必说，那有没有低于线性的做法呢？<br>&emsp;答案是肯定的。</p>\n<a id=\"more\"></a>\n<p>&emsp;一般来说，对于积性函数$f$, 当 $\\sum _ {d|n} f(d) $ 能够快速计算时， 用杜教筛就能够快速地处理出函数$f$的前缀和。</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><p>&emsp;对于$\\mu$, $\\sum _ {d|n} \\mu(d) = [n=1]$ ：</p>\n<pre><code>$$ \n\\mu(n) = [n=1] - \\sum_{d|n, d \\neq n} \\mu(d) \\\\\n\\\\\n\\begin{align}\n    \\sum_{i=1}^{n} \\mu(i) \n    &amp;= 1 + \\sum_{i=2}^{n} \\mu(i) \\\\\n    &amp;= 1 - \\sum_{i=2}^{n} \\sum_{d|i, d \\neq i} \\mu(d) \\\\\n    &amp;= 1 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\mu(d) \n\\end{align}\n$$\n</code></pre><p>P.S. 最后一步中的$k$，枚举$ \\frac{i}{d} $的值。</p>\n<p>&emsp;那么如果记 $S _ n = \\sum _ {i=1}^{n} \\mu(i) $, 则$S _ n = 1 - \\sum _ {k=2}^{n} S _ {\\lfloor \\frac{n}{k} \\rfloor}$，原式转化为可递归的形式。<br>&emsp;类似的, $\\varphi$也可以这么算，如果你问我复杂度怎么证，我只能说无可奉告。</p>\n<h3 id=\"看一道题\"><a href=\"#看一道题\" class=\"headerlink\" title=\"看一道题\"></a>看一道题</h3><p>&emsp;求：</p>\n<pre><code>$$ \\sum_{i=1}^{n} \\sum_{j=1}^{n} lcm(i, j) $$\n</code></pre><p>&emsp;首先按照惯用套路化简：</p>\n<pre><code>$$\n\\begin{align}\n    \\sum_{i=1}^{n} \\sum_{j=1}^{n} lcm(i, j) \n    &amp;= \\sum_{i=1}^{n} \\sum_{j=1}^{n} \\frac{ij}{gcd(i, j)} \\\\\n    &amp;= \\sum_{d=1}^{n} d \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} i \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} j[gcd(i, j) = 1] \\\\\n    &amp;= \\sum_{d=1}^{n} d (1 + 2\\sum_{i=2}^{\\lfloor \\frac{n}{d} \\rfloor} i \\times \\frac{i\\varphi(i)}{2}) \\\\\n    &amp;= \\sum_{d=1}^{n} d \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} i^2 \\varphi(i) \n\\end{align}\n$$\n</code></pre><p>P.S.<br>&emsp;&emsp;倒数第二步中强制使 $i &gt; j$, 然后特判 $i = j = 1$ 。<br>&emsp;&emsp;同时其中用到了一个重要的结论: $\\sum _ {i=1}^{n} i[gcd(i, n) = 1] = \\frac {\\varphi(n) \\times n + [n=1]}{2}$ </p>\n<p>&emsp;然后我们需要快速求$S _ n = \\sum _ {i=1}^{n} \\varphi(i) i^2$</p>\n<p>&emsp;类似$\\mu$:</p>\n<pre><code>$$ \n\\sum_{d|n} \\varphi(d) = n\n\\\\\n\\begin{align}\n    S_n  \n    &amp;= \\sum_{i=1}^{n} (i - \\sum_{d|i, d \\neq i} \\varphi(d)) i^2 \\\\\n    &amp;= \\sum_{i=1}^{n} i^3 - \\sum_{i=1}^{n} i^2 \\sum_{d|n, d \\neq i} \\varphi(d) \\\\\n    &amp;= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\varphi(d) d^2 k^2 \\\\\n    &amp;= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} k^2 \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\varphi(d) d^2 \\\\\n    &amp;= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} k^2 S_{\\lfloor \\frac{n}{k} \\rfloor}\n\\end{align}\n$$\n</code></pre><p>&emsp;至此已经可以用杜教筛来处理了，时间复杂度坑待填。。。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> LL mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL maxn = <span class=\"number\">5e6</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt;<span class=\"meta-string\">\":\"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tT n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> isprime[maxn];</div><div class=\"line\">LL prime[maxn/<span class=\"number\">10</span>], pcnt, phi[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sieve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(isprime, <span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span> isprime);</div><div class=\"line\"></div><div class=\"line\">    phi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; maxn; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(isprime[i]) &#123;</div><div class=\"line\">            phi[i] = i<span class=\"number\">-1</span>;</div><div class=\"line\">            prime[pcnt++] = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; pcnt &amp;&amp; <span class=\"number\">1L</span>L*i*prime[j] &lt; maxn; j++) &#123;</div><div class=\"line\">            isprime[i * prime[j]] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i % prime[j] == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                phi[i * prime[j]] = phi[i] * prime[j];</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            phi[i * prime[j]] = phi[i] * phi[prime[j]];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; maxn; i++) phi[i] = (phi[i<span class=\"number\">-1</span>] + phi[i] * i % mod * i % mod) % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">fpm</span><span class=\"params\">(LL base, LL <span class=\"built_in\">exp</span>)</span> </span>&#123;</div><div class=\"line\">    LL ans = <span class=\"number\">1</span>;</div><div class=\"line\">    base %= mod;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">exp</span> &gt; <span class=\"number\">0</span>; <span class=\"built_in\">exp</span> &gt;&gt;= <span class=\"number\">1</span>, (base *= base) %= mod) </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &amp; <span class=\"number\">1</span>) </div><div class=\"line\">            (ans *= base) %= mod;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> LL inv6 = fpm(<span class=\"number\">6</span>, mod<span class=\"number\">-2</span>), inv2 = fpm(<span class=\"number\">2</span>, mod<span class=\"number\">-2</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">calc</span><span class=\"params\">(LL n)</span> </span>&#123; n %= mod; <span class=\"keyword\">return</span> n * (n+<span class=\"number\">1</span>) % mod * inv2 % mod; &#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">calc2</span><span class=\"params\">(LL n)</span> </span>&#123; n %= mod; <span class=\"keyword\">return</span> n * (n+<span class=\"number\">1</span>) % mod * (<span class=\"number\">2</span>*n+<span class=\"number\">1</span>) % mod * inv6 % mod; &#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">calc3</span><span class=\"params\">(LL n)</span> </span>&#123; <span class=\"keyword\">return</span> fpm(calc(n), <span class=\"number\">2</span>); &#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">map</span>&lt;LL, LL&gt; mp;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">f</span><span class=\"params\">(LL n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n &lt; maxn) <span class=\"keyword\">return</span> phi[n];</div><div class=\"line\">    <span class=\"keyword\">if</span>(mp.count(n)) <span class=\"keyword\">return</span> mp[n];</div><div class=\"line\">    </div><div class=\"line\">    LL ans = calc3(n);</div><div class=\"line\">    <span class=\"keyword\">for</span>(LL i = <span class=\"number\">2</span>, lst; i &lt;= n; i = lst + <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        lst = n / (n/i);</div><div class=\"line\">        (ans -= (calc2(lst) - calc2(i<span class=\"number\">-1</span>)) * f(n/i) % mod) %= mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mp[n] = ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LL n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>,<span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>,<span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    sieve();</div><div class=\"line\">    n = read&lt;LL&gt;();</div><div class=\"line\"></div><div class=\"line\">    LL ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(LL i = <span class=\"number\">1</span>, lst; i &lt;= n; i = lst + <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        lst = n / (n/i);</div><div class=\"line\">        (ans += (calc(lst) - calc(i<span class=\"number\">-1</span>)) * f(n/i) % mod) %= mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ans = (ans % mod + mod) % mod;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>&emsp;在一系列数论函数问题中，常常要快速地计算一些积性函数比如$\\mu$,$\\varphi$等函数的前缀和。 用线性筛来做自然不必说，那有没有低于线性的做法呢？<br>&emsp;答案是肯定的。</p>","more":"<p>&emsp;一般来说，对于积性函数$f$, 当 $\\sum _ {d|n} f(d) $ 能够快速计算时， 用杜教筛就能够快速地处理出函数$f$的前缀和。</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><p>&emsp;对于$\\mu$, $\\sum _ {d|n} \\mu(d) = [n=1]$ ：</p>\n<pre><code>$$ \n\\mu(n) = [n=1] - \\sum_{d|n, d \\neq n} \\mu(d) \\\\\n\\\\\n\\begin{align}\n    \\sum_{i=1}^{n} \\mu(i) \n    &amp;= 1 + \\sum_{i=2}^{n} \\mu(i) \\\\\n    &amp;= 1 - \\sum_{i=2}^{n} \\sum_{d|i, d \\neq i} \\mu(d) \\\\\n    &amp;= 1 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\mu(d) \n\\end{align}\n$$\n</code></pre><p>P.S. 最后一步中的$k$，枚举$ \\frac{i}{d} $的值。</p>\n<p>&emsp;那么如果记 $S _ n = \\sum _ {i=1}^{n} \\mu(i) $, 则$S _ n = 1 - \\sum _ {k=2}^{n} S _ {\\lfloor \\frac{n}{k} \\rfloor}$，原式转化为可递归的形式。<br>&emsp;类似的, $\\varphi$也可以这么算，如果你问我复杂度怎么证，我只能说无可奉告。</p>\n<h3 id=\"看一道题\"><a href=\"#看一道题\" class=\"headerlink\" title=\"看一道题\"></a>看一道题</h3><p>&emsp;求：</p>\n<pre><code>$$ \\sum_{i=1}^{n} \\sum_{j=1}^{n} lcm(i, j) $$\n</code></pre><p>&emsp;首先按照惯用套路化简：</p>\n<pre><code>$$\n\\begin{align}\n    \\sum_{i=1}^{n} \\sum_{j=1}^{n} lcm(i, j) \n    &amp;= \\sum_{i=1}^{n} \\sum_{j=1}^{n} \\frac{ij}{gcd(i, j)} \\\\\n    &amp;= \\sum_{d=1}^{n} d \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} i \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} j[gcd(i, j) = 1] \\\\\n    &amp;= \\sum_{d=1}^{n} d (1 + 2\\sum_{i=2}^{\\lfloor \\frac{n}{d} \\rfloor} i \\times \\frac{i\\varphi(i)}{2}) \\\\\n    &amp;= \\sum_{d=1}^{n} d \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} i^2 \\varphi(i) \n\\end{align}\n$$\n</code></pre><p>P.S.<br>&emsp;&emsp;倒数第二步中强制使 $i &gt; j$, 然后特判 $i = j = 1$ 。<br>&emsp;&emsp;同时其中用到了一个重要的结论: $\\sum _ {i=1}^{n} i[gcd(i, n) = 1] = \\frac {\\varphi(n) \\times n + [n=1]}{2}$ </p>\n<p>&emsp;然后我们需要快速求$S _ n = \\sum _ {i=1}^{n} \\varphi(i) i^2$</p>\n<p>&emsp;类似$\\mu$:</p>\n<pre><code>$$ \n\\sum_{d|n} \\varphi(d) = n\n\\\\\n\\begin{align}\n    S_n  \n    &amp;= \\sum_{i=1}^{n} (i - \\sum_{d|i, d \\neq i} \\varphi(d)) i^2 \\\\\n    &amp;= \\sum_{i=1}^{n} i^3 - \\sum_{i=1}^{n} i^2 \\sum_{d|n, d \\neq i} \\varphi(d) \\\\\n    &amp;= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\varphi(d) d^2 k^2 \\\\\n    &amp;= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} k^2 \\sum_{d=1}^{\\lfloor \\frac{n}{k} \\rfloor} \\varphi(d) d^2 \\\\\n    &amp;= \\sum_{i=1}^{n} i^3 - \\sum_{k=2}^{n} k^2 S_{\\lfloor \\frac{n}{k} \\rfloor}\n\\end{align}\n$$\n</code></pre><p>&emsp;至此已经可以用杜教筛来处理了，时间复杂度坑待填。。。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> LL mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL maxn = <span class=\"number\">5e6</span> + <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> oo = <span class=\"number\">0x3f3f3f3f</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &lt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T&amp; a, T b)</span> </span>&#123; <span class=\"keyword\">return</span> a &gt; b ? a = b, <span class=\"number\">1</span> : <span class=\"number\">0</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fst first</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> snd second</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt;<span class=\"meta-string\">\":\"</span> &lt;&lt; (x) &lt;&lt; endl</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i, a, b) for(int i = (a), i##end = (b); i &lt; i##end; ++i)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DREP(i, a, b) for(int i = (a)-1, i##bgn = (b); i &gt;= i##bgn; --i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tT n = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch = getchar();</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ;!<span class=\"built_in\">isdigit</span>(ch); ch = getchar()) <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>( ; <span class=\"built_in\">isdigit</span>(ch); ch = getchar()) n = n * <span class=\"number\">10</span> + ch - <span class=\"number\">48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n * f;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> isprime[maxn];</div><div class=\"line\">LL prime[maxn/<span class=\"number\">10</span>], pcnt, phi[maxn];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sieve</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(isprime, <span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span> isprime);</div><div class=\"line\"></div><div class=\"line\">    phi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; maxn; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(isprime[i]) &#123;</div><div class=\"line\">            phi[i] = i<span class=\"number\">-1</span>;</div><div class=\"line\">            prime[pcnt++] = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; pcnt &amp;&amp; <span class=\"number\">1L</span>L*i*prime[j] &lt; maxn; j++) &#123;</div><div class=\"line\">            isprime[i * prime[j]] = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i % prime[j] == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                phi[i * prime[j]] = phi[i] * prime[j];</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            phi[i * prime[j]] = phi[i] * phi[prime[j]];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; maxn; i++) phi[i] = (phi[i<span class=\"number\">-1</span>] + phi[i] * i % mod * i % mod) % mod;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">fpm</span><span class=\"params\">(LL base, LL <span class=\"built_in\">exp</span>)</span> </span>&#123;</div><div class=\"line\">    LL ans = <span class=\"number\">1</span>;</div><div class=\"line\">    base %= mod;</div><div class=\"line\">    <span class=\"keyword\">for</span>(; <span class=\"built_in\">exp</span> &gt; <span class=\"number\">0</span>; <span class=\"built_in\">exp</span> &gt;&gt;= <span class=\"number\">1</span>, (base *= base) %= mod) </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &amp; <span class=\"number\">1</span>) </div><div class=\"line\">            (ans *= base) %= mod;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> LL inv6 = fpm(<span class=\"number\">6</span>, mod<span class=\"number\">-2</span>), inv2 = fpm(<span class=\"number\">2</span>, mod<span class=\"number\">-2</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">calc</span><span class=\"params\">(LL n)</span> </span>&#123; n %= mod; <span class=\"keyword\">return</span> n * (n+<span class=\"number\">1</span>) % mod * inv2 % mod; &#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">calc2</span><span class=\"params\">(LL n)</span> </span>&#123; n %= mod; <span class=\"keyword\">return</span> n * (n+<span class=\"number\">1</span>) % mod * (<span class=\"number\">2</span>*n+<span class=\"number\">1</span>) % mod * inv6 % mod; &#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">calc3</span><span class=\"params\">(LL n)</span> </span>&#123; <span class=\"keyword\">return</span> fpm(calc(n), <span class=\"number\">2</span>); &#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">map</span>&lt;LL, LL&gt; mp;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">f</span><span class=\"params\">(LL n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n &lt; maxn) <span class=\"keyword\">return</span> phi[n];</div><div class=\"line\">    <span class=\"keyword\">if</span>(mp.count(n)) <span class=\"keyword\">return</span> mp[n];</div><div class=\"line\">    </div><div class=\"line\">    LL ans = calc3(n);</div><div class=\"line\">    <span class=\"keyword\">for</span>(LL i = <span class=\"number\">2</span>, lst; i &lt;= n; i = lst + <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        lst = n / (n/i);</div><div class=\"line\">        (ans -= (calc2(lst) - calc2(i<span class=\"number\">-1</span>)) * f(n/i) % mod) %= mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mp[n] = ans;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LL n;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></div><div class=\"line\">    freopen(<span class=\"string\">\"data.txt\"</span>,<span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"ans.txt\"</span>,<span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    sieve();</div><div class=\"line\">    n = read&lt;LL&gt;();</div><div class=\"line\"></div><div class=\"line\">    LL ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(LL i = <span class=\"number\">1</span>, lst; i &lt;= n; i = lst + <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        lst = n / (n/i);</div><div class=\"line\">        (ans += (calc(lst) - calc(i<span class=\"number\">-1</span>)) * f(n/i) % mod) %= mod;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ans = (ans % mod + mod) % mod;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, ans);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjclz5cke0000onisnzcmapww","tag_id":"cjclz5ckr0002onisjuhuo5zc","_id":"cjclz5cl10007onise246f7wg"},{"post_id":"cjclz5cke0000onisnzcmapww","tag_id":"cjclz5cky0005onisre7udvw0","_id":"cjclz5cl10008oniserifztn7"},{"post_id":"cjclz5ckn0001oniscssessph","tag_id":"cjclz5ckr0002onisjuhuo5zc","_id":"cjclz5cl1000aonispyk5rkjh"},{"post_id":"cjclz5cks0003onisqudmx0nh","tag_id":"cjclz5cl10009onisbedtdy5w","_id":"cjclz5cl3000donisylslogyv"},{"post_id":"cjclz5cks0003onisqudmx0nh","tag_id":"cjclz5cl2000bonisbz3uncjq","_id":"cjclz5cl3000eonis1bgy7rg1"},{"post_id":"cjclz5ckv0004onisnff50lx7","tag_id":"cjclz5cl3000conisheh7dzsq","_id":"cjclz5cl4000fonis7m8vjbce"},{"post_id":"cjclz5cmb000ionismn6h1vub","tag_id":"cjclz5ckr0002onisjuhuo5zc","_id":"cjclz5cmj000monisjc4dr0c3"},{"post_id":"cjclz5cmg000lonisntiyzsm0","tag_id":"cjclz5cl2000bonisbz3uncjq","_id":"cjclz5cml000oonis9g0r9xr7"},{"post_id":"cjclz5cm6000gonisk64jwwph","tag_id":"cjclz5cmf000konisy79e98vd","_id":"cjclz5cmo000ronis7fjq1aow"},{"post_id":"cjclz5cmm000ponisclweq4in","tag_id":"cjclz5cl3000conisheh7dzsq","_id":"cjclz5cmq000tonisfveq3ux1"},{"post_id":"cjclz5cmk000nonisdf09sfhz","tag_id":"cjclz5cmo000qonisuhvj7xpj","_id":"cjclz5cmx000xonispfg8tx3k"},{"post_id":"cjclz5cmp000sonis1xnyayji","tag_id":"cjclz5cmx000wonish2yqxqev","_id":"cjclz5cne0012onis7901s5al"},{"post_id":"cjclz5cmr000uonis6qbhjwht","tag_id":"cjclz5cnd0010onis8o07n0xl","_id":"cjclz5cnl0016onis1nzg2zgf"},{"post_id":"cjclz5cnh0013onis9w04shzy","tag_id":"cjclz5cl3000conisheh7dzsq","_id":"cjclz5cnm0018onisqyoilx9s"},{"post_id":"cjclz5cnj0015onisv6ipc4rs","tag_id":"cjclz5cl10009onisbedtdy5w","_id":"cjclz5cnp001bonis3ytpkf1p"},{"post_id":"cjclz5cmu000vonisxh2hgpql","tag_id":"cjclz5cni0014onis9d8i868f","_id":"cjclz5cnp001conismpq5r2sj"},{"post_id":"cjclz5cmu000vonisxh2hgpql","tag_id":"cjclz5cky0005onisre7udvw0","_id":"cjclz5cnp001eonis8bmaszo7"},{"post_id":"cjclz5cnl0017onis35v14o5e","tag_id":"cjclz5cl2000bonisbz3uncjq","_id":"cjclz5cnq001fonisfyrk20zr"},{"post_id":"cjclz5cmy000yoniscpsdknp0","tag_id":"cjclz5cky0005onisre7udvw0","_id":"cjclz5cnq001honisnjiz12q1"},{"post_id":"cjclz5cmy000yoniscpsdknp0","tag_id":"cjclz5cnm0019onisv1zrm6qm","_id":"cjclz5cnq001ionisttc3rm9c"},{"post_id":"cjclz5cn6000zonis010jj9b6","tag_id":"cjclz5cnp001donisvcc8o2pb","_id":"cjclz5cnr001konisuiai5fcd"},{"post_id":"cjclz5cn6000zonis010jj9b6","tag_id":"cjclz5cnq001gonisp1dufq9o","_id":"cjclz5cnr001lonisnw06ypj2"},{"post_id":"cjclz5cnd0011onisvdxrp20t","tag_id":"cjclz5cnm0019onisv1zrm6qm","_id":"cjclz5cnr001nonis3m3zb61h"},{"post_id":"cjclz5cnm001aonisyguklbe8","tag_id":"cjclz5cnm0019onisv1zrm6qm","_id":"cjclz5cnr001oonisfgy4mecf"},{"post_id":"cjclz5cnm001aonisyguklbe8","tag_id":"cjclz5cky0005onisre7udvw0","_id":"cjclz5cns001ponisdvp9ei0b"},{"post_id":"cjclz5cv5001qonis7rd60iu8","tag_id":"cjclz5cmf000konisy79e98vd","_id":"cjclz5cv7001ronis6gj7l5en"}],"Tag":[{"name":"Mathematics","_id":"cjclz5ckr0002onisjuhuo5zc"},{"name":"Dynamic Programming","_id":"cjclz5cky0005onisre7udvw0"},{"name":"Solution","_id":"cjclz5cl10009onisbedtdy5w"},{"name":"Datastructure","_id":"cjclz5cl2000bonisbz3uncjq"},{"name":"Graph Theory","_id":"cjclz5cl3000conisheh7dzsq"},{"name":"Number Theory","_id":"cjclz5cmf000konisy79e98vd"},{"name":"Plan or Summary","_id":"cjclz5cmo000qonisuhvj7xpj"},{"name":"Summary","_id":"cjclz5cmx000wonish2yqxqev"},{"name":"StringMatch","_id":"cjclz5cnd0010onis8o07n0xl"},{"name":"Counting Problems","_id":"cjclz5cni0014onis9d8i868f"},{"name":"Probability","_id":"cjclz5cnm0019onisv1zrm6qm"},{"name":"Burnside","_id":"cjclz5cnp001donisvcc8o2pb"},{"name":"Combinatorial","_id":"cjclz5cnq001gonisp1dufq9o"}]}}